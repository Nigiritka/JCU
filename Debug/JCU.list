
JCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080089f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000024  08008a14  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08008a14  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4f9  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003250  00000000  00000000  0003c54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00040de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023655  00000000  00000000  00042300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018be3  00000000  00000000  00065955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbe67  00000000  00000000  0007e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a39f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  0015a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008980 	.word	0x08008980

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08008980 	.word	0x08008980

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CheckErrorsEnc>:
volatile bool COF = 0;											// if 1 - invalid angle data, AS5048 internal error
volatile bool OCF = 1;											// always must be 1, if isn't - AS5048 internal error.
volatile bool EncoderErrorFlag = 0;

void CheckErrorsEnc()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	comp_high = (AGCDiagnosticValue[0] & 0x08);					// bitmask for comp_high flag
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <CheckErrorsEnc+0xb8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <CheckErrorsEnc+0xbc>)
 80004dc:	701a      	strb	r2, [r3, #0]
	comp_low = (AGCDiagnosticValue[0] & 0x04);					// bitmask for comp_low flag
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <CheckErrorsEnc+0xb8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <CheckErrorsEnc+0xc0>)
 80004f2:	701a      	strb	r2, [r3, #0]
	COF = (AGCDiagnosticValue[0] & 0x02);						// bitmask for COF flag
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <CheckErrorsEnc+0xb8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000508:	701a      	strb	r2, [r3, #0]
	OCF = (AGCDiagnosticValue[0] & 0x01);						// bitmask for OCF flag
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <CheckErrorsEnc+0xb8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <CheckErrorsEnc+0xc8>)
 800051e:	701a      	strb	r2, [r3, #0]

	// Set/reset LED if we have/don't have an error
	if(comp_high == 1 || comp_low == 1 || COF == 1 || OCF == 0)
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <CheckErrorsEnc+0xbc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d111      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <CheckErrorsEnc+0xc0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10c      	bne.n	800054e <CheckErrorsEnc+0x8a>
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <CheckErrorsEnc+0xc8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <CheckErrorsEnc+0x9e>
	{
		EnableAlarmLED();
 800054e:	f000 f917 	bl	8000780 <EnableAlarmLED>
		JCUState.Errors |= ERROR_ENCODER_MAGNET;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <CheckErrorsEnc+0xcc>)
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	e009      	b.n	8000576 <CheckErrorsEnc+0xb2>
	}
	else
	{
		DisableAlarmLED();
 8000562:	f000 f919 	bl	8000798 <DisableAlarmLED>
		JCUState.Errors &=~ ERROR_ENCODER_MAGNET;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000572:	801a      	strh	r2, [r3, #0]
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000044 	.word	0x20000044
 8000580:	20000046 	.word	0x20000046
 8000584:	20000047 	.word	0x20000047
 8000588:	20000048 	.word	0x20000048
 800058c:	2000000a 	.word	0x2000000a
 8000590:	2000011c 	.word	0x2000011c

08000594 <ParityOk>:

//--------------Calculate PARITY EVEN bit-----------------
bool ParityOk(uint16_t scancode)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]

	uint16_t parity = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
	// checking 15 bits for EVEN Parity
	for (uint8_t i = 0; i < 15; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	e00d      	b.n	80005c4 <ParityOk+0x30>
	{
		if(scancode & 0x01)										// see if LSB is 1
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <ParityOk+0x24>
		{
			parity++;											// if it 1 add counter of "ones"
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
		}
		scancode = scancode >> 1;								// shift to next bit
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 15; i++)
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	3301      	adds	r3, #1
 80005c2:	737b      	strb	r3, [r7, #13]
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	2b0e      	cmp	r3, #14
 80005c8:	d9ee      	bls.n	80005a8 <ParityOk+0x14>
	}

	parity = parity & 0x01;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	81fb      	strh	r3, [r7, #14]
	// Compare calculated parity and the MSB of received DATA, return "1" if they are the same
	return (parity == scancode);
 80005d2:	89fa      	ldrh	r2, [r7, #14]
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <EncoderRoutine>:
//-------------------------------------------------------



void EncoderRoutine(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	switch(EncoderState)
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <EncoderRoutine+0x114>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	f200 8081 	bhi.w	80006fc <EncoderRoutine+0x110>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <EncoderRoutine+0x14>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000621 	.word	0x08000621
 8000604:	080006fb 	.word	0x080006fb
 8000608:	08000641 	.word	0x08000641
 800060c:	080006fb 	.word	0x080006fb
 8000610:	08000661 	.word	0x08000661
 8000614:	080006cf 	.word	0x080006cf
 8000618:	080006fb 	.word	0x080006fb
 800061c:	080006ef 	.word	0x080006ef
	{
		case (ENCODER_CLEAR_ERRORS):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f003 ff84 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadErrorFlagsAddress, Angle, SIZE);
 800062c:	2302      	movs	r3, #2
 800062e:	4a35      	ldr	r2, [pc, #212]	; (8000704 <EncoderRoutine+0x118>)
 8000630:	4935      	ldr	r1, [pc, #212]	; (8000708 <EncoderRoutine+0x11c>)
 8000632:	4836      	ldr	r0, [pc, #216]	; (800070c <EncoderRoutine+0x120>)
 8000634:	f005 f9c4 	bl	80059c0 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ERRORS;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <EncoderRoutine+0x114>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
		break;
 800063e:	e05d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ERRORS):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_WAIT_ANGLE):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f003 ff74 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, AGCDiagnosticAddress, Angle, SIZE);			// read  read angle, and sent request to read errors, so that next communication we would have error information
 800064c:	2302      	movs	r3, #2
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <EncoderRoutine+0x118>)
 8000650:	492f      	ldr	r1, [pc, #188]	; (8000710 <EncoderRoutine+0x124>)
 8000652:	482e      	ldr	r0, [pc, #184]	; (800070c <EncoderRoutine+0x120>)
 8000654:	f005 f9b4 	bl	80059c0 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ANGLE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <EncoderRoutine+0x114>)
 800065a:	2203      	movs	r2, #3
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e04d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ANGLE):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_ANGLE):
			temp = (Angle[0] << 8) + Angle[1];
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EncoderRoutine+0x118>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <EncoderRoutine+0x118>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <EncoderRoutine+0x128>)
 8000676:	801a      	strh	r2, [r3, #0]
			if (ParityOk(temp))										// check parity, if angular data was corrupted
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EncoderRoutine+0x128>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff89 	bl	8000594 <ParityOk>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d015      	beq.n	80006b4 <EncoderRoutine+0xc8>
			{
				JCUState.Errors &=~ ERROR_ENCODER_PARITY;
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <EncoderRoutine+0x12c>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f023 0302 	bic.w	r3, r3, #2
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EncoderRoutine+0x12c>)
 8000694:	801a      	strh	r2, [r3, #0]
				temp &= 0x3FFF;										// remove status bits from angle information
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <EncoderRoutine+0x128>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <EncoderRoutine+0x128>)
 80006a2:	801a      	strh	r2, [r3, #0]
				JCUState.Angle = temp;								// update angle with latest value
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <EncoderRoutine+0x128>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <EncoderRoutine+0x12c>)
 80006aa:	805a      	strh	r2, [r3, #2]
				EncoderState = ENCODER_WAIT_DIAGNOSTIC;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EncoderRoutine+0x114>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	701a      	strb	r2, [r3, #0]
				break;
 80006b2:	e023      	b.n	80006fc <EncoderRoutine+0x110>
			}
			else
			{
				//JCUState.Angle = 0;
				DisableMotor();
 80006b4:	f000 fd36 	bl	8001124 <DisableMotor>
				JCUState.Errors |= ERROR_ENCODER_PARITY;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <EncoderRoutine+0x12c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <EncoderRoutine+0x12c>)
 80006c4:	801a      	strh	r2, [r3, #0]
				EncoderState = ENCODER_CLEAR_ERRORS;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <EncoderRoutine+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				break;
 80006cc:	e016      	b.n	80006fc <EncoderRoutine+0x110>
			}

		case (ENCODER_WAIT_DIAGNOSTIC):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f003 ff2d 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadAngle, AGCDiagnosticValue, SIZE);		// read data about error, and sent request to read angle, so that next communication we would have actual angle information
 80006da:	2302      	movs	r3, #2
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <EncoderRoutine+0x130>)
 80006de:	4910      	ldr	r1, [pc, #64]	; (8000720 <EncoderRoutine+0x134>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <EncoderRoutine+0x120>)
 80006e2:	f005 f96d 	bl	80059c0 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_DIAGNOSTIC;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <EncoderRoutine+0x114>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	701a      	strb	r2, [r3, #0]
		break;
 80006ec:	e006      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_DIAGNOSTIC):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_DIAGNOSTIC):
			CheckErrorsEnc();
 80006ee:	f7ff fee9 	bl	80004c4 <CheckErrorsEnc>
			EncoderState = ENCODER_WAIT_ANGLE;
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <EncoderRoutine+0x114>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e000      	b.n	80006fc <EncoderRoutine+0x110>
		break;
 80006fa:	bf00      	nop
	}
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000114 	.word	0x20000114
 8000704:	20000040 	.word	0x20000040
 8000708:	20000004 	.word	0x20000004
 800070c:	20000428 	.word	0x20000428
 8000710:	20000008 	.word	0x20000008
 8000714:	20000116 	.word	0x20000116
 8000718:	2000011c 	.word	0x2000011c
 800071c:	20000044 	.word	0x20000044
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);				// put CS high again after end of data transfer
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f003 fefe 	bl	8004534 <HAL_GPIO_WritePin>
	if (EncoderState == ENCODER_LOCK_ERRORS)
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d103      	bne.n	8000748 <HAL_SPI_TxRxCpltCallback+0x24>
		EncoderState = ENCODER_WAIT_ANGLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e012      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_ANGLE)
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d103      	bne.n	8000758 <HAL_SPI_TxRxCpltCallback+0x34>
		EncoderState = ENCODER_BUSY_ANGLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000752:	2204      	movs	r2, #4
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e00a      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_DIAGNOSTIC)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b06      	cmp	r3, #6
 800075e:	d103      	bne.n	8000768 <HAL_SPI_TxRxCpltCallback+0x44>
		EncoderState = ENCODER_BUSY_DIAGNOSTIC;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000762:	2207      	movs	r2, #7
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else
		EncoderState = ENCODER_CLEAR_ERRORS;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

	EncoderRoutine();																// process data which we have just read
 800076e:	f7ff ff3d 	bl	80005ec <EncoderRoutine>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000114 	.word	0x20000114

08000780 <EnableAlarmLED>:

void EnableAlarmLED(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <EnableAlarmLED+0x14>)
 800078c:	f003 fed2 	bl	8004534 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	48000800 	.word	0x48000800

08000798 <DisableAlarmLED>:

void DisableAlarmLED(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <DisableAlarmLED+0x14>)
 80007a4:	f003 fec6 	bl	8004534 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000800 	.word	0x48000800

080007b0 <ModbusRTURoutine>:
 * 43.5 us data is sent, 8 bytes
 */


void ModbusRTURoutine(uint8_t *pBUFFER, uint8_t Length)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
 80007bc:	466b      	mov	r3, sp
 80007be:	461d      	mov	r5, r3
	//Length = BufferSize - hdma_usart1_rx.Instance->CNDTR;
	/*
	 * create temporary variables for ModBus parcing
	 */
	uint16_t CRCCalc = 0;							// CRC which will be calculated
 80007c0:	2300      	movs	r3, #0
 80007c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t CRCValue = 0;							// CRC which was sent by Master
 80007c4:	2300      	movs	r3, #0
 80007c6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t ModbusFunction = 0;						// Master modbus function (what action slave should do)
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t RequestedAddress = 0;					// started address which Master wants to read
 80007ce:	2300      	movs	r3, #0
 80007d0:	843b      	strh	r3, [r7, #32]
	uint16_t AmountofRead = 0;						// amount of registers which master wants to read
 80007d2:	2300      	movs	r3, #0
 80007d4:	83fb      	strh	r3, [r7, #30]
	uint16_t AmountofWrite = 0;						// amount of registers which master wants to write
 80007d6:	2300      	movs	r3, #0
 80007d8:	83bb      	strh	r3, [r7, #28]
	uint8_t ByteCount = 0;							// amount of BYTEs which will be sent in response
 80007da:	2300      	movs	r3, #0
 80007dc:	76fb      	strb	r3, [r7, #27]
	uint16_t CRCforResponse	= 0;					// CRC will be calculated for response data
 80007de:	2300      	movs	r3, #0
 80007e0:	833b      	strh	r3, [r7, #24]
	uint8_t temp[Length];							// temporary array which we are gonna use to process incoming data
 80007e2:	78fc      	ldrb	r4, [r7, #3]
 80007e4:	4623      	mov	r3, r4
 80007e6:	3b01      	subs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	b2e0      	uxtb	r0, r4
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	f04f 0200 	mov.w	r2, #0
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	00cb      	lsls	r3, r1, #3
 80007fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007fe:	00c2      	lsls	r2, r0, #3
 8000800:	b2e0      	uxtb	r0, r4
 8000802:	f04f 0100 	mov.w	r1, #0
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	00cb      	lsls	r3, r1, #3
 8000810:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000814:	00c2      	lsls	r2, r0, #3
 8000816:	4623      	mov	r3, r4
 8000818:	3307      	adds	r3, #7
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	ebad 0d03 	sub.w	sp, sp, r3
 8000822:	466b      	mov	r3, sp
 8000824:	3300      	adds	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
	uint16_t *ptemp16bitJCUConfig = pJCUConfig;		// temporary pointer to shift between data which should be read or written pJCUConfig
 8000828:	4b95      	ldr	r3, [pc, #596]	; (8000a80 <ModbusRTURoutine+0x2d0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *ptemp16bitJCUState = pJCUState;		// temporary pointer to shift between data which should be read or written pJCUState
 800082e:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <ModbusRTURoutine+0x2d4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	633b      	str	r3, [r7, #48]	; 0x30

	// putting all data to the temp array
	for (uint8_t i = 0; i < Length; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800083a:	e00d      	b.n	8000858 <ModbusRTURoutine+0xa8>
	{
		temp [i] = pBUFFER[i];
 800083c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	441a      	add	r2, r3
 8000844:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000848:	7811      	ldrb	r1, [r2, #0]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < Length; i++)
 800084e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000852:	3301      	adds	r3, #1
 8000854:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000858:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3ec      	bcc.n	800083c <ModbusRTURoutine+0x8c>
	}

	// comparing received and calculated CRCs

	CRCValue = temp[Length-1];
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	3b01      	subs	r3, #1
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue <<= 8;
 800086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue = CRCValue + temp[Length-2];
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	3b02      	subs	r3, #2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	b29a      	uxth	r2, r3
 800087c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800087e:	4413      	add	r3, r2
 8000880:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCCalc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&temp, (Length-2));
 8000882:	6939      	ldr	r1, [r7, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	3b02      	subs	r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	487f      	ldr	r0, [pc, #508]	; (8000a88 <ModbusRTURoutine+0x2d8>)
 800088c:	f003 f8d8 	bl	8003a40 <HAL_CRC_Calculate>
 8000890:	4603      	mov	r3, r0
 8000892:	84fb      	strh	r3, [r7, #38]	; 0x26

	// If data was not corrupted (CRC is ok)
	//if (1)
	if (CRCCalc == CRCValue)
 8000894:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 82a4 	bne.w	8000de6 <ModbusRTURoutine+0x636>
	{
		// Check if the message for us
		if (temp[0] == SLAVE_ID)
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4293      	cmp	r3, r2
 80008a6:	f040 828e 	bne.w	8000dc6 <ModbusRTURoutine+0x616>
		{
			// this packet for us, let's read it
			// Defining the modbus function
			ModbusFunction = temp[1];
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			switch (ModbusFunction)
 80008b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b6:	3b01      	subs	r3, #1
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	f200 8280 	bhi.w	8000dbe <ModbusRTURoutine+0x60e>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <ModbusRTURoutine+0x114>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	08000905 	.word	0x08000905
 80008c8:	08000dbf 	.word	0x08000dbf
 80008cc:	0800094f 	.word	0x0800094f
 80008d0:	08000a9d 	.word	0x08000a9d
 80008d4:	08000dfd 	.word	0x08000dfd
 80008d8:	08000bcf 	.word	0x08000bcf
 80008dc:	08000dbf 	.word	0x08000dbf
 80008e0:	08000dbf 	.word	0x08000dbf
 80008e4:	08000dbf 	.word	0x08000dbf
 80008e8:	08000dbf 	.word	0x08000dbf
 80008ec:	08000dbf 	.word	0x08000dbf
 80008f0:	08000dbf 	.word	0x08000dbf
 80008f4:	08000dbf 	.word	0x08000dbf
 80008f8:	08000dbf 	.word	0x08000dbf
 80008fc:	08000dbf 	.word	0x08000dbf
 8000900:	08000c61 	.word	0x08000c61
			{
				case READ_COILS:
					// this part is reading JCUState.StatusRegister bit by bit. Detailed description of each bit(coils) in Motor_Driver.h

					// Defining the first address of coil Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	b29b      	uxth	r3, r3
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b29a      	uxth	r2, r3
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	78db      	ldrb	r3, [r3, #3]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					//???????????????????????

					// Defining how many coil master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	b29b      	uxth	r3, r3
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b29a      	uxth	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4413      	add	r3, r2
 800092a:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 800092c:	8bfb      	ldrh	r3, [r7, #30]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the coil is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ENABLE_MOTOR_Pos) && (RequestedAddress <= SOFTWARE_RESET_Pos))
 8000934:	8c3b      	ldrh	r3, [r7, #32]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d804      	bhi.n	8000944 <ModbusRTURoutine+0x194>
							&& (((RequestedAddress - ENABLE_MOTOR_Pos) + AmountofRead) <= TOTAL_COILS))
 800093a:	8c3a      	ldrh	r2, [r7, #32]
 800093c:	8bfb      	ldrh	r3, [r7, #30]
 800093e:	4413      	add	r3, r2
 8000940:	2b10      	cmp	r3, #16
 8000942:	d903      	bls.n	800094c <ModbusRTURoutine+0x19c>

					}
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000944:	2002      	movs	r0, #2
 8000946:	f000 fa69 	bl	8000e1c <ModbusExceptionHandler>
					}



					break;
 800094a:	e258      	b.n	8000dfe <ModbusRTURoutine+0x64e>
 800094c:	e257      	b.n	8000dfe <ModbusRTURoutine+0x64e>

				case READ_AOHR:
					// Read JCU parameters which Master has set (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	b29b      	uxth	r3, r3
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b29a      	uxth	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	78db      	ldrb	r3, [r3, #3]
 800095c:	b29b      	uxth	r3, r3
 800095e:	4413      	add	r3, r2
 8000960:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000962:	8c3a      	ldrh	r2, [r7, #32]
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <ModbusRTURoutine+0x2dc>)
 8000966:	4413      	add	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800096c:	4413      	add	r3, r2
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c

					// Defining how many Holding registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	b29b      	uxth	r3, r3
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b29a      	uxth	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	795b      	ldrb	r3, [r3, #5]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4413      	add	r3, r2
 8000982:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000984:	8bfb      	ldrh	r3, [r7, #30]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 800098c:	8c3b      	ldrh	r3, [r7, #32]
 800098e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000992:	4293      	cmp	r3, r2
 8000994:	d96f      	bls.n	8000a76 <ModbusRTURoutine+0x2c6>
 8000996:	8c3b      	ldrh	r3, [r7, #32]
 8000998:	f649 4256 	movw	r2, #40022	; 0x9c56
 800099c:	4293      	cmp	r3, r2
 800099e:	d86a      	bhi.n	8000a76 <ModbusRTURoutine+0x2c6>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofRead) <= TOTAL_AOHR))
 80009a0:	8c3b      	ldrh	r3, [r7, #32]
 80009a2:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 80009a6:	3b41      	subs	r3, #65	; 0x41
 80009a8:	8bfa      	ldrh	r2, [r7, #30]
 80009aa:	4413      	add	r3, r2
 80009ac:	2b16      	cmp	r3, #22
 80009ae:	dc62      	bgt.n	8000a76 <ModbusRTURoutine+0x2c6>
					{
						TxData[0] = SLAVE_ID;
 80009b0:	2201      	movs	r2, #1
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009b4:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009bc:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 80009be:	4a34      	ldr	r2, [pc, #208]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009c0:	7efb      	ldrb	r3, [r7, #27]
 80009c2:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<ByteCount; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80009ca:	e01f      	b.n	8000a0c <ModbusRTURoutine+0x25c>
						{
							uint16_t tempvalue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	81bb      	strh	r3, [r7, #12]
							tempvalue = *ptemp16bitJCUConfig;
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 4] = tempvalue;
 80009d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009da:	3302      	adds	r3, #2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	89ba      	ldrh	r2, [r7, #12]
 80009e0:	b2d1      	uxtb	r1, r2
 80009e2:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009e4:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 80009e6:	89bb      	ldrh	r3, [r7, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 3] = tempvalue;
 80009ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	3303      	adds	r3, #3
 80009f4:	89ba      	ldrh	r2, [r7, #12]
 80009f6:	b2d1      	uxtb	r1, r2
 80009f8:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009fa:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUConfig++;
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	3302      	adds	r3, #2
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i++)
 8000a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a06:	3301      	adds	r3, #1
 8000a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a10:	7efb      	ldrb	r3, [r7, #27]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d3da      	bcc.n	80009cc <ModbusRTURoutine+0x21c>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000a16:	7efb      	ldrb	r3, [r7, #27]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	491c      	ldr	r1, [pc, #112]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a1e:	481a      	ldr	r0, [pc, #104]	; (8000a88 <ModbusRTURoutine+0x2d8>)
 8000a20:	f003 f80e 	bl	8003a40 <HAL_CRC_Calculate>
 8000a24:	4603      	mov	r3, r0
 8000a26:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000a28:	7efb      	ldrb	r3, [r7, #27]
 8000a2a:	3303      	adds	r3, #3
 8000a2c:	8b3a      	ldrh	r2, [r7, #24]
 8000a2e:	b2d1      	uxtb	r1, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a32:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000a34:	8b3b      	ldrh	r3, [r7, #24]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000a3a:	7efb      	ldrb	r3, [r7, #27]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	8b3a      	ldrh	r2, [r7, #24]
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a44:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000a46:	bf00      	nop
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <ModbusRTURoutine+0x2e4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a56:	d0f7      	beq.n	8000a48 <ModbusRTURoutine+0x298>
						{
							// wait until the line is available
						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <ModbusRTURoutine+0x2e8>)
 8000a5e:	f003 fd69 	bl	8004534 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000a62:	7efb      	ldrb	r3, [r7, #27]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	3305      	adds	r3, #5
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4908      	ldr	r1, [pc, #32]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <ModbusRTURoutine+0x2e4>)
 8000a70:	f006 ff30 	bl	80078d4 <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 8000a74:	e1c3      	b.n	8000dfe <ModbusRTURoutine+0x64e>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 f9d0 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000a7c:	e1bf      	b.n	8000dfe <ModbusRTURoutine+0x64e>
 8000a7e:	bf00      	nop
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000010 	.word	0x20000010
 8000a88:	200001b0 	.word	0x200001b0
 8000a8c:	7fff63bf 	.word	0x7fff63bf
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	20000310 	.word	0x20000310
 8000a98:	48000400 	.word	0x48000400

				case READ_AIR:
					// Read JCU parameters (errors/Angle/speed/torque/temperature)

					// Defining the first address of input registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	78db      	ldrb	r3, [r3, #3]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					ptemp16bitJCUState += RequestedAddress - ADDRESS_JCU_ERRORS;
 8000ab0:	8c3a      	ldrh	r2, [r7, #32]
 8000ab2:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <ModbusRTURoutine+0x56c>)
 8000ab4:	4413      	add	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aba:	4413      	add	r3, r2
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30

					// Defining how many input registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	795b      	ldrb	r3, [r3, #5]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000ad2:	8bfb      	ldrh	r3, [r7, #30]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the input Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_JCU_ERRORS) && (RequestedAddress <= ADDRESS_JCU_TEMP))
 8000ada:	8c3b      	ldrh	r3, [r7, #32]
 8000adc:	f247 5230 	movw	r2, #30000	; 0x7530
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d970      	bls.n	8000bc6 <ModbusRTURoutine+0x416>
 8000ae4:	8c3b      	ldrh	r3, [r7, #32]
 8000ae6:	f247 5235 	movw	r2, #30005	; 0x7535
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86b      	bhi.n	8000bc6 <ModbusRTURoutine+0x416>
							&& (((RequestedAddress - ADDRESS_JCU_ERRORS) + AmountofRead) <= TOTAL_AIR))
 8000aee:	8c3b      	ldrh	r3, [r7, #32]
 8000af0:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000af4:	3b31      	subs	r3, #49	; 0x31
 8000af6:	8bfa      	ldrh	r2, [r7, #30]
 8000af8:	4413      	add	r3, r2
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	dc63      	bgt.n	8000bc6 <ModbusRTURoutine+0x416>
					{
						TxData[0] = SLAVE_ID;
 8000afe:	2201      	movs	r2, #1
 8000b00:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b02:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000b04:	4a86      	ldr	r2, [pc, #536]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b0a:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000b0c:	4a84      	ldr	r2, [pc, #528]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b0e:	7efb      	ldrb	r3, [r7, #27]
 8000b10:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<AmountofRead; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000b18:	e01f      	b.n	8000b5a <ModbusRTURoutine+0x3aa>
						{
							uint16_t tempvalue = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81fb      	strh	r3, [r7, #14]
							tempvalue = *ptemp16bitJCUState;
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 4] = tempvalue;
 8000b24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b28:	3302      	adds	r3, #2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	b2d1      	uxtb	r1, r2
 8000b30:	4a7b      	ldr	r2, [pc, #492]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b32:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000b34:	89fb      	ldrh	r3, [r7, #14]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 3] = tempvalue;
 8000b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	3303      	adds	r3, #3
 8000b42:	89fa      	ldrh	r2, [r7, #14]
 8000b44:	b2d1      	uxtb	r1, r2
 8000b46:	4a76      	ldr	r2, [pc, #472]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b48:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUState++;
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
						for (uint8_t i=0; i<AmountofRead; i++)
 8000b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b54:	3301      	adds	r3, #1
 8000b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	8bfa      	ldrh	r2, [r7, #30]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d8d9      	bhi.n	8000b1a <ModbusRTURoutine+0x36a>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000b66:	7efb      	ldrb	r3, [r7, #27]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	496c      	ldr	r1, [pc, #432]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b6e:	486d      	ldr	r0, [pc, #436]	; (8000d24 <ModbusRTURoutine+0x574>)
 8000b70:	f002 ff66 	bl	8003a40 <HAL_CRC_Calculate>
 8000b74:	4603      	mov	r3, r0
 8000b76:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000b78:	7efb      	ldrb	r3, [r7, #27]
 8000b7a:	3303      	adds	r3, #3
 8000b7c:	8b3a      	ldrh	r2, [r7, #24]
 8000b7e:	b2d1      	uxtb	r1, r2
 8000b80:	4a67      	ldr	r2, [pc, #412]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b82:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000b84:	8b3b      	ldrh	r3, [r7, #24]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000b8a:	7efb      	ldrb	r3, [r7, #27]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	8b3a      	ldrh	r2, [r7, #24]
 8000b90:	b2d1      	uxtb	r1, r2
 8000b92:	4a63      	ldr	r2, [pc, #396]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b94:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000b96:	bf00      	nop
 8000b98:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba6:	d0f7      	beq.n	8000b98 <ModbusRTURoutine+0x3e8>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2108      	movs	r1, #8
 8000bac:	485f      	ldr	r0, [pc, #380]	; (8000d2c <ModbusRTURoutine+0x57c>)
 8000bae:	f003 fcc1 	bl	8004534 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000bb2:	7efb      	ldrb	r3, [r7, #27]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3305      	adds	r3, #5
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4958      	ldr	r1, [pc, #352]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000bbe:	485a      	ldr	r0, [pc, #360]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000bc0:	f006 fe88 	bl	80078d4 <HAL_UART_Transmit_DMA>
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}

					break;
 8000bc4:	e11b      	b.n	8000dfe <ModbusRTURoutine+0x64e>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 f928 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000bcc:	e117      	b.n	8000dfe <ModbusRTURoutine+0x64e>
					break;

				case WRITE_SINGLE_AOHR:
					// Write Single parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					RequestedAddress = (temp[2] << 8) + temp[3];
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	789b      	ldrb	r3, [r3, #2]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000be2:	8c3a      	ldrh	r2, [r7, #32]
 8000be4:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bec:	4413      	add	r3, r2
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c

					/*
					 * Check if there is no such error:
					 * 1. the address of the holding Register is correct
					 */
					if ((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000bf0:	8c3b      	ldrh	r3, [r7, #32]
 8000bf2:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d92d      	bls.n	8000c56 <ModbusRTURoutine+0x4a6>
 8000bfa:	8c3b      	ldrh	r3, [r7, #32]
 8000bfc:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d828      	bhi.n	8000c56 <ModbusRTURoutine+0x4a6>
					{
						*ptemp16bitJCUConfig = (temp[4] << 8) + temp[5];
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	791b      	ldrb	r3, [r3, #4]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	795b      	ldrb	r3, [r3, #5]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	801a      	strh	r2, [r3, #0]

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4842      	ldr	r0, [pc, #264]	; (8000d2c <ModbusRTURoutine+0x57c>)
 8000c22:	f003 fc87 	bl	8004534 <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000c26:	bf00      	nop
 8000c28:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c36:	d0f7      	beq.n	8000c28 <ModbusRTURoutine+0x478>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, RxData, Length);
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	493d      	ldr	r1, [pc, #244]	; (8000d34 <ModbusRTURoutine+0x584>)
 8000c40:	4839      	ldr	r0, [pc, #228]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000c42:	f006 fe47 	bl	80078d4 <HAL_UART_Transmit_DMA>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000c46:	8c3b      	ldrh	r3, [r7, #32]
 8000c48:	f649 4244 	movw	r2, #40004	; 0x9c44
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <ModbusRTURoutine+0x4ae>
						{
							CheckStatusRegister();
 8000c50:	f000 f98a 	bl	8000f68 <CheckStatusRegister>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000c54:	e003      	b.n	8000c5e <ModbusRTURoutine+0x4ae>
					}
					// if there are errors in request:
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 f8e0 	bl	8000e1c <ModbusExceptionHandler>
					}
					break;
 8000c5c:	e0cf      	b.n	8000dfe <ModbusRTURoutine+0x64e>
 8000c5e:	e0ce      	b.n	8000dfe <ModbusRTURoutine+0x64e>

				case WRITE_MULTIPLE_AOHR:
					// Write multiple parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to write (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	78db      	ldrb	r3, [r3, #3]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000c74:	8c3a      	ldrh	r2, [r7, #32]
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c7e:	4413      	add	r3, r2
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
					// Defining how many Holding registers master wants to read
					AmountofWrite = (temp[4] << 8) + temp[5];
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	83bb      	strh	r3, [r7, #28]
					ByteCount = temp[6];
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	76fb      	strb	r3, [r7, #27]
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to write does not exceed amount possible infromation
					 * 3. Check if master quantity of Bytes in message is equal (quantity of register) * 2
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000c9c:	8c3b      	ldrh	r3, [r7, #32]
 8000c9e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f240 8087 	bls.w	8000db6 <ModbusRTURoutine+0x606>
 8000ca8:	8c3b      	ldrh	r3, [r7, #32]
 8000caa:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f200 8081 	bhi.w	8000db6 <ModbusRTURoutine+0x606>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofWrite) <= TOTAL_AOHR)
 8000cb4:	8c3b      	ldrh	r3, [r7, #32]
 8000cb6:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000cba:	3b41      	subs	r3, #65	; 0x41
 8000cbc:	8bba      	ldrh	r2, [r7, #28]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2b16      	cmp	r3, #22
 8000cc2:	dc78      	bgt.n	8000db6 <ModbusRTURoutine+0x606>
							&& (ByteCount == AmountofWrite*2))
 8000cc4:	7efa      	ldrb	r2, [r7, #27]
 8000cc6:	8bbb      	ldrh	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d173      	bne.n	8000db6 <ModbusRTURoutine+0x606>
					{
						//uint8_t *ptemp8bit = (uint8_t*) ptemp16bitJCUState;			// for more convenient shifting of bytes during writing, we are creating 8 bit pointer

						for (uint8_t i=0; i<ByteCount; i+=2)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000cd4:	e019      	b.n	8000d0a <ModbusRTURoutine+0x55a>
						{
							*ptemp16bitJCUConfig = (temp[i+7] << 8) + temp[i+8];
 8000cd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cda:	3307      	adds	r3, #7
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cea:	3308      	adds	r3, #8
 8000cec:	6939      	ldr	r1, [r7, #16]
 8000cee:	5ccb      	ldrb	r3, [r1, r3]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf8:	801a      	strh	r2, [r3, #0]
							ptemp16bitJCUConfig++;
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i+=2)
 8000d00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d04:	3302      	adds	r3, #2
 8000d06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000d0a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000d0e:	7efb      	ldrb	r3, [r7, #27]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3e0      	bcc.n	8000cd6 <ModbusRTURoutine+0x526>
						}

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						for (uint8_t i = 0; i < 6; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d1a:	e01a      	b.n	8000d52 <ModbusRTURoutine+0x5a2>
 8000d1c:	7fff8acf 	.word	0x7fff8acf
 8000d20:	200000b0 	.word	0x200000b0
 8000d24:	200001b0 	.word	0x200001b0
 8000d28:	20000310 	.word	0x20000310
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	7fff63bf 	.word	0x7fff63bf
 8000d34:	2000004c 	.word	0x2000004c
						{
							TxData[i] = temp[i];
 8000d38:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000d3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	5c89      	ldrb	r1, [r1, r2]
 8000d44:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d46:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < 6; i++)
 8000d48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d52:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d9ee      	bls.n	8000d38 <ModbusRTURoutine+0x588>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+2));
 8000d5a:	7efb      	ldrb	r3, [r7, #27]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4929      	ldr	r1, [pc, #164]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d62:	482a      	ldr	r0, [pc, #168]	; (8000e0c <ModbusRTURoutine+0x65c>)
 8000d64:	f002 fe6c 	bl	8003a40 <HAL_CRC_Calculate>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+2] = CRCforResponse;
 8000d6c:	7efb      	ldrb	r3, [r7, #27]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	8b3a      	ldrh	r2, [r7, #24]
 8000d72:	b2d1      	uxtb	r1, r2
 8000d74:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d76:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000d78:	8b3b      	ldrh	r3, [r7, #24]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000d7e:	7efb      	ldrb	r3, [r7, #27]
 8000d80:	3303      	adds	r3, #3
 8000d82:	8b3a      	ldrh	r2, [r7, #24]
 8000d84:	b2d1      	uxtb	r1, r2
 8000d86:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d88:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <ModbusRTURoutine+0x660>)
 8000d90:	f003 fbd0 	bl	8004534 <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000d94:	bf00      	nop
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d0f7      	beq.n	8000d96 <ModbusRTURoutine+0x5e6>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, TxData, WRITE_MULTIPLE_AOHR_BYTES_RESPONSE);
 8000da6:	2208      	movs	r2, #8
 8000da8:	4917      	ldr	r1, [pc, #92]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000daa:	481a      	ldr	r0, [pc, #104]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000dac:	f006 fd92 	bl	80078d4 <HAL_UART_Transmit_DMA>
						CheckStatusRegister();												// could be improved if we can check, was this register updated by master or not
 8000db0:	f000 f8da 	bl	8000f68 <CheckStatusRegister>
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000db4:	e023      	b.n	8000dfe <ModbusRTURoutine+0x64e>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f000 f830 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000dbc:	e01f      	b.n	8000dfe <ModbusRTURoutine+0x64e>

				default:
					// Modbus Exception 0x01 - Illegal Function
					ModbusExceptionHandler(MODBUS_ILLEGAL_FUNCTION);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f82c 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000dc4:	e01b      	b.n	8000dfe <ModbusRTURoutine+0x64e>
			}

		}
		else if(temp[0] == SLAVE_ID_BROADCAST)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d016      	beq.n	8000dfe <ModbusRTURoutine+0x64e>
		}
		else
		{
			// do nothing
			// wait new packet
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <ModbusRTURoutine+0x660>)
 8000dd6:	f003 fbad 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000dda:	2264      	movs	r2, #100	; 0x64
 8000ddc:	490e      	ldr	r1, [pc, #56]	; (8000e18 <ModbusRTURoutine+0x668>)
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000de0:	f006 fdf6 	bl	80079d0 <HAL_UART_Receive_DMA>
 8000de4:	e00b      	b.n	8000dfe <ModbusRTURoutine+0x64e>
	}
	else
	{
		// do nothing
		// wait new packet
		HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <ModbusRTURoutine+0x660>)
 8000dec:	f003 fba2 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000df0:	2264      	movs	r2, #100	; 0x64
 8000df2:	4909      	ldr	r1, [pc, #36]	; (8000e18 <ModbusRTURoutine+0x668>)
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000df6:	f006 fdeb 	bl	80079d0 <HAL_UART_Receive_DMA>
 8000dfa:	e000      	b.n	8000dfe <ModbusRTURoutine+0x64e>
					break;
 8000dfc:	bf00      	nop
 8000dfe:	46ad      	mov	sp, r5
	}



}
 8000e00:	bf00      	nop
 8000e02:	3738      	adds	r7, #56	; 0x38
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdb0      	pop	{r4, r5, r7, pc}
 8000e08:	200000b0 	.word	0x200000b0
 8000e0c:	200001b0 	.word	0x200001b0
 8000e10:	48000400 	.word	0x48000400
 8000e14:	20000310 	.word	0x20000310
 8000e18:	2000004c 	.word	0x2000004c

08000e1c <ModbusExceptionHandler>:

void ModbusExceptionHandler(uint8_t ExceptionCode)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	}
	else if (ExceptionCode == MODBUS_ILLEGAL_DATA_ADDRESS)
	{

	}
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <UpdatePWM>:
uint16_t counter = 0;
float PosError;
float prevPosError;

void UpdatePWM(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	483f      	ldr	r0, [pc, #252]	; (8000f3c <UpdatePWM+0x108>)
 8000e40:	f003 fb90 	bl	8004564 <HAL_GPIO_TogglePin>

	// 1. Measuring error position
	PosError = JCUConfig.TargetAngel - JCUState.Angle;
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <UpdatePWM+0x10c>)
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <UpdatePWM+0x110>)
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <UpdatePWM+0x114>)
 8000e5a:	edc3 7a00 	vstr	s15, [r3]

	// 2. Proportional
	float Proportional = JCUConfig.KpPossitionLoop * PosError;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <UpdatePWM+0x10c>)
 8000e60:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <UpdatePWM+0x114>)
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	edc7 7a03 	vstr	s15, [r7, #12]

	float Integral = 0;
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]

	float Derivative = 0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]

	float PID = Proportional + Integral + Derivative;
 8000e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	edc7 7a00 	vstr	s15, [r7]

	if (PID >= 0)
 8000e96:	edd7 7a00 	vldr	s15, [r7]
 8000e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	db1d      	blt.n	8000ee0 <UpdatePWM+0xac>
	{
		PID = 500 + PID;
 8000ea4:	edd7 7a00 	vldr	s15, [r7]
 8000ea8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f4c <UpdatePWM+0x118>
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	edc7 7a00 	vstr	s15, [r7]
		if (PID < MAX_DUTY_CYCLE)
 8000eb4:	edd7 7a00 	vldr	s15, [r7]
 8000eb8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000f50 <UpdatePWM+0x11c>
 8000ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d509      	bpl.n	8000eda <UpdatePWM+0xa6>
			PWMValue = PID;
 8000ec6:	edd7 7a00 	vldr	s15, [r7]
 8000eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ece:	ee17 3a90 	vmov	r3, s15
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <UpdatePWM+0x120>)
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e01f      	b.n	8000f1a <UpdatePWM+0xe6>
		else
			PID = MAX_DUTY_CYCLE;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <UpdatePWM+0x124>)
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	e01c      	b.n	8000f1a <UpdatePWM+0xe6>
	}
	else
	{
		PID = 500 + PID;
 8000ee0:	edd7 7a00 	vldr	s15, [r7]
 8000ee4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f4c <UpdatePWM+0x118>
 8000ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eec:	edc7 7a00 	vstr	s15, [r7]
		if (PID > MIN_DUTY_CYCLE)
 8000ef0:	edd7 7a00 	vldr	s15, [r7]
 8000ef4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f5c <UpdatePWM+0x128>
 8000ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f00:	dd09      	ble.n	8000f16 <UpdatePWM+0xe2>
			PWMValue = PID;
 8000f02:	edd7 7a00 	vldr	s15, [r7]
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	ee17 3a90 	vmov	r3, s15
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <UpdatePWM+0x120>)
 8000f12:	801a      	strh	r2, [r3, #0]
 8000f14:	e001      	b.n	8000f1a <UpdatePWM+0xe6>
		else
			PID = MIN_DUTY_CYCLE;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <UpdatePWM+0x12c>)
 8000f18:	603b      	str	r3, [r7, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000 - PWMValue);
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <UpdatePWM+0x120>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <UpdatePWM+0x130>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMValue);
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <UpdatePWM+0x120>)
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <UpdatePWM+0x130>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	20000128 	.word	0x20000128
 8000f44:	2000011c 	.word	0x2000011c
 8000f48:	20000158 	.word	0x20000158
 8000f4c:	43fa0000 	.word	0x43fa0000
 8000f50:	44610000 	.word	0x44610000
 8000f54:	20000014 	.word	0x20000014
 8000f58:	44610000 	.word	0x44610000
 8000f5c:	42c80000 	.word	0x42c80000
 8000f60:	42c80000 	.word	0x42c80000
 8000f64:	200003dc 	.word	0x200003dc

08000f68 <CheckStatusRegister>:

void CheckStatusRegister(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	// Check bits in status register ONLY which could be written by Master.
	if 	(CHECK_BIT(JCUConfig.StatusRegister, ENABLE_MOTOR_Pos))
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <CheckStatusRegister+0x94>)
 8000f6e:	88db      	ldrh	r3, [r3, #6]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d009      	beq.n	8000f8c <CheckStatusRegister+0x24>
	{
		if (MotorState == MOTOR_DISABLED)			// enable motor if it is not enabled
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <CheckStatusRegister+0x98>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10e      	bne.n	8000f9e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_ENABLED;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <CheckStatusRegister+0x98>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
			EnableMotor();
 8000f86:	f000 f8a5 	bl	80010d4 <EnableMotor>
 8000f8a:	e008      	b.n	8000f9e <CheckStatusRegister+0x36>
		}
	}
	else
	{
		if (MotorState != MOTOR_DISABLED)
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <CheckStatusRegister+0x98>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_DISABLED;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <CheckStatusRegister+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
			DisableMotor();
 8000f9a:	f000 f8c3 	bl	8001124 <DisableMotor>
		}
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, SET_BRAKE_Pos))
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fa0:	88db      	ldrh	r3, [r3, #6]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
	{
		// should  i reset brake??
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, GO_TO_TARGET_POSITION_Pos))
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <CheckStatusRegister+0x94>)
 8000faa:	88db      	ldrh	r3, [r3, #6]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <CheckStatusRegister+0x5a>
	{
		if (MotorState == MOTOR_ENABLED)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <CheckStatusRegister+0x98>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <CheckStatusRegister+0x5a>
		{
			MotorState = MOTOR_RUN;
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <CheckStatusRegister+0x98>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
	else
	{
		// decide what to do here
	}

	if (CHECK_BIT(JCUConfig.StatusRegister, STOP_MOTOR_Pos))
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fc4:	88db      	ldrh	r3, [r3, #6]
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d013      	beq.n	8000ff6 <CheckStatusRegister+0x8e>
	{
		JCUConfig.StatusRegister &=~ GO_TO_TARGET_POSITION;				// not go to target position anymore
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fd0:	88db      	ldrh	r3, [r3, #6]
 8000fd2:	f023 0308 	bic.w	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fda:	80da      	strh	r2, [r3, #6]
		// 1. Terminate PID
		MotorState = MOTOR_ENABLED;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <CheckStatusRegister+0x98>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
		// 2. set PWM 50%
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <CheckStatusRegister+0x9c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <CheckStatusRegister+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000128 	.word	0x20000128
 8001000:	20000115 	.word	0x20000115
 8001004:	200003dc 	.word	0x200003dc

08001008 <RunMotor>:

void RunMotor(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	/*
	 * We calling this function with 40 kHz
	 * due to dummy cycles, we read encoder data and analog data with 10 kHz each
	 */
	if (FeedbackState == READ_ENCODER)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <RunMotor+0x60>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d105      	bne.n	8001020 <RunMotor+0x18>
	{
		EncoderRoutine();
 8001014:	f7ff faea 	bl	80005ec <EncoderRoutine>
		FeedbackState = WAIT_ENCODER;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <RunMotor+0x60>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e01b      	b.n	8001058 <RunMotor+0x50>
	}
	else if(FeedbackState == WAIT_ENCODER)
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <RunMotor+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d103      	bne.n	8001030 <RunMotor+0x28>
	{
		//dummy step
		FeedbackState = READ_ANALOG;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <RunMotor+0x60>)
 800102a:	2202      	movs	r2, #2
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e013      	b.n	8001058 <RunMotor+0x50>
	}
	else if (FeedbackState == READ_ANALOG)
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <RunMotor+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d108      	bne.n	800104a <RunMotor+0x42>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultDMA, 3);
 8001038:	2203      	movs	r2, #3
 800103a:	490c      	ldr	r1, [pc, #48]	; (800106c <RunMotor+0x64>)
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <RunMotor+0x68>)
 800103e:	f001 fc2b 	bl	8002898 <HAL_ADC_Start_DMA>
		FeedbackState = WAIT_ANALOG;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <RunMotor+0x60>)
 8001044:	2203      	movs	r2, #3
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e006      	b.n	8001058 <RunMotor+0x50>
	}
	else if(FeedbackState == WAIT_ANALOG)
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <RunMotor+0x60>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d102      	bne.n	8001058 <RunMotor+0x50>
	{
		//dummy step
		FeedbackState = READ_ENCODER;
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <RunMotor+0x60>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
	}


	//JCUState.Speed = SpeedCalculation();

	if (MotorState == MOTOR_RUN)
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <RunMotor+0x6c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d101      	bne.n	8001064 <RunMotor+0x5c>
	{
		UpdatePWM();
 8001060:	f7ff fee8 	bl	8000e34 <UpdatePWM>
	}

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000118 	.word	0x20000118
 800106c:	2000015c 	.word	0x2000015c
 8001070:	2000021c 	.word	0x2000021c
 8001074:	20000115 	.word	0x20000115

08001078 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	RunMotor();
 8001080:	f7ff ffc2 	bl	8001008 <RunMotor>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	JCUState.MotorTemp = adcResultDMA[0] >> 8;			// potentiometer
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_ADC_ConvCpltCallback+0x40>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29b      	uxth	r3, r3
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80010a2:	721a      	strb	r2, [r3, #8]
	JCUState.HbridgeTemp = adcResultDMA[1] >> 8;		// Driver temp
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_ADC_ConvCpltCallback+0x40>)
 80010a6:	885b      	ldrh	r3, [r3, #2]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80010b2:	725a      	strb	r2, [r3, #9]
	JCUState.Torque = adcResultDMA[2];					// current feedback
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_ADC_ConvCpltCallback+0x40>)
 80010b6:	889b      	ldrh	r3, [r3, #4]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80010be:	80da      	strh	r2, [r3, #6]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	2000015c 	.word	0x2000015c
 80010d0:	2000011c 	.word	0x2000011c

080010d4 <EnableMotor>:

	return AverageSpeed;
}

void EnableMotor(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim1);
 80010d8:	4810      	ldr	r0, [pc, #64]	; (800111c <EnableMotor+0x48>)
 80010da:	f005 f8f7 	bl	80062cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	480e      	ldr	r0, [pc, #56]	; (800111c <EnableMotor+0x48>)
 80010e2:	f005 f9cd 	bl	8006480 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80010e6:	2100      	movs	r1, #0
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <EnableMotor+0x48>)
 80010ea:	f006 f91b 	bl	8007324 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80010ee:	2104      	movs	r1, #4
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <EnableMotor+0x48>)
 80010f2:	f005 f9c5 	bl	8006480 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80010f6:	2104      	movs	r1, #4
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <EnableMotor+0x48>)
 80010fa:	f006 f913 	bl	8007324 <HAL_TIMEx_PWMN_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <EnableMotor+0x48>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <EnableMotor+0x48>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
	MotorState = MOTOR_ENABLED;
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <EnableMotor+0x4c>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200003dc 	.word	0x200003dc
 8001120:	20000115 	.word	0x20000115

08001124 <DisableMotor>:

void DisableMotor(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <DisableMotor+0x34>)
 800112a:	f005 f923 	bl	8006374 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800112e:	2100      	movs	r1, #0
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <DisableMotor+0x34>)
 8001132:	f005 fac9 	bl	80066c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001136:	2100      	movs	r1, #0
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <DisableMotor+0x34>)
 800113a:	f006 f9c3 	bl	80074c4 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 800113e:	2104      	movs	r1, #4
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <DisableMotor+0x34>)
 8001142:	f005 fac1 	bl	80066c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001146:	2104      	movs	r1, #4
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <DisableMotor+0x34>)
 800114a:	f006 f9bb 	bl	80074c4 <HAL_TIMEx_PWMN_Stop_IT>
	MotorState = MOTOR_DISABLED;
 800114e:	4b03      	ldr	r3, [pc, #12]	; (800115c <DisableMotor+0x38>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200003dc 	.word	0x200003dc
 800115c:	20000115 	.word	0x20000115

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f001 f801 	bl	800216a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f842 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 fae8 	bl	8001740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001170:	f000 fa62 	bl	8001638 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001174:	f000 faa6 	bl	80016c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001178:	f000 f88c 	bl	8001294 <MX_ADC1_Init>
  MX_TIM1_Init();
 800117c:	f000 f97a 	bl	8001474 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001180:	f000 f93a 	bl	80013f8 <MX_SPI1_Init>
  MX_CRC_Init();
 8001184:	f000 f90a 	bl	800139c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001188:	f000 fa10 	bl	80015ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // disable interrupt of DMA - half of reveive
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <main+0x78>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <main+0x78>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0204 	bic.w	r2, r2, #4
 800119a:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <main+0x7c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <main+0x7c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0204 	bic.w	r2, r2, #4
 80011aa:	601a      	str	r2, [r3, #0]
  hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <main+0x78>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2264      	movs	r2, #100	; 0x64
 80011b2:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 80011b4:	2264      	movs	r2, #100	; 0x64
 80011b6:	490a      	ldr	r1, [pc, #40]	; (80011e0 <main+0x80>)
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <main+0x84>)
 80011ba:	f006 fc09 	bl	80079d0 <HAL_UART_Receive_DMA>


  /*
   * Test part
   */
  JCUConfig.KpPossitionLoop = 0.3;
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <main+0x88>)
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <main+0x8c>)
 80011c2:	615a      	str	r2, [r3, #20]
  JCUConfig.TargetAngel = 11000;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <main+0x88>)
 80011c6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80011ca:	809a      	strh	r2, [r3, #4]
  JCUConfig.StatusRegister = 0x09;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <main+0x88>)
 80011ce:	2209      	movs	r2, #9
 80011d0:	80da      	strh	r2, [r3, #6]
  CheckStatusRegister();
 80011d2:	f7ff fec9 	bl	8000f68 <CheckStatusRegister>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <main+0x76>
 80011d8:	20000280 	.word	0x20000280
 80011dc:	20000394 	.word	0x20000394
 80011e0:	2000004c 	.word	0x2000004c
 80011e4:	20000310 	.word	0x20000310
 80011e8:	20000128 	.word	0x20000128
 80011ec:	3e99999a 	.word	0x3e99999a

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 fbb6 	bl	8008970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f003 f9cd 	bl	80045b4 <HAL_PWREx_ControlVoltageScaling>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001220:	f000 fb80 	bl	8001924 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122e:	2310      	movs	r3, #16
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2302      	movs	r3, #2
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001236:	2302      	movs	r3, #2
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800123e:	230a      	movs	r3, #10
 8001240:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001242:	2307      	movs	r3, #7
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001246:	2302      	movs	r3, #2
 8001248:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fa04 	bl	8004660 <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800125e:	f000 fb61 	bl	8001924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2303      	movs	r3, #3
 8001268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	2104      	movs	r1, #4
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fe10 	bl	8004ea0 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001286:	f000 fb4d 	bl	8001924 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3758      	adds	r7, #88	; 0x58
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012ac:	4a37      	ldr	r2, [pc, #220]	; (800138c <MX_ADC1_Init+0xf8>)
 80012ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012ca:	2208      	movs	r2, #8
 80012cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012dc:	2203      	movs	r2, #3
 80012de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_ADC1_Init+0xf4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_ADC1_Init+0xf4>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800130a:	481f      	ldr	r0, [pc, #124]	; (8001388 <MX_ADC1_Init+0xf4>)
 800130c:	f001 f97c 	bl	8002608 <HAL_ADC_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001316:	f000 fb05 	bl	8001924 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_ADC1_Init+0xfc>)
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131e:	2306      	movs	r3, #6
 8001320:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001322:	2305      	movs	r3, #5
 8001324:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001326:	237f      	movs	r3, #127	; 0x7f
 8001328:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800132a:	2304      	movs	r3, #4
 800132c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_ADC1_Init+0xf4>)
 8001338:	f001 fd04 	bl	8002d44 <HAL_ADC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001342:	f000 faef 	bl	8001924 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_ADC1_Init+0x100>)
 8001348:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800134a:	230c      	movs	r3, #12
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_ADC1_Init+0xf4>)
 8001354:	f001 fcf6 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800135e:	f000 fae1 	bl	8001924 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_ADC1_Init+0x104>)
 8001364:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001366:	2312      	movs	r3, #18
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_ADC1_Init+0xf4>)
 8001370:	f001 fce8 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800137a:	f000 fad3 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000021c 	.word	0x2000021c
 800138c:	50040000 	.word	0x50040000
 8001390:	2e300800 	.word	0x2e300800
 8001394:	21800100 	.word	0x21800100
 8001398:	43210000 	.word	0x43210000

0800139c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	hcrc.Instance = CRC;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_CRC_Init+0x54>)
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <MX_CRC_Init+0x58>)
 80013a4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_CRC_Init+0x54>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_CRC_Init+0x54>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_CRC_Init+0x54>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_CRC_Init+0x54>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	619a      	str	r2, [r3, #24]
	hcrc.Init.GeneratingPolynomial = 0x8005;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_CRC_Init+0x54>)
 80013c0:	f248 0205 	movw	r2, #32773	; 0x8005
 80013c4:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <MX_CRC_Init+0x54>)
 80013c8:	2208      	movs	r2, #8
 80013ca:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0xFFFF;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_CRC_Init+0x54>)
 80013ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d2:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_CRC_Init+0x54>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_CRC_Init+0x54>)
 80013dc:	f002 facc 	bl	8003978 <HAL_CRC_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_CRC_Init+0x4e>
	{
	Error_Handler();
 80013e6:	f000 fa9d 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
	#endif
  /* USER CODE END CRC_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200001b0 	.word	0x200001b0
 80013f4:	40023000 	.word	0x40023000

080013f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_SPI1_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <MX_SPI1_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_SPI1_Init+0x74>)
 8001404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_SPI1_Init+0x74>)
 8001412:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001416:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_SPI1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_SPI1_Init+0x74>)
 8001420:	2201      	movs	r2, #1
 8001422:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_SPI1_Init+0x74>)
 8001426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_SPI1_Init+0x74>)
 800142e:	2218      	movs	r2, #24
 8001430:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_SPI1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_SPI1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_SPI1_Init+0x74>)
 8001446:	2207      	movs	r2, #7
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_SPI1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_SPI1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_SPI1_Init+0x74>)
 8001458:	f004 fa0e 	bl	8005878 <HAL_SPI_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001462:	f000 fa5f 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000428 	.word	0x20000428
 8001470:	40013000 	.word	0x40013000

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b096      	sub	sp, #88	; 0x58
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	222c      	movs	r2, #44	; 0x2c
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 fa65 	bl	8008970 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014a8:	4a3f      	ldr	r2, [pc, #252]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014b4:	2220      	movs	r2, #32
 80014b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d2:	4834      	ldr	r0, [pc, #208]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014d4:	f004 ff7d 	bl	80063d2 <HAL_TIM_PWM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014de:	f000 fa21 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f2:	4619      	mov	r1, r3
 80014f4:	482b      	ldr	r0, [pc, #172]	; (80015a4 <MX_TIM1_Init+0x130>)
 80014f6:	f006 f87d 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001500:	f000 fa10 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	; 0x60
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <MX_TIM1_Init+0x130>)
 800152a:	f005 fabb 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001534:	f000 f9f6 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153c:	2204      	movs	r2, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_TIM1_Init+0x130>)
 8001542:	f005 faaf 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800154c:	f000 f9ea 	bl	8001924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001568:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM1_Init+0x130>)
 8001586:	f006 f89b 	bl	80076c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001590:	f000 f9c8 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM1_Init+0x130>)
 8001596:	f000 fb37 	bl	8001c08 <HAL_TIM_MspPostInit>

}
 800159a:	bf00      	nop
 800159c:	3758      	adds	r7, #88	; 0x58
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200003dc 	.word	0x200003dc
 80015a8:	40012c00 	.word	0x40012c00

080015ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <MX_USART1_UART_Init+0x84>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3000000;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_USART1_UART_Init+0x88>)
 80015ba:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015d0:	220c      	movs	r2, #12
 80015d2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ee:	480f      	ldr	r0, [pc, #60]	; (800162c <MX_USART1_UART_Init+0x80>)
 80015f0:	f006 f921 	bl	8007836 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 f993 	bl	8001924 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart1.Instance->RTOR = MODBUS_TIMEOUT;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART1_UART_Init+0x80>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2214      	movs	r2, #20
 8001604:	615a      	str	r2, [r3, #20]
  huart1.Instance->CR1 |= USART_CR1_RTOIE;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART1_UART_Init+0x80>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_USART1_UART_Init+0x80>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001614:	601a      	str	r2, [r3, #0]
  huart1.Instance->CR2 |= USART_CR2_RTOEN;
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <MX_USART1_UART_Init+0x80>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <MX_USART1_UART_Init+0x80>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001624:	605a      	str	r2, [r3, #4]



  /* USER CODE END USART1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000310 	.word	0x20000310
 8001630:	40013800 	.word	0x40013800
 8001634:	002dc6c0 	.word	0x002dc6c0

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <MX_USART2_UART_Init+0x84>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <MX_USART2_UART_Init+0x88>)
 8001646:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 800165c:	220c      	movs	r2, #12
 800165e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800166c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 800167c:	f006 f8db 	bl	8007836 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 f94d 	bl	8001924 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart2.Instance->RTOR = MODBUS_TIMEOUT;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2214      	movs	r2, #20
 8001690:	615a      	str	r2, [r3, #20]
  huart2.Instance->CR1 |= USART_CR1_RTOIE;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016a0:	601a      	str	r2, [r3, #0]
  huart2.Instance->CR2 |= USART_CR2_RTOEN;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <MX_USART2_UART_Init+0x80>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016b0:	605a      	str	r2, [r3, #4]

  /* USER CODE END USART2_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000048c 	.word	0x2000048c
 80016bc:	40004400 	.word	0x40004400
 80016c0:	001e8480 	.word	0x001e8480

080016c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_DMA_Init+0x78>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <MX_DMA_Init+0x78>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6493      	str	r3, [r2, #72]	; 0x48
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_DMA_Init+0x78>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	200b      	movs	r0, #11
 80016e8:	f002 f90f 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016ec:	200b      	movs	r0, #11
 80016ee:	f002 f928 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	200e      	movs	r0, #14
 80016f8:	f002 f907 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016fc:	200e      	movs	r0, #14
 80016fe:	f002 f920 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	200f      	movs	r0, #15
 8001708:	f002 f8ff 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800170c:	200f      	movs	r0, #15
 800170e:	f002 f918 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2010      	movs	r0, #16
 8001718:	f002 f8f7 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800171c:	2010      	movs	r0, #16
 800171e:	f002 f910 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2011      	movs	r0, #17
 8001728:	f002 f8ef 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800172c:	2011      	movs	r0, #17
 800172e:	f002 f908 	bl	8003942 <HAL_NVIC_EnableIRQ>

}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <MX_GPIO_Init+0xe0>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <MX_GPIO_Init+0xe0>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <MX_GPIO_Init+0xe0>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <MX_GPIO_Init+0xe0>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <MX_GPIO_Init+0xe0>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <MX_GPIO_Init+0xe0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <MX_GPIO_Init+0xe0>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <MX_GPIO_Init+0xe0>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <MX_GPIO_Init+0xe0>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017a4:	481f      	ldr	r0, [pc, #124]	; (8001824 <MX_GPIO_Init+0xe4>)
 80017a6:	f002 fec5 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2110      	movs	r1, #16
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f002 febf 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_FC_Pin|LED_WHITE_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2118      	movs	r1, #24
 80017ba:	481b      	ldr	r0, [pc, #108]	; (8001828 <MX_GPIO_Init+0xe8>)
 80017bc:	f002 feba 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 80017c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <MX_GPIO_Init+0xe4>)
 80017da:	f002 fd41 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80017de:	2310      	movs	r3, #16
 80017e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f002 fd32 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_FC_Pin LED_WHITE_Pin */
  GPIO_InitStruct.Pin = RS485_FC_Pin|LED_WHITE_Pin;
 80017fc:	2318      	movs	r3, #24
 80017fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_GPIO_Init+0xe8>)
 8001814:	f002 fd24 	bl	8004260 <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	48000800 	.word	0x48000800
 8001828:	48000400 	.word	0x48000400

0800182c <EndofBlock>:




void EndofBlock(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	// Check if it is timeout, and no new byte is coming
	if (huart1.Instance->ISR & USART_ISR_RTOF)
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <EndofBlock+0x6c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183c:	2b00      	cmp	r3, #0
 800183e:	d026      	beq.n	800188e <EndofBlock+0x62>
	{
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		uint8_t Length = BUFFSIZE - hdma_usart1_rx.Instance->CNDTR;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <EndofBlock+0x70>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800184c:	71fb      	strb	r3, [r7, #7]
		//__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_RTOF);
		SET_BIT(huart1.Instance->ICR, USART_ICR_RTOCF);
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <EndofBlock+0x6c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <EndofBlock+0x6c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185c:	621a      	str	r2, [r3, #32]
		//HAL_UART_Abort(&huart1);

		// Check if we received something, but not some glitch on the line
		if (Length>0)
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00a      	beq.n	800187a <EndofBlock+0x4e>
		{
			HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2110      	movs	r1, #16
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <EndofBlock+0x74>)
 800186a:	f002 fe63 	bl	8004534 <HAL_GPIO_WritePin>
			ModbusRTURoutine(RxData, Length);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4619      	mov	r1, r3
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <EndofBlock+0x78>)
 8001874:	f7fe ff9c 	bl	80007b0 <ModbusRTURoutine>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
		}

	}
}
 8001878:	e009      	b.n	800188e <EndofBlock+0x62>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2108      	movs	r1, #8
 800187e:	4808      	ldr	r0, [pc, #32]	; (80018a0 <EndofBlock+0x74>)
 8001880:	f002 fe58 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001884:	2264      	movs	r2, #100	; 0x64
 8001886:	4907      	ldr	r1, [pc, #28]	; (80018a4 <EndofBlock+0x78>)
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <EndofBlock+0x6c>)
 800188a:	f006 f8a1 	bl	80079d0 <HAL_UART_Receive_DMA>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000310 	.word	0x20000310
 800189c:	20000280 	.word	0x20000280
 80018a0:	48000400 	.word	0x48000400
 80018a4:	2000004c 	.word	0x2000004c

080018a8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2110      	movs	r1, #16
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <HAL_UART_TxCpltCallback+0x58>)
 80018ca:	f002 fe33 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2108      	movs	r1, #8
 80018d2:	4810      	ldr	r0, [pc, #64]	; (8001914 <HAL_UART_TxCpltCallback+0x58>)
 80018d4:	f002 fe2e 	bl	8004534 <HAL_GPIO_WritePin>
	// disable DMA for reseting DMA's counter, after enable again
	__HAL_DMA_DISABLE(&hdma_usart1_rx);
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_UART_TxCpltCallback+0x5c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_TxCpltCallback+0x5c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_UART_TxCpltCallback+0x5c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2264      	movs	r2, #100	; 0x64
 80018ee:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(&hdma_usart1_rx);
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_UART_TxCpltCallback+0x5c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_UART_TxCpltCallback+0x5c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001900:	2264      	movs	r2, #100	; 0x64
 8001902:	4906      	ldr	r1, [pc, #24]	; (800191c <HAL_UART_TxCpltCallback+0x60>)
 8001904:	4806      	ldr	r0, [pc, #24]	; (8001920 <HAL_UART_TxCpltCallback+0x64>)
 8001906:	f006 f863 	bl	80079d0 <HAL_UART_Receive_DMA>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	48000400 	.word	0x48000400
 8001918:	20000280 	.word	0x20000280
 800191c:	2000004c 	.word	0x2000004c
 8001920:	20000310 	.word	0x20000310

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_MspInit+0x44>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_MspInit+0x44>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_MspInit+0x44>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_MspInit+0x44>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_MspInit+0x44>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_MspInit+0x44>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b0a0      	sub	sp, #128	; 0x80
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	2254      	movs	r2, #84	; 0x54
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f006 ffe9 	bl	8008970 <memset>
  if(hadc->Instance==ADC1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <HAL_ADC_MspInit+0x158>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	f040 808f 	bne.w	8001ac8 <HAL_ADC_MspInit+0x150>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019b4:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 80019be:	230a      	movs	r3, #10
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019c2:	2307      	movs	r3, #7
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fc67 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019e4:	f7ff ff9e 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 80019ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0c:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_ADC_MspInit+0x15c>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Current_Pin|Potentiometer_Pin;
 8001a30:	2348      	movs	r3, #72	; 0x48
 8001a32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a34:	230b      	movs	r3, #11
 8001a36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f002 fc0b 	bl	8004260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Temperature_Pin;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a4e:	230b      	movs	r3, #11
 8001a50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(Temperature_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <HAL_ADC_MspInit+0x160>)
 8001a5e:	f002 fbff 	bl	8004260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_ADC_MspInit+0x168>)
 8001a66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001a9e:	f002 f969 	bl	8003d74 <HAL_DMA_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001aa8:	f7ff ff3c 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_ADC_MspInit+0x164>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	2012      	movs	r0, #18
 8001abe:	f001 ff24 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ac2:	2012      	movs	r0, #18
 8001ac4:	f001 ff3d 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3780      	adds	r7, #128	; 0x80
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	50040000 	.word	0x50040000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	20000394 	.word	0x20000394
 8001ae0:	40020008 	.word	0x40020008

08001ae4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_CRC_MspInit+0x38>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10b      	bne.n	8001b0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_CRC_MspInit+0x3c>)
 8001af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_CRC_MspInit+0x3c>)
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b00:	6493      	str	r3, [r2, #72]	; 0x48
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_CRC_MspInit+0x3c>)
 8001b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023000 	.word	0x40023000
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d131      	bne.n	8001baa <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b50:	6613      	str	r3, [r2, #96]	; 0x60
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8001b76:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f002 fb63 	bl	8004260 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2023      	movs	r0, #35	; 0x23
 8001ba0:	f001 feb3 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ba4:	2023      	movs	r0, #35	; 0x23
 8001ba6:	f001 fecc 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40013000 	.word	0x40013000
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_TIM_PWM_MspInit+0x44>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d113      	bne.n	8001bf6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_TIM_PWM_MspInit+0x48>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_TIM_PWM_MspInit+0x48>)
 8001bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_TIM_PWM_MspInit+0x48>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2019      	movs	r0, #25
 8001bec:	f001 fe8d 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bf0:	2019      	movs	r0, #25
 8001bf2:	f001 fea6 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_TIM_MspPostInit+0xa0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d139      	bne.n	8001c9e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_TIM_MspPostInit+0xa4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_TIM_MspPostInit+0xa4>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_TIM_MspPostInit+0xa4>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_MspPostInit+0xa4>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_TIM_MspPostInit+0xa4>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_TIM_MspPostInit+0xa4>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c5a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f002 faf1 	bl	8004260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_TIM_MspPostInit+0xa8>)
 8001c9a:	f002 fae1 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0a0      	sub	sp, #128	; 0x80
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	2254      	movs	r2, #84	; 0x54
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f006 fe4b 	bl	8008970 <memset>
  if(huart->Instance==USART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4aa1      	ldr	r2, [pc, #644]	; (8001f64 <HAL_UART_MspInit+0x2b0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	f040 8091 	bne.w	8001e08 <HAL_UART_MspInit+0x154>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cee:	f107 0318 	add.w	r3, r7, #24
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fada 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cfe:	f7ff fe11 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d02:	4b99      	ldr	r3, [pc, #612]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	4a98      	ldr	r2, [pc, #608]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0e:	4b96      	ldr	r3, [pc, #600]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b93      	ldr	r3, [pc, #588]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a92      	ldr	r2, [pc, #584]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b90      	ldr	r3, [pc, #576]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d42:	2307      	movs	r3, #7
 8001d44:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4887      	ldr	r0, [pc, #540]	; (8001f6c <HAL_UART_MspInit+0x2b8>)
 8001d4e:	f002 fa87 	bl	8004260 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d52:	4b87      	ldr	r3, [pc, #540]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d54:	4a87      	ldr	r2, [pc, #540]	; (8001f74 <HAL_UART_MspInit+0x2c0>)
 8001d56:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001d58:	4b85      	ldr	r3, [pc, #532]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5e:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d70:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d76:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d7c:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d88:	4879      	ldr	r0, [pc, #484]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d8a:	f001 fff3 	bl	8003d74 <HAL_DMA_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001d94:	f7ff fdc6 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8001d9e:	4a74      	ldr	r2, [pc, #464]	; (8001f70 <HAL_UART_MspInit+0x2bc>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001da4:	4b74      	ldr	r3, [pc, #464]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_UART_MspInit+0x2c8>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001daa:	4b73      	ldr	r3, [pc, #460]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dac:	2202      	movs	r2, #2
 8001dae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db0:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001db2:	2210      	movs	r2, #16
 8001db4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db6:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbc:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001dce:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001dda:	4867      	ldr	r0, [pc, #412]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001ddc:	f001 ffca 	bl	8003d74 <HAL_DMA_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8001de6:	f7ff fd9d 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a62      	ldr	r2, [pc, #392]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001dee:	66da      	str	r2, [r3, #108]	; 0x6c
 8001df0:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <HAL_UART_MspInit+0x2c4>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2025      	movs	r0, #37	; 0x25
 8001dfc:	f001 fd85 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e00:	2025      	movs	r0, #37	; 0x25
 8001e02:	f001 fd9e 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e06:	e0a8      	b.n	8001f5a <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a5c      	ldr	r2, [pc, #368]	; (8001f80 <HAL_UART_MspInit+0x2cc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	f040 80a3 	bne.w	8001f5a <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fa43 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8001e2c:	f7ff fd7a 	bl	8001924 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	4a46      	ldr	r2, [pc, #280]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e54:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_UART_MspInit+0x2b4>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001e60:	2304      	movs	r3, #4
 8001e62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e70:	2307      	movs	r3, #7
 8001e72:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f002 f9ef 	bl	8004260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001e94:	2303      	movs	r3, #3
 8001e96:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f002 f9dd 	bl	8004260 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ea8:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_UART_MspInit+0x2d4>)
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001edc:	4829      	ldr	r0, [pc, #164]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ede:	f001 ff49 	bl	8003d74 <HAL_DMA_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_MspInit+0x238>
      Error_Handler();
 8001ee8:	f7ff fd1c 	bl	8001924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ef0:	671a      	str	r2, [r3, #112]	; 0x70
 8001ef2:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <HAL_UART_MspInit+0x2d0>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001efa:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <HAL_UART_MspInit+0x2dc>)
 8001efc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f00:	2202      	movs	r2, #2
 8001f02:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f06:	2210      	movs	r2, #16
 8001f08:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f2e:	4817      	ldr	r0, [pc, #92]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f30:	f001 ff20 	bl	8003d74 <HAL_DMA_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8001f3a:	f7ff fcf3 	bl	8001924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f42:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_UART_MspInit+0x2d8>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2026      	movs	r0, #38	; 0x26
 8001f50:	f001 fcdb 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f54:	2026      	movs	r0, #38	; 0x26
 8001f56:	f001 fcf4 	bl	8003942 <HAL_NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3780      	adds	r7, #128	; 0x80
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	20000280 	.word	0x20000280
 8001f74:	40020058 	.word	0x40020058
 8001f78:	200001d4 	.word	0x200001d4
 8001f7c:	40020044 	.word	0x40020044
 8001f80:	40004400 	.word	0x40004400
 8001f84:	20000168 	.word	0x20000168
 8001f88:	4002006c 	.word	0x4002006c
 8001f8c:	200002c8 	.word	0x200002c8
 8001f90:	40020080 	.word	0x40020080

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f918 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA1_Channel1_IRQHandler+0x10>)
 8001fee:	f002 f858 	bl	80040a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000394 	.word	0x20000394

08001ffc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA1_Channel4_IRQHandler+0x10>)
 8002002:	f002 f84e 	bl	80040a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200001d4 	.word	0x200001d4

08002010 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Channel5_IRQHandler+0x10>)
 8002016:	f002 f844 	bl	80040a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000280 	.word	0x20000280

08002024 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <DMA1_Channel6_IRQHandler+0x10>)
 800202a:	f002 f83a 	bl	80040a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000168 	.word	0x20000168

08002038 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA1_Channel7_IRQHandler+0x10>)
 800203e:	f002 f830 	bl	80040a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002c8 	.word	0x200002c8

0800204c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <ADC1_IRQHandler+0x10>)
 8002052:	f000 fca5 	bl	80029a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000021c 	.word	0x2000021c

08002060 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002066:	f004 fbfd 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200003dc 	.word	0x200003dc

08002074 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <SPI1_IRQHandler+0x10>)
 800207a:	f003 fd51 	bl	8005b20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000428 	.word	0x20000428

08002088 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	EndofBlock();
 800208c:	f7ff fbce 	bl	800182c <EndofBlock>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <USART1_IRQHandler+0x14>)
 8002092:	f005 fce1 	bl	8007a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000310 	.word	0x20000310

080020a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <USART2_IRQHandler+0x10>)
 80020a6:	f005 fcd7 	bl	8007a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000048c 	.word	0x2000048c

080020b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <SystemInit+0x5c>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <SystemInit+0x5c>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <SystemInit+0x60>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <SystemInit+0x60>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <SystemInit+0x60>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <SystemInit+0x60>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <SystemInit+0x60>)
 80020e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <SystemInit+0x60>)
 80020ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <SystemInit+0x60>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <SystemInit+0x60>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SystemInit+0x60>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	40021000 	.word	0x40021000

08002118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002150 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800211c:	f7ff ffca 	bl	80020b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002120:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002122:	e003      	b.n	800212c <LoopCopyDataInit>

08002124 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002126:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002128:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800212a:	3104      	adds	r1, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <LoopForever+0xa>)
	ldr	r3, =_edata
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002130:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002132:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002134:	d3f6      	bcc.n	8002124 <CopyDataInit>
	ldr	r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002138:	e002      	b.n	8002140 <LoopFillZerobss>

0800213a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800213a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800213c:	f842 3b04 	str.w	r3, [r2], #4

08002140 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <LoopForever+0x16>)
	cmp	r2, r3
 8002142:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002144:	d3f9      	bcc.n	800213a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002146:	f006 fbef 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800214a:	f7ff f809 	bl	8001160 <main>

0800214e <LoopForever>:

LoopForever:
    b LoopForever
 800214e:	e7fe      	b.n	800214e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002150:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002154:	080089f0 	.word	0x080089f0
	ldr	r0, =_sdata
 8002158:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800215c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8002160:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8002164:	20000514 	.word	0x20000514

08002168 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <CAN1_RX0_IRQHandler>

0800216a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f001 fbbd 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217a:	2000      	movs	r0, #0
 800217c:	f000 f80e 	bl	800219c <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	71fb      	strb	r3, [r7, #7]
 800218a:	e001      	b.n	8002190 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800218c:	f7ff fbd0 	bl	8001930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002190:	79fb      	ldrb	r3, [r7, #7]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_InitTick+0x6c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_InitTick+0x70>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_InitTick+0x6c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fbc9 	bl	800395e <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d809      	bhi.n	80021ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f001 fb93 	bl	800390a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_InitTick+0x74>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e007      	b.n	80021fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e004      	b.n	80021fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e001      	b.n	80021fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000020 	.word	0x20000020
 800220c:	20000018 	.word	0x20000018
 8002210:	2000001c 	.word	0x2000001c

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000020 	.word	0x20000020
 8002238:	20000510 	.word	0x20000510

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000510 	.word	0x20000510

08002254 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	609a      	str	r2, [r3, #8]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3360      	adds	r3, #96	; 0x60
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <LL_ADC_SetOffset+0x44>)
 80022de:	4013      	ands	r3, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	03fff000 	.word	0x03fff000

08002304 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	461a      	mov	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3360      	adds	r3, #96	; 0x60
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	431a      	orrs	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3330      	adds	r3, #48	; 0x30
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	211f      	movs	r1, #31
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 011f 	and.w	r1, r3, #31
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	431a      	orrs	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3314      	adds	r3, #20
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	0e5b      	lsrs	r3, r3, #25
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0d1b      	lsrs	r3, r3, #20
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2107      	movs	r1, #7
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0d1b      	lsrs	r3, r3, #20
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	431a      	orrs	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	43db      	mvns	r3, r3
 800247a:	401a      	ands	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0318 	and.w	r3, r3, #24
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002484:	40d9      	lsrs	r1, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	400b      	ands	r3, r1
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	431a      	orrs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	0007ffff 	.word	0x0007ffff

080024a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6093      	str	r3, [r2, #8]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002508:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002530:	d101      	bne.n	8002536 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <LL_ADC_IsEnabled+0x18>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <LL_ADC_IsEnabled+0x1a>
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a6:	f043 0204 	orr.w	r2, r3, #4
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d101      	bne.n	80025f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e12c      	b.n	800287c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff f9a1 	bl	8001978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff3f 	bl	80024cc <LL_ADC_IsDeepPowerDownEnabled>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff25 	bl	80024a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff5a 	bl	800251c <LL_ADC_IsInternalRegulatorEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff3e 	bl	80024f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002678:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_ADC_Init+0x27c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	4a82      	ldr	r2, [pc, #520]	; (8002888 <HAL_ADC_Init+0x280>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800268c:	e002      	b.n	8002694 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3b01      	subs	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff3c 	bl	800251c <LL_ADC_IsInternalRegulatorEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0210 	orr.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff75 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 80026d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 80c5 	bne.w	800286a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80c1 	bne.w	800286a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026f0:	f043 0202 	orr.w	r2, r3, #2
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff35 	bl	800256c <LL_ADC_IsEnabled>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002708:	4860      	ldr	r0, [pc, #384]	; (800288c <HAL_ADC_Init+0x284>)
 800270a:	f7ff ff2f 	bl	800256c <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4619      	mov	r1, r3
 800271a:	485d      	ldr	r0, [pc, #372]	; (8002890 <HAL_ADC_Init+0x288>)
 800271c:	f7ff fd9a 	bl	8002254 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e5b      	ldrb	r3, [r3, #25]
 8002724:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800272a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002730:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002736:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	3b01      	subs	r3, #1
 8002754:	045b      	lsls	r3, r3, #17
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	4b45      	ldr	r3, [pc, #276]	; (8002894 <HAL_ADC_Init+0x28c>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	69b9      	ldr	r1, [r7, #24]
 8002788:	430b      	orrs	r3, r1
 800278a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff12 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 8002796:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff1f 	bl	80025e0 <LL_ADC_INJ_IsConversionOngoing>
 80027a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d13d      	bne.n	8002826 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d13a      	bne.n	8002826 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027cc:	f023 0302 	bic.w	r3, r3, #2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	69b9      	ldr	r1, [r7, #24]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d118      	bne.n	8002816 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027fa:	4311      	orrs	r1, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002806:	430a      	orrs	r2, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	611a      	str	r2, [r3, #16]
 8002814:	e007      	b.n	8002826 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10c      	bne.n	8002848 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f023 010f 	bic.w	r1, r3, #15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
 8002846:	e007      	b.n	8002858 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 020f 	bic.w	r2, r2, #15
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f023 0303 	bic.w	r3, r3, #3
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
 8002868:	e007      	b.n	800287a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800287a:	7ffb      	ldrb	r3, [r7, #31]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000018 	.word	0x20000018
 8002888:	053e2d63 	.word	0x053e2d63
 800288c:	50040000 	.word	0x50040000
 8002890:	50040300 	.word	0x50040300
 8002894:	fff0c007 	.word	0xfff0c007

08002898 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fe86 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d167      	bne.n	8002984 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x2a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e063      	b.n	800298a <HAL_ADC_Start_DMA+0xf2>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fe1a 	bl	8003504 <ADC_Enable>
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d14f      	bne.n	800297a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	f023 0206 	bic.w	r2, r3, #6
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	659a      	str	r2, [r3, #88]	; 0x58
 8002906:	e002      	b.n	800290e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_ADC_Start_DMA+0xfc>)
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_ADC_Start_DMA+0x100>)
 800291c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_ADC_Start_DMA+0x104>)
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	221c      	movs	r2, #28
 800292c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0210 	orr.w	r2, r2, #16
 8002944:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3340      	adds	r3, #64	; 0x40
 8002960:	4619      	mov	r1, r3
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f001 fabd 	bl	8003ee4 <HAL_DMA_Start_IT>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fe0d 	bl	8002592 <LL_ADC_REG_StartConversion>
 8002978:	e006      	b.n	8002988 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002982:	e001      	b.n	8002988 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	080035c9 	.word	0x080035c9
 8002998:	080036a1 	.word	0x080036a1
 800299c:	080036bd 	.word	0x080036bd

080029a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d017      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x56>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fea9 	bl	8003740 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x6a>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05e      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d059      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fc93 	bl	8002366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03e      	beq.n	8002ac4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d135      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d12e      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fda5 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11a      	bne.n	8002aac <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020c 	bic.w	r2, r2, #12
 8002a84:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d112      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
 8002aaa:	e00b      	b.n	8002ac4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f043 0210 	orr.w	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7fe fae1 	bl	800108c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x146>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d072      	beq.n	8002bd6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d06d      	beq.n	8002bd6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fc64 	bl	80023e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b1c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fc1f 	bl	8002366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b28:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d047      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x1b2>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03f      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d13a      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d133      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d12e      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd36 	bl	80025e0 <LL_ADC_INJ_IsConversionOngoing>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11a      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b88:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d112      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
 8002bae:	e00b      	b.n	8002bc8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f043 0210 	orr.w	r2, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fd91 	bl	80036f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2260      	movs	r2, #96	; 0x60
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d011      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x264>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f890 	bl	8002d1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x294>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fd77 	bl	8003718 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d012      	beq.n	8002c64 <HAL_ADC_IRQHandler+0x2c4>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fd69 	bl	800372c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d02a      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x324>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d025      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	e008      	b.n	8002c98 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10e      	bne.n	8002cbc <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f83a 	bl	8002d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x360>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	f043 0208 	orr.w	r2, r3, #8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fd02 	bl	8003704 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d00:	bf00      	nop
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0b6      	sub	sp, #216	; 0xd8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x22>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e3b9      	b.n	80034da <HAL_ADC_ConfigChannel+0x796>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fc21 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 839e 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d824      	bhi.n	8002dd2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	3b02      	subs	r3, #2
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d81b      	bhi.n	8002dca <HAL_ADC_ConfigChannel+0x86>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_ADC_ConfigChannel+0x54>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002db1 	.word	0x08002db1
 8002da0:	08002db9 	.word	0x08002db9
 8002da4:	08002dc1 	.word	0x08002dc1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	220c      	movs	r2, #12
 8002dac:	605a      	str	r2, [r3, #4]
          break;
 8002dae:	e011      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2212      	movs	r2, #18
 8002db4:	605a      	str	r2, [r3, #4]
          break;
 8002db6:	e00d      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2218      	movs	r2, #24
 8002dbc:	605a      	str	r2, [r3, #4]
          break;
 8002dbe:	e009      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc6:	605a      	str	r2, [r3, #4]
          break;
 8002dc8:	e004      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2206      	movs	r2, #6
 8002dce:	605a      	str	r2, [r3, #4]
          break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002dd2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f7ff fad3 	bl	800238c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fbe5 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 8002df0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fbf1 	bl	80025e0 <LL_ADC_INJ_IsConversionOngoing>
 8002dfe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 81a6 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 81a1 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f7ff faf1 	bl	800240a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00a      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e5a:	f7ff fa2f 	bl	80022bc <LL_ADC_SetOffset>
 8002e5e:	e17b      	b.n	8003158 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fa4c 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x148>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fa41 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	0e9b      	lsrs	r3, r3, #26
 8002e86:	f003 021f 	and.w	r2, r3, #31
 8002e8a:	e01e      	b.n	8002eca <HAL_ADC_ConfigChannel+0x186>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fa36 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e004      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x19e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	e018      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x1d0>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002f06:	2320      	movs	r3, #32
 8002f08:	e004      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d106      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fa05 	bl	8002330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f9e9 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x20e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f9de 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	f003 021f 	and.w	r2, r3, #31
 8002f50:	e01e      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x24c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f9d3 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e004      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x264>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	e018      	b.n	8002fda <HAL_ADC_ConfigChannel+0x296>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e004      	b.n	8002fda <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d106      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f9a2 	bl	8002330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff f986 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x2d4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f97b 	bl	8002304 <LL_ADC_GetOffsetChannel>
 800300e:	4603      	mov	r3, r0
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	f003 021f 	and.w	r2, r3, #31
 8003016:	e01e      	b.n	8003056 <HAL_ADC_ConfigChannel+0x312>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2102      	movs	r1, #2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f970 	bl	8002304 <LL_ADC_GetOffsetChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003036:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800303e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e004      	b.n	8003054 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800304a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_ADC_ConfigChannel+0x32a>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	e016      	b.n	800309c <HAL_ADC_ConfigChannel+0x358>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2102      	movs	r1, #2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f941 	bl	8002330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2103      	movs	r1, #3
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f925 	bl	8002304 <LL_ADC_GetOffsetChannel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x396>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2103      	movs	r1, #3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f91a 	bl	8002304 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	e017      	b.n	800310a <HAL_ADC_ConfigChannel+0x3c6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2103      	movs	r1, #3
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f90f 	bl	8002304 <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80030f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e003      	b.n	8003108 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x3de>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	e011      	b.n	8003146 <HAL_ADC_ConfigChannel+0x402>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003132:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003146:	429a      	cmp	r2, r3
 8003148:	d106      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	2103      	movs	r1, #3
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff f8ec 	bl	8002330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fa05 	bl	800256c <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	f040 813f 	bne.w	80033e8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	f7ff f972 	bl	8002460 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a8e      	ldr	r2, [pc, #568]	; (80033bc <HAL_ADC_ConfigChannel+0x678>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f040 8130 	bne.w	80033e8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x46c>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	3301      	adds	r3, #1
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2b09      	cmp	r3, #9
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e019      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x4a0>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80031be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80031c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e003      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80031cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2b09      	cmp	r3, #9
 80031dc:	bf94      	ite	ls
 80031de:	2301      	movls	r3, #1
 80031e0:	2300      	movhi	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d079      	beq.n	80032dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x4c0>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	3301      	adds	r3, #1
 80031fc:	069b      	lsls	r3, r3, #26
 80031fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003202:	e015      	b.n	8003230 <HAL_ADC_ConfigChannel+0x4ec>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003214:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e003      	b.n	8003228 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3301      	adds	r3, #1
 800322a:	069b      	lsls	r3, r3, #26
 800322c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x50c>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	3301      	adds	r3, #1
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	e017      	b.n	8003280 <HAL_ADC_ConfigChannel+0x53c>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800325e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003260:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e003      	b.n	8003274 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	ea42 0103 	orr.w	r1, r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x562>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	3301      	adds	r3, #1
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	051b      	lsls	r3, r3, #20
 80032a4:	e018      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x594>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80032b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80032c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d8:	430b      	orrs	r3, r1
 80032da:	e080      	b.n	80033de <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x5b4>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	3301      	adds	r3, #1
 80032f0:	069b      	lsls	r3, r3, #26
 80032f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f6:	e015      	b.n	8003324 <HAL_ADC_ConfigChannel+0x5e0>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e003      	b.n	800331c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	069b      	lsls	r3, r3, #26
 8003320:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x600>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	3301      	adds	r3, #1
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	e017      	b.n	8003374 <HAL_ADC_ConfigChannel+0x630>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	61fb      	str	r3, [r7, #28]
  return result;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	ea42 0103 	orr.w	r1, r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x65c>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	3301      	adds	r3, #1
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	3b1e      	subs	r3, #30
 8003398:	051b      	lsls	r3, r3, #20
 800339a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800339e:	e01d      	b.n	80033dc <HAL_ADC_ConfigChannel+0x698>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	613b      	str	r3, [r7, #16]
  return result;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e005      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x684>
 80033bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f003 021f 	and.w	r2, r3, #31
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	3b1e      	subs	r3, #30
 80033d6:	051b      	lsls	r3, r3, #20
 80033d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033dc:	430b      	orrs	r3, r1
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7ff f811 	bl	800240a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_ADC_ConfigChannel+0x7a0>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d06c      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f4:	483c      	ldr	r0, [pc, #240]	; (80034e8 <HAL_ADC_ConfigChannel+0x7a4>)
 80033f6:	f7fe ff53 	bl	80022a0 <LL_ADC_GetCommonPathInternalCh>
 80033fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <HAL_ADC_ConfigChannel+0x7a8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d127      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800340c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d121      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <HAL_ADC_ConfigChannel+0x7ac>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d157      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800341e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003422:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003426:	4619      	mov	r1, r3
 8003428:	482f      	ldr	r0, [pc, #188]	; (80034e8 <HAL_ADC_ConfigChannel+0x7a4>)
 800342a:	f7fe ff26 	bl	800227a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003448:	e002      	b.n	8003450 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f9      	bne.n	800344a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003456:	e03a      	b.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_ADC_ConfigChannel+0x7b8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d113      	bne.n	800348a <HAL_ADC_ConfigChannel+0x746>
 8003462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d12a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800347c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003480:	4619      	mov	r1, r3
 8003482:	4819      	ldr	r0, [pc, #100]	; (80034e8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003484:	f7fe fef9 	bl	800227a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003488:	e021      	b.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_ADC_ConfigChannel+0x7bc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d11c      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d116      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_ADC_ConfigChannel+0x7ac>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034b2:	4619      	mov	r1, r3
 80034b4:	480c      	ldr	r0, [pc, #48]	; (80034e8 <HAL_ADC_ConfigChannel+0x7a4>)
 80034b6:	f7fe fee0 	bl	800227a <LL_ADC_SetCommonPathInternalCh>
 80034ba:	e008      	b.n	80034ce <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	37d8      	adds	r7, #216	; 0xd8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	80080000 	.word	0x80080000
 80034e8:	50040300 	.word	0x50040300
 80034ec:	c7520000 	.word	0xc7520000
 80034f0:	50040000 	.word	0x50040000
 80034f4:	20000018 	.word	0x20000018
 80034f8:	053e2d63 	.word	0x053e2d63
 80034fc:	cb840000 	.word	0xcb840000
 8003500:	80000001 	.word	0x80000001

08003504 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f82b 	bl	800256c <LL_ADC_IsEnabled>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d14d      	bne.n	80035b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <ADC_Enable+0xc0>)
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e039      	b.n	80035ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fffa 	bl	8002544 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003550:	f7fe fe74 	bl	800223c <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003556:	e028      	b.n	80035aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f805 	bl	800256c <LL_ADC_IsEnabled>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe ffe9 	bl	8002544 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003572:	f7fe fe63 	bl	800223c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d914      	bls.n	80035aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d00d      	beq.n	80035aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e007      	b.n	80035ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d1cf      	bne.n	8003558 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	8000003f 	.word	0x8000003f

080035c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d14b      	bne.n	800367a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d021      	beq.n	8003640 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe feb0 	bl	8002366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d032      	beq.n	8003672 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d12b      	bne.n	8003672 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11f      	bne.n	8003672 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
 800363e:	e018      	b.n	8003672 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d111      	bne.n	8003672 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7fd fd0a 	bl	800108c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003678:	e00e      	b.n	8003698 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff fb52 	bl	8002d30 <HAL_ADC_ErrorCallback>
}
 800368c:	e004      	b.n	8003698 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff fb2a 	bl	8002d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff fb24 	bl	8002d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff29 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800391c:	f7ff ff3e 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff ff8e 	bl	8003848 <NVIC_EncodePriority>
 800392c:	4602      	mov	r2, r0
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff5d 	bl	80037f4 <__NVIC_SetPriority>
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff31 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffa2 	bl	80038b0 <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e054      	b.n	8003a34 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7f5b      	ldrb	r3, [r3, #29]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe f8a2 	bl	8001ae4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	791b      	ldrb	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <HAL_CRC_Init+0xc4>)
 80039b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0218 	bic.w	r2, r2, #24
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	e00c      	b.n	80039e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f948 	bl	8003c68 <HAL_CRCEx_Polynomial_Set>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e028      	b.n	8003a34 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	795b      	ldrb	r3, [r3, #5]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	e004      	b.n	8003a00 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6912      	ldr	r2, [r2, #16]
 80039fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	04c11db7 	.word	0x04c11db7

08003a40 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2202      	movs	r2, #2
 8003a54:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d006      	beq.n	8003a7c <HAL_CRC_Calculate+0x3c>
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d829      	bhi.n	8003ac6 <HAL_CRC_Calculate+0x86>
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d019      	beq.n	8003aaa <HAL_CRC_Calculate+0x6a>
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d01e      	beq.n	8003ab8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003a7a:	e024      	b.n	8003ac6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e00a      	b.n	8003a98 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3f0      	bcc.n	8003a82 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	613b      	str	r3, [r7, #16]
      break;
 8003aa8:	e00e      	b.n	8003ac8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f812 	bl	8003ad8 <CRC_Handle_8>
 8003ab4:	6138      	str	r0, [r7, #16]
      break;
 8003ab6:	e007      	b.n	8003ac8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f899 	bl	8003bf4 <CRC_Handle_16>
 8003ac2:	6138      	str	r0, [r7, #16]
      break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_CRC_Calculate+0x88>
      break;
 8003ac6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003ace:	693b      	ldr	r3, [r7, #16]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	; 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e023      	b.n	8003b32 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	3301      	adds	r3, #1
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	440b      	add	r3, r1
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003b04:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	440b      	add	r3, r1
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003b14:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3303      	adds	r3, #3
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	440b      	add	r3, r1
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003b28:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d3d6      	bcc.n	8003aea <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04d      	beq.n	8003be2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4413      	add	r3, r2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d116      	bne.n	8003b98 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4413      	add	r3, r2
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	b21a      	sxth	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	440b      	add	r3, r1
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b21b      	sxth	r3, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	8b7a      	ldrh	r2, [r7, #26]
 8003b96:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d11f      	bne.n	8003be2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4413      	add	r3, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	b21a      	sxth	r2, r3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	440b      	add	r3, r1
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b21b      	sxth	r3, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	8b7a      	ldrh	r2, [r7, #26]
 8003bce:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3724      	adds	r7, #36	; 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e013      	b.n	8003c2e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3302      	adds	r3, #2
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	440b      	add	r3, r1
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3e6      	bcc.n	8003c06 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	4413      	add	r3, r2
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c78:	231f      	movs	r3, #31
 8003c7a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c7c:	bf00      	nop
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	613a      	str	r2, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_CRCEx_Polynomial_Set+0x34>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_CRCEx_Polynomial_Set+0x16>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b18      	cmp	r3, #24
 8003ca0:	d846      	bhi.n	8003d30 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003d37 	.word	0x08003d37
 8003cac:	08003d31 	.word	0x08003d31
 8003cb0:	08003d31 	.word	0x08003d31
 8003cb4:	08003d31 	.word	0x08003d31
 8003cb8:	08003d31 	.word	0x08003d31
 8003cbc:	08003d31 	.word	0x08003d31
 8003cc0:	08003d31 	.word	0x08003d31
 8003cc4:	08003d31 	.word	0x08003d31
 8003cc8:	08003d25 	.word	0x08003d25
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003d31 	.word	0x08003d31
 8003cd4:	08003d31 	.word	0x08003d31
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d31 	.word	0x08003d31
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d0d 	.word	0x08003d0d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d913      	bls.n	8003d3a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d16:	e010      	b.n	8003d3a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b07      	cmp	r3, #7
 8003d1c:	d90f      	bls.n	8003d3e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d22:	e00c      	b.n	8003d3e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	d90b      	bls.n	8003d42 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d2e:	e008      	b.n	8003d42 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e006      	b.n	8003d44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d36:	bf00      	nop
 8003d38:	e004      	b.n	8003d44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e002      	b.n	8003d44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d42:	bf00      	nop
  }
  if (status == HAL_OK)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 0118 	bic.w	r1, r3, #24
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e098      	b.n	8003eb8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4b4d      	ldr	r3, [pc, #308]	; (8003ec4 <HAL_DMA_Init+0x150>)
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d80f      	bhi.n	8003db2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <HAL_DMA_Init+0x154>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ecc <HAL_DMA_Init+0x158>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	009a      	lsls	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a48      	ldr	r2, [pc, #288]	; (8003ed0 <HAL_DMA_Init+0x15c>)
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
 8003db0:	e00e      	b.n	8003dd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_DMA_Init+0x160>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <HAL_DMA_Init+0x158>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	009a      	lsls	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a42      	ldr	r2, [pc, #264]	; (8003ed8 <HAL_DMA_Init+0x164>)
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e2a:	d039      	beq.n	8003ea0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <HAL_DMA_Init+0x15c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d11a      	bne.n	8003e6c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_DMA_Init+0x168>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f003 031c 	and.w	r3, r3, #28
 8003e42:	210f      	movs	r1, #15
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	4924      	ldr	r1, [pc, #144]	; (8003edc <HAL_DMA_Init+0x168>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_DMA_Init+0x168>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f003 031c 	and.w	r3, r3, #28
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	491d      	ldr	r1, [pc, #116]	; (8003edc <HAL_DMA_Init+0x168>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
 8003e6a:	e019      	b.n	8003ea0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <HAL_DMA_Init+0x16c>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f003 031c 	and.w	r3, r3, #28
 8003e78:	210f      	movs	r1, #15
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	4917      	ldr	r1, [pc, #92]	; (8003ee0 <HAL_DMA_Init+0x16c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e86:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <HAL_DMA_Init+0x16c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f003 031c 	and.w	r3, r3, #28
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	4911      	ldr	r1, [pc, #68]	; (8003ee0 <HAL_DMA_Init+0x16c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40020407 	.word	0x40020407
 8003ec8:	bffdfff8 	.word	0xbffdfff8
 8003ecc:	cccccccd 	.word	0xcccccccd
 8003ed0:	40020000 	.word	0x40020000
 8003ed4:	bffdfbf8 	.word	0xbffdfbf8
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	400200a8 	.word	0x400200a8
 8003ee0:	400204a8 	.word	0x400204a8

08003ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_DMA_Start_IT+0x20>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e04b      	b.n	8003f9c <HAL_DMA_Start_IT+0xb8>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d13a      	bne.n	8003f8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f95f 	bl	8004200 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 020e 	orr.w	r2, r2, #14
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e00f      	b.n	8003f7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 020a 	orr.w	r2, r2, #10
 8003f7a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e005      	b.n	8003f9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
 8003f98:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d008      	beq.n	8003fce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e022      	b.n	8004014 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020e 	bic.w	r2, r2, #14
 8003fdc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f003 021c 	and.w	r2, r3, #28
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d005      	beq.n	8004044 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2204      	movs	r2, #4
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e029      	b.n	8004098 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 020e 	bic.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f003 021c 	and.w	r2, r3, #28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f202 	lsl.w	r2, r1, r2
 8004076:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
    }
  }
  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f003 031c 	and.w	r3, r3, #28
 80040c2:	2204      	movs	r2, #4
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d026      	beq.n	800411c <HAL_DMA_IRQHandler+0x7a>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d021      	beq.n	800411c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0204 	bic.w	r2, r2, #4
 80040f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f003 021c 	and.w	r2, r3, #28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2104      	movs	r1, #4
 8004104:	fa01 f202 	lsl.w	r2, r1, r2
 8004108:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	2b00      	cmp	r3, #0
 8004110:	d071      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800411a:	e06c      	b.n	80041f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f003 031c 	and.w	r3, r3, #28
 8004124:	2202      	movs	r2, #2
 8004126:	409a      	lsls	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02e      	beq.n	800418e <HAL_DMA_IRQHandler+0xec>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d029      	beq.n	800418e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 020a 	bic.w	r2, r2, #10
 8004156:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	f003 021c 	and.w	r2, r3, #28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2102      	movs	r1, #2
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d038      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800418c:	e033      	b.n	80041f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f003 031c 	and.w	r3, r3, #28
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02a      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x156>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d025      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020e 	bic.w	r2, r2, #14
 80041ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f003 021c 	and.w	r2, r3, #28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
}
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f003 021c 	and.w	r2, r3, #28
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b10      	cmp	r3, #16
 8004230:	d108      	bne.n	8004244 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004242:	e007      	b.n	8004254 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426e:	e148      	b.n	8004502 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 813a 	beq.w	80044fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d00b      	beq.n	80042a8 <HAL_GPIO_Init+0x48>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d007      	beq.n	80042a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800429c:	2b11      	cmp	r3, #17
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b12      	cmp	r3, #18
 80042a6:	d130      	bne.n	800430a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042de:	2201      	movs	r2, #1
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 0201 	and.w	r2, r3, #1
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0xea>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b12      	cmp	r3, #18
 8004348:	d123      	bne.n	8004392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	220f      	movs	r2, #15
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0203 	and.w	r2, r3, #3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8094 	beq.w	80044fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d4:	4b52      	ldr	r3, [pc, #328]	; (8004520 <HAL_GPIO_Init+0x2c0>)
 80043d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d8:	4a51      	ldr	r2, [pc, #324]	; (8004520 <HAL_GPIO_Init+0x2c0>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6613      	str	r3, [r2, #96]	; 0x60
 80043e0:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <HAL_GPIO_Init+0x2c0>)
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043ec:	4a4d      	ldr	r2, [pc, #308]	; (8004524 <HAL_GPIO_Init+0x2c4>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004416:	d00d      	beq.n	8004434 <HAL_GPIO_Init+0x1d4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a43      	ldr	r2, [pc, #268]	; (8004528 <HAL_GPIO_Init+0x2c8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <HAL_GPIO_Init+0x1d0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a42      	ldr	r2, [pc, #264]	; (800452c <HAL_GPIO_Init+0x2cc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <HAL_GPIO_Init+0x1cc>
 8004428:	2302      	movs	r3, #2
 800442a:	e004      	b.n	8004436 <HAL_GPIO_Init+0x1d6>
 800442c:	2307      	movs	r3, #7
 800442e:	e002      	b.n	8004436 <HAL_GPIO_Init+0x1d6>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_GPIO_Init+0x1d6>
 8004434:	2300      	movs	r3, #0
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	f002 0203 	and.w	r2, r2, #3
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	4093      	lsls	r3, r2
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004446:	4937      	ldr	r1, [pc, #220]	; (8004524 <HAL_GPIO_Init+0x2c4>)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	3302      	adds	r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	43db      	mvns	r3, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4013      	ands	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004478:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044cc:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <HAL_GPIO_Init+0x2d0>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3301      	adds	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f aeaf 	bne.w	8004270 <HAL_GPIO_Init+0x10>
  }
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	40010000 	.word	0x40010000
 8004528:	48000400 	.word	0x48000400
 800452c:	48000800 	.word	0x48000800
 8004530:	40010400 	.word	0x40010400

08004534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
 8004540:	4613      	mov	r3, r2
 8004542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004544:	787b      	ldrb	r3, [r7, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004550:	e002      	b.n	8004558 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4013      	ands	r3, r2
 800457c:	041a      	lsls	r2, r3, #16
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	43d9      	mvns	r1, r3
 8004582:	887b      	ldrh	r3, [r7, #2]
 8004584:	400b      	ands	r3, r1
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40007000 	.word	0x40007000

080045b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c2:	d130      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045c4:	4b23      	ldr	r3, [pc, #140]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d038      	beq.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2232      	movs	r2, #50	; 0x32
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
 80045ec:	4a1b      	ldr	r2, [pc, #108]	; (800465c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0c9b      	lsrs	r3, r3, #18
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f8:	e002      	b.n	8004600 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004600:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460c:	d102      	bne.n	8004614 <HAL_PWREx_ControlVoltageScaling+0x60>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f2      	bne.n	80045fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d110      	bne.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d007      	beq.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800463c:	4a05      	ldr	r2, [pc, #20]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800463e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004642:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40007000 	.word	0x40007000
 8004658:	20000018 	.word	0x20000018
 800465c:	431bde83 	.word	0x431bde83

08004660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d102      	bne.n	8004674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f000 bc11 	b.w	8004e96 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004674:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800467e:	4b9e      	ldr	r3, [pc, #632]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80e4 	beq.w	800485e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_RCC_OscConfig+0x4c>
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	f040 808b 	bne.w	80047ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	f040 8087 	bne.w	80047ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ac:	4b92      	ldr	r3, [pc, #584]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_OscConfig+0x64>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e3e8      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <HAL_RCC_OscConfig+0x7e>
 80046d4:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046dc:	e005      	b.n	80046ea <HAL_RCC_OscConfig+0x8a>
 80046de:	4b86      	ldr	r3, [pc, #536]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d223      	bcs.n	8004736 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fd7a 	bl	80051ec <RCC_SetFlashLatencyFromMSIRange>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e3c9      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004702:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7c      	ldr	r2, [pc, #496]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004708:	f043 0308 	orr.w	r3, r3, #8
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	4b7a      	ldr	r3, [pc, #488]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	4977      	ldr	r1, [pc, #476]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004720:	4b75      	ldr	r3, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	4972      	ldr	r1, [pc, #456]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
 8004734:	e025      	b.n	8004782 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004736:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6f      	ldr	r2, [pc, #444]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	496a      	ldr	r1, [pc, #424]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004754:	4b68      	ldr	r3, [pc, #416]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4965      	ldr	r1, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fd3a 	bl	80051ec <RCC_SetFlashLatencyFromMSIRange>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e389      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004782:	f000 fc6f 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8004786:	4602      	mov	r2, r0
 8004788:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	495a      	ldr	r1, [pc, #360]	; (80048fc <HAL_RCC_OscConfig+0x29c>)
 8004794:	5ccb      	ldrb	r3, [r1, r3]
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	4a58      	ldr	r2, [pc, #352]	; (8004900 <HAL_RCC_OscConfig+0x2a0>)
 80047a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047a2:	4b58      	ldr	r3, [pc, #352]	; (8004904 <HAL_RCC_OscConfig+0x2a4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fd fcf8 	bl	800219c <HAL_InitTick>
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d052      	beq.n	800485c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	e36d      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d032      	beq.n	8004828 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047c2:	4b4d      	ldr	r3, [pc, #308]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4c      	ldr	r2, [pc, #304]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047ce:	f7fd fd35 	bl	800223c <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d6:	f7fd fd31 	bl	800223c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e356      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f4:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3f      	ldr	r2, [pc, #252]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047fa:	f043 0308 	orr.w	r3, r3, #8
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	493a      	ldr	r1, [pc, #232]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004812:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4935      	ldr	r1, [pc, #212]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
 8004826:	e01a      	b.n	800485e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004828:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a32      	ldr	r2, [pc, #200]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004834:	f7fd fd02 	bl	800223c <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800483c:	f7fd fcfe 	bl	800223c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e323      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800484e:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x1dc>
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800485c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d073      	beq.n	8004952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d005      	beq.n	800487c <HAL_RCC_OscConfig+0x21c>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d10e      	bne.n	8004894 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d10b      	bne.n	8004894 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d063      	beq.n	8004950 <HAL_RCC_OscConfig+0x2f0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d15f      	bne.n	8004950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e300      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d106      	bne.n	80048ac <HAL_RCC_OscConfig+0x24c>
 800489e:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e01d      	b.n	80048e8 <HAL_RCC_OscConfig+0x288>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x270>
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0x288>
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd fca4 	bl	800223c <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f6:	e010      	b.n	800491a <HAL_RCC_OscConfig+0x2ba>
 80048f8:	40021000 	.word	0x40021000
 80048fc:	08008998 	.word	0x08008998
 8004900:	20000018 	.word	0x20000018
 8004904:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd fc98 	bl	800223c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	; 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e2bd      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	4baf      	ldr	r3, [pc, #700]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2a8>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fc88 	bl	800223c <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd fc84 	bl	800223c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e2a9      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004942:	4ba5      	ldr	r3, [pc, #660]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x2d0>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d060      	beq.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x310>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d119      	bne.n	800499e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d116      	bne.n	800499e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004970:	4b99      	ldr	r3, [pc, #612]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_OscConfig+0x328>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e286      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004988:	4b93      	ldr	r3, [pc, #588]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	4990      	ldr	r1, [pc, #576]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	e040      	b.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a6:	4b8c      	ldr	r3, [pc, #560]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a8b      	ldr	r2, [pc, #556]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd fc43 	bl	800223c <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fd fc3f 	bl	800223c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e264      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049cc:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b7f      	ldr	r3, [pc, #508]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	497c      	ldr	r1, [pc, #496]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
 80049ec:	e018      	b.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b7a      	ldr	r3, [pc, #488]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a79      	ldr	r2, [pc, #484]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fd fc1f 	bl	800223c <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a02:	f7fd fc1b 	bl	800223c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e240      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a14:	4b70      	ldr	r3, [pc, #448]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01c      	beq.n	8004a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a34:	4b68      	ldr	r3, [pc, #416]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3a:	4a67      	ldr	r2, [pc, #412]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fd fbfa 	bl	800223c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fd fbf6 	bl	800223c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e21b      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a5e:	4b5e      	ldr	r3, [pc, #376]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ef      	beq.n	8004a4c <HAL_RCC_OscConfig+0x3ec>
 8004a6c:	e01b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6e:	4b5a      	ldr	r3, [pc, #360]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a74:	4a58      	ldr	r2, [pc, #352]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fd fbdd 	bl	800223c <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a86:	f7fd fbd9 	bl	800223c <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1fe      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a98:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1ef      	bne.n	8004a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a6 	beq.w	8004c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac4:	4b44      	ldr	r3, [pc, #272]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad0:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	4b3e      	ldr	r3, [pc, #248]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d118      	bne.n	8004b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aec:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af8:	f7fd fba0 	bl	800223c <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b00:	f7fd fb9c 	bl	800223c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e1c1      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b12:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4d8>
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b36:	e024      	b.n	8004b82 <HAL_RCC_OscConfig+0x522>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d110      	bne.n	8004b62 <HAL_RCC_OscConfig+0x502>
 8004b40:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b50:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b60:	e00f      	b.n	8004b82 <HAL_RCC_OscConfig+0x522>
 8004b62:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b7a:	f023 0304 	bic.w	r3, r3, #4
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fd fb57 	bl	800223c <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fd fb53 	bl	800223c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e176      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ed      	beq.n	8004b92 <HAL_RCC_OscConfig+0x532>
 8004bb6:	e01a      	b.n	8004bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fd fb40 	bl	800223c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bbe:	e00f      	b.n	8004be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fd fb3c 	bl	800223c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d906      	bls.n	8004be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e15f      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be0:	4baa      	ldr	r3, [pc, #680]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e8      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf4:	4ba5      	ldr	r3, [pc, #660]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	4aa4      	ldr	r2, [pc, #656]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d03c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01c      	beq.n	8004c4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c14:	4b9d      	ldr	r3, [pc, #628]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c1a:	4a9c      	ldr	r2, [pc, #624]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fd fb0a 	bl	800223c <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c2c:	f7fd fb06 	bl	800223c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e12b      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c3e:	4b93      	ldr	r3, [pc, #588]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ef      	beq.n	8004c2c <HAL_RCC_OscConfig+0x5cc>
 8004c4c:	e01b      	b.n	8004c86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c4e:	4b8f      	ldr	r3, [pc, #572]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c54:	4a8d      	ldr	r2, [pc, #564]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fd faed 	bl	800223c <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c66:	f7fd fae9 	bl	800223c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e10e      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c78:	4b84      	ldr	r3, [pc, #528]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ef      	bne.n	8004c66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8102 	beq.w	8004e94 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	f040 80c5 	bne.w	8004e24 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c9a:	4b7c      	ldr	r3, [pc, #496]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f003 0203 	and.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d12c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d123      	bne.n	8004d08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d11b      	bne.n	8004d08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d113      	bne.n	8004d08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	3b01      	subs	r3, #1
 8004cee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	3b01      	subs	r3, #1
 8004d02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d067      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d062      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0bb      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d1e:	4b5b      	ldr	r3, [pc, #364]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5a      	ldr	r2, [pc, #360]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d2a:	f7fd fa87 	bl	800223c <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fd fa83 	bl	800223c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0a8      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d44:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d50:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <HAL_RCC_OscConfig+0x830>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0112      	lsls	r2, r2, #4
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d6a:	0212      	lsls	r2, r2, #8
 8004d6c:	4311      	orrs	r1, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d72:	0852      	lsrs	r2, r2, #1
 8004d74:	3a01      	subs	r2, #1
 8004d76:	0552      	lsls	r2, r2, #21
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d7e:	0852      	lsrs	r2, r2, #1
 8004d80:	3a01      	subs	r2, #1
 8004d82:	0652      	lsls	r2, r2, #25
 8004d84:	4311      	orrs	r1, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d8a:	06d2      	lsls	r2, r2, #27
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	493f      	ldr	r1, [pc, #252]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d94:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004da0:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a39      	ldr	r2, [pc, #228]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dac:	f7fd fa46 	bl	800223c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fd fa42 	bl	800223c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e067      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dd2:	e05f      	b.n	8004e94 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e05e      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d157      	bne.n	8004e94 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004de4:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004df0:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dfc:	f7fd fa1e 	bl	800223c <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fd fa1a 	bl	800223c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e03f      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x7a4>
 8004e22:	e037      	b.n	8004e94 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d02d      	beq.n	8004e86 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e34:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e48:	f023 0303 	bic.w	r3, r3, #3
 8004e4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd f9ed 	bl	800223c <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fd f9e9 	bl	800223c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e00e      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e78:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <HAL_RCC_OscConfig+0x82c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x806>
 8004e84:	e006      	b.n	8004e94 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e005      	b.n	8004e96 <HAL_RCC_OscConfig+0x836>
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop

08004ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0c8      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b66      	ldr	r3, [pc, #408]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d910      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b63      	ldr	r3, [pc, #396]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 0207 	bic.w	r2, r3, #7
 8004eca:	4961      	ldr	r1, [pc, #388]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b5f      	ldr	r3, [pc, #380]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0b0      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d04c      	beq.n	8004f8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef8:	4b56      	ldr	r3, [pc, #344]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d121      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e09e      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f10:	4b50      	ldr	r3, [pc, #320]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d115      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e092      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f28:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e086      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e07e      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f48:	4b42      	ldr	r3, [pc, #264]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 0203 	bic.w	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	493f      	ldr	r1, [pc, #252]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5a:	f7fd f96f 	bl	800223c <HAL_GetTick>
 8004f5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f62:	f7fd f96b 	bl	800223c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e066      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f78:	4b36      	ldr	r3, [pc, #216]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 020c 	and.w	r2, r3, #12
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d1eb      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f96:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	492c      	ldr	r1, [pc, #176]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b29      	ldr	r3, [pc, #164]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d210      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b26      	ldr	r3, [pc, #152]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 0207 	bic.w	r2, r3, #7
 8004fbe:	4924      	ldr	r1, [pc, #144]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_RCC_ClockConfig+0x1b0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e036      	b.n	8005046 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4918      	ldr	r1, [pc, #96]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4910      	ldr	r1, [pc, #64]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005016:	f000 f825 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800501a:	4602      	mov	r2, r0
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCC_ClockConfig+0x1b4>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	490c      	ldr	r1, [pc, #48]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	5ccb      	ldrb	r3, [r1, r3]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd f8ae 	bl	800219c <HAL_InitTick>
 8005040:	4603      	mov	r3, r0
 8005042:	72fb      	strb	r3, [r7, #11]

  return status;
 8005044:	7afb      	ldrb	r3, [r7, #11]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40022000 	.word	0x40022000
 8005054:	40021000 	.word	0x40021000
 8005058:	08008998 	.word	0x08008998
 800505c:	20000018 	.word	0x20000018
 8005060:	2000001c 	.word	0x2000001c

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	b089      	sub	sp, #36	; 0x24
 8005068:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005072:	4b3e      	ldr	r3, [pc, #248]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800507c:	4b3b      	ldr	r3, [pc, #236]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x34>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d121      	bne.n	80050d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d11e      	bne.n	80050d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050a4:	4b31      	ldr	r3, [pc, #196]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 80050a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	e005      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050b4:	4b2d      	ldr	r3, [pc, #180]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050c0:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10d      	bne.n	80050ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d102      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050dc:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_RCC_GetSysClockFreq+0x110>)
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	e004      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050e8:	4b23      	ldr	r3, [pc, #140]	; (8005178 <HAL_RCC_GetSysClockFreq+0x114>)
 80050ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d134      	bne.n	800515c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0xa6>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d003      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0xac>
 8005108:	e005      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_RCC_GetSysClockFreq+0x110>)
 800510c:	617b      	str	r3, [r7, #20]
      break;
 800510e:	e005      	b.n	800511c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_RCC_GetSysClockFreq+0x114>)
 8005112:	617b      	str	r3, [r7, #20]
      break;
 8005114:	e002      	b.n	800511c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	617b      	str	r3, [r7, #20]
      break;
 800511a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	3301      	adds	r3, #1
 8005128:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	fb02 f203 	mul.w	r2, r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <HAL_RCC_GetSysClockFreq+0x108>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	0e5b      	lsrs	r3, r3, #25
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	3301      	adds	r3, #1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800515c:	69bb      	ldr	r3, [r7, #24]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3724      	adds	r7, #36	; 0x24
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	080089b0 	.word	0x080089b0
 8005174:	00f42400 	.word	0x00f42400
 8005178:	007a1200 	.word	0x007a1200

0800517c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <HAL_RCC_GetHCLKFreq+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000018 	.word	0x20000018

08005194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005198:	f7ff fff0 	bl	800517c <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0a1b      	lsrs	r3, r3, #8
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4904      	ldr	r1, [pc, #16]	; (80051bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000
 80051bc:	080089a8 	.word	0x080089a8

080051c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051c4:	f7ff ffda 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0adb      	lsrs	r3, r3, #11
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4904      	ldr	r1, [pc, #16]	; (80051e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	080089a8 	.word	0x080089a8

080051ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051f8:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005204:	f7ff f9c8 	bl	8004598 <HAL_PWREx_GetVoltageRange>
 8005208:	6178      	str	r0, [r7, #20]
 800520a:	e014      	b.n	8005236 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800520c:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	6593      	str	r3, [r2, #88]	; 0x58
 8005218:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005224:	f7ff f9b8 	bl	8004598 <HAL_PWREx_GetVoltageRange>
 8005228:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800522a:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005234:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523c:	d10b      	bne.n	8005256 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d919      	bls.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2ba0      	cmp	r3, #160	; 0xa0
 8005248:	d902      	bls.n	8005250 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800524a:	2302      	movs	r3, #2
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e013      	b.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005250:	2301      	movs	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e010      	b.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d902      	bls.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800525c:	2303      	movs	r3, #3
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e00a      	b.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d102      	bne.n	800526e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005268:	2302      	movs	r3, #2
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	e004      	b.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b70      	cmp	r3, #112	; 0x70
 8005272:	d101      	bne.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005274:	2301      	movs	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 0207 	bic.w	r2, r3, #7
 8005280:	4909      	ldr	r1, [pc, #36]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	d001      	beq.n	800529a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40022000 	.word	0x40022000

080052ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b4:	2300      	movs	r3, #0
 80052b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052b8:	2300      	movs	r3, #0
 80052ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d031      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052d0:	d01a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80052d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052d6:	d814      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052e0:	d10f      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80052e2:	4bac      	ldr	r3, [pc, #688]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4aab      	ldr	r2, [pc, #684]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052ee:	e00c      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f9cc 	bl	8005694 <RCCEx_PLLSAI1_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005300:	e003      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	74fb      	strb	r3, [r7, #19]
      break;
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005310:	4ba0      	ldr	r3, [pc, #640]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	499d      	ldr	r1, [pc, #628]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005326:	e001      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8099 	beq.w	800546c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800533e:	4b95      	ldr	r3, [pc, #596]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	4b8f      	ldr	r3, [pc, #572]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	4a8e      	ldr	r2, [pc, #568]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535e:	6593      	str	r3, [r2, #88]	; 0x58
 8005360:	4b8c      	ldr	r3, [pc, #560]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536c:	2301      	movs	r3, #1
 800536e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005370:	4b89      	ldr	r3, [pc, #548]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a88      	ldr	r2, [pc, #544]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800537c:	f7fc ff5e 	bl	800223c <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005382:	e009      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005384:	f7fc ff5a 	bl	800223c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d902      	bls.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	74fb      	strb	r3, [r7, #19]
        break;
 8005396:	e005      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005398:	4b7f      	ldr	r3, [pc, #508]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0ef      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d155      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053aa:	4b7a      	ldr	r3, [pc, #488]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01e      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d019      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c6:	4b73      	ldr	r3, [pc, #460]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d2:	4b70      	ldr	r3, [pc, #448]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	4a6e      	ldr	r2, [pc, #440]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e2:	4b6c      	ldr	r3, [pc, #432]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	4a6a      	ldr	r2, [pc, #424]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053f2:	4a68      	ldr	r2, [pc, #416]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d016      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fc ff1a 	bl	800223c <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540a:	e00b      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540c:	f7fc ff16 	bl	800223c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d902      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	74fb      	strb	r3, [r7, #19]
            break;
 8005422:	e006      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005424:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ec      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10b      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005438:	4b56      	ldr	r3, [pc, #344]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005446:	4953      	ldr	r1, [pc, #332]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800544e:	e004      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	74bb      	strb	r3, [r7, #18]
 8005454:	e001      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	7cfb      	ldrb	r3, [r7, #19]
 8005458:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800545a:	7c7b      	ldrb	r3, [r7, #17]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d105      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005460:	4b4c      	ldr	r3, [pc, #304]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	4a4b      	ldr	r2, [pc, #300]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005478:	4b46      	ldr	r3, [pc, #280]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f023 0203 	bic.w	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4943      	ldr	r1, [pc, #268]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800549a:	4b3e      	ldr	r3, [pc, #248]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f023 020c 	bic.w	r2, r3, #12
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	493a      	ldr	r1, [pc, #232]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054bc:	4b35      	ldr	r3, [pc, #212]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	4932      	ldr	r1, [pc, #200]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054de:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	4929      	ldr	r1, [pc, #164]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005500:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	4921      	ldr	r1, [pc, #132]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	4918      	ldr	r1, [pc, #96]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005544:	4b13      	ldr	r3, [pc, #76]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	4910      	ldr	r1, [pc, #64]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02c      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	4907      	ldr	r1, [pc, #28]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005584:	d10a      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005586:	4b03      	ldr	r3, [pc, #12]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	4a02      	ldr	r2, [pc, #8]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800558c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005590:	60d3      	str	r3, [r2, #12]
 8005592:	e015      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005594:	40021000 	.word	0x40021000
 8005598:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f871 	bl	8005694 <RCCEx_PLLSAI1_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d028      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055cc:	4b30      	ldr	r3, [pc, #192]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	492d      	ldr	r1, [pc, #180]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ea:	d106      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ec:	4b28      	ldr	r3, [pc, #160]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a27      	ldr	r2, [pc, #156]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f6:	60d3      	str	r3, [r2, #12]
 80055f8:	e011      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005602:	d10c      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	2101      	movs	r1, #1
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f842 	bl	8005694 <RCCEx_PLLSAI1_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01c      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800562a:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005638:	4915      	ldr	r1, [pc, #84]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f81f 	bl	8005694 <RCCEx_PLLSAI1_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	4904      	ldr	r1, [pc, #16]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005686:	7cbb      	ldrb	r3, [r7, #18]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40021000 	.word	0x40021000

08005694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056a2:	4b74      	ldr	r3, [pc, #464]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056ae:	4b71      	ldr	r3, [pc, #452]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10d      	bne.n	80056da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
       ||
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056c6:	4b6b      	ldr	r3, [pc, #428]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
       ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d047      	beq.n	800576a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
 80056de:	e044      	b.n	800576a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d018      	beq.n	800571a <RCCEx_PLLSAI1_Config+0x86>
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d825      	bhi.n	8005738 <RCCEx_PLLSAI1_Config+0xa4>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <RCCEx_PLLSAI1_Config+0x62>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d009      	beq.n	8005708 <RCCEx_PLLSAI1_Config+0x74>
 80056f4:	e020      	b.n	8005738 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056f6:	4b5f      	ldr	r3, [pc, #380]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11d      	bne.n	800573e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005706:	e01a      	b.n	800573e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005708:	4b5a      	ldr	r3, [pc, #360]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005718:	e013      	b.n	8005742 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800571a:	4b56      	ldr	r3, [pc, #344]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005726:	4b53      	ldr	r3, [pc, #332]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005736:	e006      	b.n	8005746 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e004      	b.n	8005748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005746:	bf00      	nop
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10d      	bne.n	800576a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800574e:	4b49      	ldr	r3, [pc, #292]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	430b      	orrs	r3, r1
 8005764:	4943      	ldr	r1, [pc, #268]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005766:	4313      	orrs	r3, r2
 8005768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d17c      	bne.n	800586a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005770:	4b40      	ldr	r3, [pc, #256]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800577a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577c:	f7fc fd5e 	bl	800223c <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005782:	e009      	b.n	8005798 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005784:	f7fc fd5a 	bl	800223c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	73fb      	strb	r3, [r7, #15]
        break;
 8005796:	e005      	b.n	80057a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005798:	4b36      	ldr	r3, [pc, #216]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ef      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d15f      	bne.n	800586a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d110      	bne.n	80057d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b0:	4b30      	ldr	r3, [pc, #192]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80057b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6892      	ldr	r2, [r2, #8]
 80057c0:	0211      	lsls	r1, r2, #8
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	06d2      	lsls	r2, r2, #27
 80057c8:	430a      	orrs	r2, r1
 80057ca:	492a      	ldr	r1, [pc, #168]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	610b      	str	r3, [r1, #16]
 80057d0:	e027      	b.n	8005822 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d112      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6892      	ldr	r2, [r2, #8]
 80057e8:	0211      	lsls	r1, r2, #8
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6912      	ldr	r2, [r2, #16]
 80057ee:	0852      	lsrs	r2, r2, #1
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0552      	lsls	r2, r2, #21
 80057f4:	430a      	orrs	r2, r1
 80057f6:	491f      	ldr	r1, [pc, #124]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	610b      	str	r3, [r1, #16]
 80057fc:	e011      	b.n	8005822 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005806:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	0211      	lsls	r1, r2, #8
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6952      	ldr	r2, [r2, #20]
 8005814:	0852      	lsrs	r2, r2, #1
 8005816:	3a01      	subs	r2, #1
 8005818:	0652      	lsls	r2, r2, #25
 800581a:	430a      	orrs	r2, r1
 800581c:	4915      	ldr	r1, [pc, #84]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581e:	4313      	orrs	r3, r2
 8005820:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005822:	4b14      	ldr	r3, [pc, #80]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a13      	ldr	r2, [pc, #76]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fc fd05 	bl	800223c <HAL_GetTick>
 8005832:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005834:	e009      	b.n	800584a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005836:	f7fc fd01 	bl	800223c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d902      	bls.n	800584a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	73fb      	strb	r3, [r7, #15]
          break;
 8005848:	e005      	b.n	8005856 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ef      	beq.n	8005836 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	4903      	ldr	r1, [pc, #12]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000

08005878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e095      	b.n	80059b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d108      	bne.n	80058a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589a:	d009      	beq.n	80058b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	61da      	str	r2, [r3, #28]
 80058a2:	e005      	b.n	80058b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fc f92a 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f0:	d902      	bls.n	80058f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e002      	b.n	80058fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005906:	d007      	beq.n	8005918 <HAL_SPI_Init+0xa0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595a:	ea42 0103 	orr.w	r1, r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	0c1b      	lsrs	r3, r3, #16
 8005974:	f003 0204 	and.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005994:	ea42 0103 	orr.w	r1, r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_SPI_TransmitReceive_IT+0x20>
 80059dc:	2302      	movs	r3, #2
 80059de:	e091      	b.n	8005b04 <HAL_SPI_TransmitReceive_IT+0x144>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f6:	7dbb      	ldrb	r3, [r7, #22]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d00d      	beq.n	8005a18 <HAL_SPI_TransmitReceive_IT+0x58>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a02:	d106      	bne.n	8005a12 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_TransmitReceive_IT+0x52>
 8005a0c:	7dbb      	ldrb	r3, [r7, #22]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
 8005a14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a16:	e070      	b.n	8005afa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005a24:	887b      	ldrh	r3, [r7, #2]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a2e:	e064      	b.n	8005afa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d003      	beq.n	8005a44 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2205      	movs	r2, #5
 8005a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	887a      	ldrh	r2, [r7, #2]
 8005a54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	887a      	ldrh	r2, [r7, #2]
 8005a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a7a:	d906      	bls.n	8005a8a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005a80:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50
 8005a88:	e005      	b.n	8005a96 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005a8e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005a94:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a9e:	d802      	bhi.n	8005aa6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d908      	bls.n	8005ab8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e007      	b.n	8005ac8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ac6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d008      	beq.n	8005af8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e000      	b.n	8005afa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005af8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	08005ec3 	.word	0x08005ec3
 8005b14:	08005f29 	.word	0x08005f29
 8005b18:	08005d73 	.word	0x08005d73
 8005b1c:	08005e31 	.word	0x08005e31

08005b20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	099b      	lsrs	r3, r3, #6
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10f      	bne.n	8005b64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	099b      	lsrs	r3, r3, #6
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
    return;
 8005b62:	e0d7      	b.n	8005d14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_SPI_IRQHandler+0x66>
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	09db      	lsrs	r3, r3, #7
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4798      	blx	r3
    return;
 8005b84:	e0c6      	b.n	8005d14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10c      	bne.n	8005bac <HAL_SPI_IRQHandler+0x8c>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	099b      	lsrs	r3, r3, #6
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80b4 	beq.w	8005d14 <HAL_SPI_IRQHandler+0x1f4>
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80ad 	beq.w	8005d14 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	099b      	lsrs	r3, r3, #6
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d023      	beq.n	8005c0e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d011      	beq.n	8005bf6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	f043 0204 	orr.w	r2, r3, #4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	e00b      	b.n	8005c0e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	693b      	ldr	r3, [r7, #16]
        return;
 8005c0c:	e082      	b.n	8005d14 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c54:	f043 0208 	orr.w	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04f      	beq.n	8005d12 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c80:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_SPI_IRQHandler+0x17e>
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d034      	beq.n	8005d08 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0203 	bic.w	r2, r2, #3
 8005cac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d011      	beq.n	8005cda <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <HAL_SPI_IRQHandler+0x1fc>)
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe f9ac 	bl	8004020 <HAL_DMA_Abort_IT>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d016      	beq.n	8005d10 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	4a0d      	ldr	r2, [pc, #52]	; (8005d1c <HAL_SPI_IRQHandler+0x1fc>)
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe f996 	bl	8004020 <HAL_DMA_Abort_IT>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005d06:	e003      	b.n	8005d10 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f813 	bl	8005d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d0e:	e000      	b.n	8005d12 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d10:	bf00      	nop
    return;
 8005d12:	bf00      	nop
  }
}
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	08005d49 	.word	0x08005d49

08005d20 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff ffe5 	bl	8005d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d923      	bls.n	8005dce <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	b292      	uxth	r2, r2
 8005d92:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b02      	subs	r3, #2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d11f      	bne.n	8005dfc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	e016      	b.n	8005dfc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f103 020c 	add.w	r2, r3, #12
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa10 	bl	8006248 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d912      	bls.n	8005e68 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	1c9a      	adds	r2, r3, #2
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b02      	subs	r3, #2
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e66:	e012      	b.n	8005e8e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d110      	bne.n	8005eba <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9c7 	bl	8006248 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10f      	bne.n	8005f20 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f994 	bl	8006248 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d110      	bne.n	8005f80 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f6c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f964 	bl	8006248 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f98:	f7fc f950 	bl	800223c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fa8:	f7fc f948 	bl	800223c <HAL_GetTick>
 8005fac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fae:	4b39      	ldr	r3, [pc, #228]	; (8006094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	015b      	lsls	r3, r3, #5
 8005fb4:	0d1b      	lsrs	r3, r3, #20
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fbe:	e054      	b.n	800606a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d050      	beq.n	800606a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fc8:	f7fc f938 	bl	800223c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d902      	bls.n	8005fde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d13d      	bne.n	800605a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff6:	d111      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006000:	d004      	beq.n	800600c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600a:	d107      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006024:	d10f      	bne.n	8006046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e017      	b.n	800608a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	3b01      	subs	r3, #1
 8006068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	bf0c      	ite	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	2300      	movne	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	429a      	cmp	r2, r3
 8006086:	d19b      	bne.n	8005fc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000018 	.word	0x20000018

08006098 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060a6:	f7fc f8c9 	bl	800223c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	4413      	add	r3, r2
 80060b4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060b6:	f7fc f8c1 	bl	800223c <HAL_GetTick>
 80060ba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060bc:	4b3e      	ldr	r3, [pc, #248]	; (80061b8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00da      	lsls	r2, r3, #3
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	0d1b      	lsrs	r3, r3, #20
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80060d4:	e062      	b.n	800619c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060dc:	d109      	bne.n	80060f2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80060f0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d050      	beq.n	800619c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060fa:	f7fc f89f 	bl	800223c <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	429a      	cmp	r2, r3
 8006108:	d902      	bls.n	8006110 <SPI_WaitFifoStateUntilTimeout+0x78>
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d13d      	bne.n	800618c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800611e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006128:	d111      	bne.n	800614e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006132:	d004      	beq.n	800613e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613c:	d107      	bne.n	800614e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006156:	d10f      	bne.n	8006178 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006176:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e010      	b.n	80061ae <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3b01      	subs	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4013      	ands	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d194      	bne.n	80060d6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000018 	.word	0x20000018

080061bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ff5f 	bl	8006098 <SPI_WaitFifoStateUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e027      	b.n	8006240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fec4 	bl	8005f88 <SPI_WaitFlagStateUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e014      	b.n	8006240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ff38 	bl	8006098 <SPI_WaitFifoStateUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e000      	b.n	8006240 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006250:	f7fb fff4 	bl	800223c <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0220 	bic.w	r2, r2, #32
 8006264:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	2164      	movs	r1, #100	; 0x64
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ffa6 	bl	80061bc <SPI_EndRxTxTransaction>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006286:	2b00      	cmp	r3, #0
 8006288:	d115      	bne.n	80062b6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b04      	cmp	r3, #4
 8006294:	d107      	bne.n	80062a6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fd3e 	bl	8005d20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80062a4:	e00e      	b.n	80062c4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fa fa38 	bl	8000724 <HAL_SPI_TxRxCpltCallback>
}
 80062b4:	e006      	b.n	80062c4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fd38 	bl	8005d34 <HAL_SPI_ErrorCallback>
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e03b      	b.n	800635c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <HAL_TIM_Base_Start_IT+0x9c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIM_Base_Start_IT+0x4e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d004      	beq.n	800631a <HAL_TIM_Base_Start_IT+0x4e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIM_Base_Start_IT+0xa0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d115      	bne.n	8006346 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <HAL_TIM_Base_Start_IT+0xa4>)
 8006322:	4013      	ands	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b06      	cmp	r3, #6
 800632a:	d015      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x8c>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006332:	d011      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006344:	e008      	b.n	8006358 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	e000      	b.n	800635a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40014000 	.word	0x40014000
 8006370:	00010007 	.word	0x00010007

08006374 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	f241 1311 	movw	r3, #4369	; 0x1111
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <HAL_TIM_Base_Stop_IT+0x48>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	f240 4344 	movw	r3, #1092	; 0x444
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d107      	bne.n	80063bc <HAL_TIM_Base_Stop_IT+0x48>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e049      	b.n	8006478 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fb fbdf 	bl	8001bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 fc7f 	bl	8006d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_TIM_PWM_Start_IT+0x24>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e03c      	b.n	800651e <HAL_TIM_PWM_Start_IT+0x9e>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d109      	bne.n	80064be <HAL_TIM_PWM_Start_IT+0x3e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	bf14      	ite	ne
 80064b6:	2301      	movne	r3, #1
 80064b8:	2300      	moveq	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	e02f      	b.n	800651e <HAL_TIM_PWM_Start_IT+0x9e>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d109      	bne.n	80064d8 <HAL_TIM_PWM_Start_IT+0x58>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	bf14      	ite	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	2300      	moveq	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	e022      	b.n	800651e <HAL_TIM_PWM_Start_IT+0x9e>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b0c      	cmp	r3, #12
 80064dc:	d109      	bne.n	80064f2 <HAL_TIM_PWM_Start_IT+0x72>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	e015      	b.n	800651e <HAL_TIM_PWM_Start_IT+0x9e>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d109      	bne.n	800650c <HAL_TIM_PWM_Start_IT+0x8c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e008      	b.n	800651e <HAL_TIM_PWM_Start_IT+0x9e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0c4      	b.n	80066b0 <HAL_TIM_PWM_Start_IT+0x230>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <HAL_TIM_PWM_Start_IT+0xb6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006534:	e023      	b.n	800657e <HAL_TIM_PWM_Start_IT+0xfe>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b04      	cmp	r3, #4
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start_IT+0xc6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006544:	e01b      	b.n	800657e <HAL_TIM_PWM_Start_IT+0xfe>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start_IT+0xd6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006554:	e013      	b.n	800657e <HAL_TIM_PWM_Start_IT+0xfe>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b0c      	cmp	r3, #12
 800655a:	d104      	bne.n	8006566 <HAL_TIM_PWM_Start_IT+0xe6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006564:	e00b      	b.n	800657e <HAL_TIM_PWM_Start_IT+0xfe>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b10      	cmp	r3, #16
 800656a:	d104      	bne.n	8006576 <HAL_TIM_PWM_Start_IT+0xf6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006574:	e003      	b.n	800657e <HAL_TIM_PWM_Start_IT+0xfe>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b0c      	cmp	r3, #12
 8006582:	d841      	bhi.n	8006608 <HAL_TIM_PWM_Start_IT+0x188>
 8006584:	a201      	add	r2, pc, #4	; (adr r2, 800658c <HAL_TIM_PWM_Start_IT+0x10c>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	080065c1 	.word	0x080065c1
 8006590:	08006609 	.word	0x08006609
 8006594:	08006609 	.word	0x08006609
 8006598:	08006609 	.word	0x08006609
 800659c:	080065d3 	.word	0x080065d3
 80065a0:	08006609 	.word	0x08006609
 80065a4:	08006609 	.word	0x08006609
 80065a8:	08006609 	.word	0x08006609
 80065ac:	080065e5 	.word	0x080065e5
 80065b0:	08006609 	.word	0x08006609
 80065b4:	08006609 	.word	0x08006609
 80065b8:	08006609 	.word	0x08006609
 80065bc:	080065f7 	.word	0x080065f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0202 	orr.w	r2, r2, #2
 80065ce:	60da      	str	r2, [r3, #12]
      break;
 80065d0:	e01b      	b.n	800660a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0204 	orr.w	r2, r2, #4
 80065e0:	60da      	str	r2, [r3, #12]
      break;
 80065e2:	e012      	b.n	800660a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0208 	orr.w	r2, r2, #8
 80065f2:	60da      	str	r2, [r3, #12]
      break;
 80065f4:	e009      	b.n	800660a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0210 	orr.w	r2, r2, #16
 8006604:	60da      	str	r2, [r3, #12]
      break;
 8006606:	e000      	b.n	800660a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8006608:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fe60 	bl	80072d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <HAL_TIM_PWM_Start_IT+0x238>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_TIM_PWM_Start_IT+0x1b6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a25      	ldr	r2, [pc, #148]	; (80066bc <HAL_TIM_PWM_Start_IT+0x23c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_TIM_PWM_Start_IT+0x1b6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a23      	ldr	r2, [pc, #140]	; (80066c0 <HAL_TIM_PWM_Start_IT+0x240>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_Start_IT+0x1ba>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_TIM_PWM_Start_IT+0x1bc>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800664e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <HAL_TIM_PWM_Start_IT+0x238>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d009      	beq.n	800666e <HAL_TIM_PWM_Start_IT+0x1ee>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006662:	d004      	beq.n	800666e <HAL_TIM_PWM_Start_IT+0x1ee>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a14      	ldr	r2, [pc, #80]	; (80066bc <HAL_TIM_PWM_Start_IT+0x23c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d115      	bne.n	800669a <HAL_TIM_PWM_Start_IT+0x21a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <HAL_TIM_PWM_Start_IT+0x244>)
 8006676:	4013      	ands	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b06      	cmp	r3, #6
 800667e:	d015      	beq.n	80066ac <HAL_TIM_PWM_Start_IT+0x22c>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d011      	beq.n	80066ac <HAL_TIM_PWM_Start_IT+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	e008      	b.n	80066ac <HAL_TIM_PWM_Start_IT+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e000      	b.n	80066ae <HAL_TIM_PWM_Start_IT+0x22e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	00010007 	.word	0x00010007

080066c8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b0c      	cmp	r3, #12
 80066d6:	d841      	bhi.n	800675c <HAL_TIM_PWM_Stop_IT+0x94>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <HAL_TIM_PWM_Stop_IT+0x18>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	08006715 	.word	0x08006715
 80066e4:	0800675d 	.word	0x0800675d
 80066e8:	0800675d 	.word	0x0800675d
 80066ec:	0800675d 	.word	0x0800675d
 80066f0:	08006727 	.word	0x08006727
 80066f4:	0800675d 	.word	0x0800675d
 80066f8:	0800675d 	.word	0x0800675d
 80066fc:	0800675d 	.word	0x0800675d
 8006700:	08006739 	.word	0x08006739
 8006704:	0800675d 	.word	0x0800675d
 8006708:	0800675d 	.word	0x0800675d
 800670c:	0800675d 	.word	0x0800675d
 8006710:	0800674b 	.word	0x0800674b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0202 	bic.w	r2, r2, #2
 8006722:	60da      	str	r2, [r3, #12]
      break;
 8006724:	e01b      	b.n	800675e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0204 	bic.w	r2, r2, #4
 8006734:	60da      	str	r2, [r3, #12]
      break;
 8006736:	e012      	b.n	800675e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0208 	bic.w	r2, r2, #8
 8006746:	60da      	str	r2, [r3, #12]
      break;
 8006748:	e009      	b.n	800675e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0210 	bic.w	r2, r2, #16
 8006758:	60da      	str	r2, [r3, #12]
      break;
 800675a:	e000      	b.n	800675e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800675c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2200      	movs	r2, #0
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fdb6 	bl	80072d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a39      	ldr	r2, [pc, #228]	; (8006858 <HAL_TIM_PWM_Stop_IT+0x190>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_TIM_PWM_Stop_IT+0xc2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a38      	ldr	r2, [pc, #224]	; (800685c <HAL_TIM_PWM_Stop_IT+0x194>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_TIM_PWM_Stop_IT+0xc2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a36      	ldr	r2, [pc, #216]	; (8006860 <HAL_TIM_PWM_Stop_IT+0x198>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_TIM_PWM_Stop_IT+0xc6>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <HAL_TIM_PWM_Stop_IT+0xc8>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d017      	beq.n	80067c4 <HAL_TIM_PWM_Stop_IT+0xfc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6a1a      	ldr	r2, [r3, #32]
 800679a:	f241 1311 	movw	r3, #4369	; 0x1111
 800679e:	4013      	ands	r3, r2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10f      	bne.n	80067c4 <HAL_TIM_PWM_Stop_IT+0xfc>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	f240 4344 	movw	r3, #1092	; 0x444
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <HAL_TIM_PWM_Stop_IT+0xfc>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10f      	bne.n	80067f4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f240 4344 	movw	r3, #1092	; 0x444
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <HAL_TIM_PWM_Stop_IT+0x13c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006802:	e023      	b.n	800684c <HAL_TIM_PWM_Stop_IT+0x184>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d104      	bne.n	8006814 <HAL_TIM_PWM_Stop_IT+0x14c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006812:	e01b      	b.n	800684c <HAL_TIM_PWM_Stop_IT+0x184>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b08      	cmp	r3, #8
 8006818:	d104      	bne.n	8006824 <HAL_TIM_PWM_Stop_IT+0x15c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006822:	e013      	b.n	800684c <HAL_TIM_PWM_Stop_IT+0x184>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b0c      	cmp	r3, #12
 8006828:	d104      	bne.n	8006834 <HAL_TIM_PWM_Stop_IT+0x16c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006832:	e00b      	b.n	800684c <HAL_TIM_PWM_Stop_IT+0x184>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b10      	cmp	r3, #16
 8006838:	d104      	bne.n	8006844 <HAL_TIM_PWM_Stop_IT+0x17c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006842:	e003      	b.n	800684c <HAL_TIM_PWM_Stop_IT+0x184>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40012c00 	.word	0x40012c00
 800685c:	40014000 	.word	0x40014000
 8006860:	40014400 	.word	0x40014400

08006864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d122      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0202 	mvn.w	r2, #2
 8006890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa16 	bl	8006cd8 <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa08 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa19 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0204 	mvn.w	r2, #4
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9ec 	bl	8006cd8 <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f9de 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f9ef 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b08      	cmp	r3, #8
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0208 	mvn.w	r2, #8
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2204      	movs	r2, #4
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9c2 	bl	8006cd8 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f9b4 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9c5 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b10      	cmp	r3, #16
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b10      	cmp	r3, #16
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0210 	mvn.w	r2, #16
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2208      	movs	r2, #8
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f998 	bl	8006cd8 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f98a 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f99b 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10e      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0201 	mvn.w	r2, #1
 80069e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fa fb48 	bl	8001078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d10e      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d107      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fed8 	bl	80077c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d10e      	bne.n	8006a42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d107      	bne.n	8006a42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fecb 	bl	80077d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d10e      	bne.n	8006a6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d107      	bne.n	8006a6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f949 	bl	8006d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d10e      	bne.n	8006a9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d107      	bne.n	8006a9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f06f 0220 	mvn.w	r2, #32
 8006a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fe8b 	bl	80077b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e0fd      	b.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x216>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b14      	cmp	r3, #20
 8006aca:	f200 80f0 	bhi.w	8006cae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b29 	.word	0x08006b29
 8006ad8:	08006caf 	.word	0x08006caf
 8006adc:	08006caf 	.word	0x08006caf
 8006ae0:	08006caf 	.word	0x08006caf
 8006ae4:	08006b69 	.word	0x08006b69
 8006ae8:	08006caf 	.word	0x08006caf
 8006aec:	08006caf 	.word	0x08006caf
 8006af0:	08006caf 	.word	0x08006caf
 8006af4:	08006bab 	.word	0x08006bab
 8006af8:	08006caf 	.word	0x08006caf
 8006afc:	08006caf 	.word	0x08006caf
 8006b00:	08006caf 	.word	0x08006caf
 8006b04:	08006beb 	.word	0x08006beb
 8006b08:	08006caf 	.word	0x08006caf
 8006b0c:	08006caf 	.word	0x08006caf
 8006b10:	08006caf 	.word	0x08006caf
 8006b14:	08006c2d 	.word	0x08006c2d
 8006b18:	08006caf 	.word	0x08006caf
 8006b1c:	08006caf 	.word	0x08006caf
 8006b20:	08006caf 	.word	0x08006caf
 8006b24:	08006c6d 	.word	0x08006c6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f954 	bl	8006ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0208 	orr.w	r2, r2, #8
 8006b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0204 	bic.w	r2, r2, #4
 8006b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6999      	ldr	r1, [r3, #24]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	619a      	str	r2, [r3, #24]
      break;
 8006b66:	e0a3      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f9b0 	bl	8006ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6999      	ldr	r1, [r3, #24]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	021a      	lsls	r2, r3, #8
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	619a      	str	r2, [r3, #24]
      break;
 8006ba8:	e082      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fa09 	bl	8006fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0208 	orr.w	r2, r2, #8
 8006bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0204 	bic.w	r2, r2, #4
 8006bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69d9      	ldr	r1, [r3, #28]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	61da      	str	r2, [r3, #28]
      break;
 8006be8:	e062      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fa61 	bl	80070b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69d9      	ldr	r1, [r3, #28]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	021a      	lsls	r2, r3, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	61da      	str	r2, [r3, #28]
      break;
 8006c2a:	e041      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fa9e 	bl	8007174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0208 	orr.w	r2, r2, #8
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0204 	bic.w	r2, r2, #4
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c6a:	e021      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fad6 	bl	8007224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	021a      	lsls	r2, r3, #8
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cac:	e000      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006cae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <TIM_Base_SetConfig+0xbc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_Base_SetConfig+0x20>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d32:	d108      	bne.n	8006d46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a21      	ldr	r2, [pc, #132]	; (8006dd0 <TIM_Base_SetConfig+0xbc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_Base_SetConfig+0x52>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d007      	beq.n	8006d66 <TIM_Base_SetConfig+0x52>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <TIM_Base_SetConfig+0xc0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_Base_SetConfig+0x52>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <TIM_Base_SetConfig+0xc4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d108      	bne.n	8006d78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a0c      	ldr	r2, [pc, #48]	; (8006dd0 <TIM_Base_SetConfig+0xbc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0xa0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a0b      	ldr	r2, [pc, #44]	; (8006dd4 <TIM_Base_SetConfig+0xc0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0xa0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <TIM_Base_SetConfig+0xc4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d103      	bne.n	8006dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	615a      	str	r2, [r3, #20]
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400

08006ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0201 	bic.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0303 	bic.w	r3, r3, #3
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 0302 	bic.w	r3, r3, #2
 8006e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a24      	ldr	r2, [pc, #144]	; (8006ec8 <TIM_OC1_SetConfig+0xec>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d007      	beq.n	8006e4c <TIM_OC1_SetConfig+0x70>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a23      	ldr	r2, [pc, #140]	; (8006ecc <TIM_OC1_SetConfig+0xf0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC1_SetConfig+0x70>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <TIM_OC1_SetConfig+0xf4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d10c      	bne.n	8006e66 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0308 	bic.w	r3, r3, #8
 8006e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f023 0304 	bic.w	r3, r3, #4
 8006e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <TIM_OC1_SetConfig+0xec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d007      	beq.n	8006e7e <TIM_OC1_SetConfig+0xa2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <TIM_OC1_SetConfig+0xf0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_OC1_SetConfig+0xa2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <TIM_OC1_SetConfig+0xf4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d111      	bne.n	8006ea2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	621a      	str	r2, [r3, #32]
}
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	40012c00 	.word	0x40012c00
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400

08006ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f023 0210 	bic.w	r2, r3, #16
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0320 	bic.w	r3, r3, #32
 8006f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a22      	ldr	r2, [pc, #136]	; (8006fbc <TIM_OC2_SetConfig+0xe8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d10d      	bne.n	8006f54 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <TIM_OC2_SetConfig+0xe8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_OC2_SetConfig+0x98>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a18      	ldr	r2, [pc, #96]	; (8006fc0 <TIM_OC2_SetConfig+0xec>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC2_SetConfig+0x98>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <TIM_OC2_SetConfig+0xf0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d113      	bne.n	8006f94 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400

08006fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a21      	ldr	r2, [pc, #132]	; (80070ac <TIM_OC3_SetConfig+0xe4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d10d      	bne.n	8007046 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a18      	ldr	r2, [pc, #96]	; (80070ac <TIM_OC3_SetConfig+0xe4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d007      	beq.n	800705e <TIM_OC3_SetConfig+0x96>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <TIM_OC3_SetConfig+0xe8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_OC3_SetConfig+0x96>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <TIM_OC3_SetConfig+0xec>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d113      	bne.n	8007086 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40014400 	.word	0x40014400

080070b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a14      	ldr	r2, [pc, #80]	; (8007168 <TIM_OC4_SetConfig+0xb0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_OC4_SetConfig+0x74>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a13      	ldr	r2, [pc, #76]	; (800716c <TIM_OC4_SetConfig+0xb4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_OC4_SetConfig+0x74>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <TIM_OC4_SetConfig+0xb8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d109      	bne.n	8007140 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	019b      	lsls	r3, r3, #6
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40014000 	.word	0x40014000
 8007170:	40014400 	.word	0x40014400

08007174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a13      	ldr	r2, [pc, #76]	; (8007218 <TIM_OC5_SetConfig+0xa4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d007      	beq.n	80071de <TIM_OC5_SetConfig+0x6a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a12      	ldr	r2, [pc, #72]	; (800721c <TIM_OC5_SetConfig+0xa8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d003      	beq.n	80071de <TIM_OC5_SetConfig+0x6a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a11      	ldr	r2, [pc, #68]	; (8007220 <TIM_OC5_SetConfig+0xac>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d109      	bne.n	80071f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	621a      	str	r2, [r3, #32]
}
 800720c:	bf00      	nop
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400

08007224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	051b      	lsls	r3, r3, #20
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a14      	ldr	r2, [pc, #80]	; (80072cc <TIM_OC6_SetConfig+0xa8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_OC6_SetConfig+0x6c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <TIM_OC6_SetConfig+0xac>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_OC6_SetConfig+0x6c>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a12      	ldr	r2, [pc, #72]	; (80072d4 <TIM_OC6_SetConfig+0xb0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d109      	bne.n	80072a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007296:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40014400 	.word	0x40014400

080072d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2201      	movs	r2, #1
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a1a      	ldr	r2, [r3, #32]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	43db      	mvns	r3, r3
 80072fa:	401a      	ands	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	fa01 f303 	lsl.w	r3, r1, r3
 8007310:	431a      	orrs	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <HAL_TIMEx_PWMN_Start_IT+0x24>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	bf14      	ite	ne
 8007340:	2301      	movne	r3, #1
 8007342:	2300      	moveq	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	e022      	b.n	800738e <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d109      	bne.n	8007362 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b01      	cmp	r3, #1
 8007358:	bf14      	ite	ne
 800735a:	2301      	movne	r3, #1
 800735c:	2300      	moveq	r3, #0
 800735e:	b2db      	uxtb	r3, r3
 8007360:	e015      	b.n	800738e <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b08      	cmp	r3, #8
 8007366:	d109      	bne.n	800737c <HAL_TIMEx_PWMN_Start_IT+0x58>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e008      	b.n	800738e <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b01      	cmp	r3, #1
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e08b      	b.n	80074ae <HAL_TIMEx_PWMN_Start_IT+0x18a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <HAL_TIMEx_PWMN_Start_IT+0x82>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a4:	e013      	b.n	80073ce <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d104      	bne.n	80073b6 <HAL_TIMEx_PWMN_Start_IT+0x92>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b4:	e00b      	b.n	80073ce <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d104      	bne.n	80073c6 <HAL_TIMEx_PWMN_Start_IT+0xa2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073c4:	e003      	b.n	80073ce <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d01b      	beq.n	800740c <HAL_TIMEx_PWMN_Start_IT+0xe8>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d821      	bhi.n	800741e <HAL_TIMEx_PWMN_Start_IT+0xfa>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_TIMEx_PWMN_Start_IT+0xc4>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d009      	beq.n	80073fa <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80073e6:	e01a      	b.n	800741e <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0202 	orr.w	r2, r2, #2
 80073f6:	60da      	str	r2, [r3, #12]
      break;
 80073f8:	e012      	b.n	8007420 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0204 	orr.w	r2, r2, #4
 8007408:	60da      	str	r2, [r3, #12]
      break;
 800740a:	e009      	b.n	8007420 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0208 	orr.w	r2, r2, #8
 800741a:	60da      	str	r2, [r3, #12]
      break;
 800741c:	e000      	b.n	8007420 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 800741e:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800742e:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2204      	movs	r2, #4
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 f9d7 	bl	80077ec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800744c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a19      	ldr	r2, [pc, #100]	; (80074b8 <HAL_TIMEx_PWMN_Start_IT+0x194>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_TIMEx_PWMN_Start_IT+0x148>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d004      	beq.n	800746c <HAL_TIMEx_PWMN_Start_IT+0x148>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <HAL_TIMEx_PWMN_Start_IT+0x198>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d115      	bne.n	8007498 <HAL_TIMEx_PWMN_Start_IT+0x174>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <HAL_TIMEx_PWMN_Start_IT+0x19c>)
 8007474:	4013      	ands	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b06      	cmp	r3, #6
 800747c:	d015      	beq.n	80074aa <HAL_TIMEx_PWMN_Start_IT+0x186>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007484:	d011      	beq.n	80074aa <HAL_TIMEx_PWMN_Start_IT+0x186>
    {
      __HAL_TIM_ENABLE(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007496:	e008      	b.n	80074aa <HAL_TIMEx_PWMN_Start_IT+0x186>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	e000      	b.n	80074ac <HAL_TIMEx_PWMN_Start_IT+0x188>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40014000 	.word	0x40014000
 80074c0:	00010007 	.word	0x00010007

080074c4 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d01b      	beq.n	800750c <HAL_TIMEx_PWMN_Stop_IT+0x48>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d821      	bhi.n	800751e <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_TIMEx_PWMN_Stop_IT+0x24>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d009      	beq.n	80074fa <HAL_TIMEx_PWMN_Stop_IT+0x36>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80074e6:	e01a      	b.n	800751e <HAL_TIMEx_PWMN_Stop_IT+0x5a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0202 	bic.w	r2, r2, #2
 80074f6:	60da      	str	r2, [r3, #12]
      break;
 80074f8:	e012      	b.n	8007520 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0204 	bic.w	r2, r2, #4
 8007508:	60da      	str	r2, [r3, #12]
      break;
 800750a:	e009      	b.n	8007520 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0208 	bic.w	r2, r2, #8
 800751a:	60da      	str	r2, [r3, #12]
      break;
 800751c:	e000      	b.n	8007520 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      break;
 800751e:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f95f 	bl	80077ec <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f240 4344 	movw	r3, #1092	; 0x444
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d107      	bne.n	8007552 <HAL_TIMEx_PWMN_Stop_IT+0x8e>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007550:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6a1a      	ldr	r2, [r3, #32]
 8007558:	f241 1311 	movw	r3, #4369	; 0x1111
 800755c:	4013      	ands	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10f      	bne.n	8007582 <HAL_TIMEx_PWMN_Stop_IT+0xbe>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	f240 4344 	movw	r3, #1092	; 0x444
 800756c:	4013      	ands	r3, r2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d107      	bne.n	8007582 <HAL_TIMEx_PWMN_Stop_IT+0xbe>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007580:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a1a      	ldr	r2, [r3, #32]
 8007588:	f241 1311 	movw	r3, #4369	; 0x1111
 800758c:	4013      	ands	r3, r2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10f      	bne.n	80075b2 <HAL_TIMEx_PWMN_Stop_IT+0xee>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a1a      	ldr	r2, [r3, #32]
 8007598:	f240 4344 	movw	r3, #1092	; 0x444
 800759c:	4013      	ands	r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <HAL_TIMEx_PWMN_Stop_IT+0xee>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <HAL_TIMEx_PWMN_Stop_IT+0xfe>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c0:	e013      	b.n	80075ea <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d104      	bne.n	80075d2 <HAL_TIMEx_PWMN_Stop_IT+0x10e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075d0:	e00b      	b.n	80075ea <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d104      	bne.n	80075e2 <HAL_TIMEx_PWMN_Stop_IT+0x11e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075e0:	e003      	b.n	80075ea <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007608:	2302      	movs	r3, #2
 800760a:	e04f      	b.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d108      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800763c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007674:	d004      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a10      	ldr	r2, [pc, #64]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d10c      	bne.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4313      	orrs	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40014000 	.word	0x40014000

080076c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076d8:	2302      	movs	r3, #2
 80076da:	e060      	b.n	800779e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a14      	ldr	r2, [pc, #80]	; (80077ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d115      	bne.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	051b      	lsls	r3, r3, #20
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40012c00 	.word	0x40012c00

080077b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2204      	movs	r2, #4
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1a      	ldr	r2, [r3, #32]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	fa01 f303 	lsl.w	r3, r1, r3
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	621a      	str	r2, [r3, #32]
}
 800782a:	bf00      	nop
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e040      	b.n	80078ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784c:	2b00      	cmp	r3, #0
 800784e:	d106      	bne.n	800785e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fa fa2b 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	; 0x24
 8007862:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fb1b 	bl	8007eb0 <UART_SetConfig>
 800787a:	4603      	mov	r3, r0
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e022      	b.n	80078ca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fd1b 	bl	80082c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fda2 	bl	800840c <UART_CheckIdleState>
 80078c8:	4603      	mov	r3, r0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d166      	bne.n	80079b8 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <HAL_UART_Transmit_DMA+0x22>
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e05f      	b.n	80079ba <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_UART_Transmit_DMA+0x34>
 8007904:	2302      	movs	r3, #2
 8007906:	e058      	b.n	80079ba <HAL_UART_Transmit_DMA+0xe6>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d02b      	beq.n	8007994 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007940:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <HAL_UART_Transmit_DMA+0xf0>)
 8007942:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <HAL_UART_Transmit_DMA+0xf4>)
 800794a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007950:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <HAL_UART_Transmit_DMA+0xf8>)
 8007952:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007958:	2200      	movs	r2, #0
 800795a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007964:	4619      	mov	r1, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3328      	adds	r3, #40	; 0x28
 800796c:	461a      	mov	r2, r3
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	f7fc fab8 	bl	8003ee4 <HAL_DMA_Start_IT>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2210      	movs	r2, #16
 800797e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e012      	b.n	80079ba <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2240      	movs	r2, #64	; 0x40
 800799a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079b2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	e000      	b.n	80079ba <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 80079b8:	2302      	movs	r3, #2
  }
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	080086f9 	.word	0x080086f9
 80079c8:	0800874d 	.word	0x0800874d
 80079cc:	08008839 	.word	0x08008839

080079d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d131      	bne.n	8007a4a <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_UART_Receive_DMA+0x22>
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e02a      	b.n	8007a4c <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_UART_Receive_DMA+0x34>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e023      	b.n	8007a4c <HAL_UART_Receive_DMA+0x7c>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a0f      	ldr	r2, [pc, #60]	; (8007a54 <HAL_UART_Receive_DMA+0x84>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a38:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 fda9 	bl	8008598 <UART_Start_Receive_DMA>
 8007a46:	4603      	mov	r3, r0
 8007a48:	e000      	b.n	8007a4c <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007a4a:	2302      	movs	r3, #2
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40008000 	.word	0x40008000

08007a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a7e:	4013      	ands	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d113      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d009      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 81ce 	beq.w	8007e42 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
      }
      return;
 8007aae:	e1c8      	b.n	8007e42 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80e3 	beq.w	8007c7e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	4ba6      	ldr	r3, [pc, #664]	; (8007d60 <HAL_UART_IRQHandler+0x308>)
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80d8 	beq.w	8007c7e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d010      	beq.n	8007afa <HAL_UART_IRQHandler+0xa2>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af0:	f043 0201 	orr.w	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d010      	beq.n	8007b26 <HAL_UART_IRQHandler+0xce>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2202      	movs	r2, #2
 8007b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b1c:	f043 0204 	orr.w	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d010      	beq.n	8007b52 <HAL_UART_IRQHandler+0xfa>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b48:	f043 0202 	orr.w	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d015      	beq.n	8007b88 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2208      	movs	r2, #8
 8007b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b7e:	f043 0208 	orr.w	r2, r3, #8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d011      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x15e>
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00c      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bac:	f043 0220 	orr.w	r2, r3, #32
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8142 	beq.w	8007e46 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b40      	cmp	r3, #64	; 0x40
 8007bfa:	d004      	beq.n	8007c06 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d031      	beq.n	8007c6a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fd47 	bl	800869a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	d123      	bne.n	8007c62 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d013      	beq.n	8007c5a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	4a4b      	ldr	r2, [pc, #300]	; (8007d64 <HAL_UART_IRQHandler+0x30c>)
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fc f9ee 	bl	8004020 <HAL_DMA_Abort_IT>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	e00f      	b.n	8007c7a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7f9 fe24 	bl	80018a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	e00b      	b.n	8007c7a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7f9 fe20 	bl	80018a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c68:	e007      	b.n	8007c7a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7f9 fe1c 	bl	80018a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007c78:	e0e5      	b.n	8007e46 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7a:	bf00      	nop
    return;
 8007c7c:	e0e3      	b.n	8007e46 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	f040 80a9 	bne.w	8007dda <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80a3 	beq.w	8007dda <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 809d 	beq.w	8007dda <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2210      	movs	r2, #16
 8007ca6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d158      	bne.n	8007d68 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007cc0:	893b      	ldrh	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 80c1 	beq.w	8007e4a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cce:	893a      	ldrh	r2, [r7, #8]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	f080 80ba 	bcs.w	8007e4a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	893a      	ldrh	r2, [r7, #8]
 8007cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d12a      	bne.n	8007d44 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0210 	bic.w	r2, r2, #16
 8007d38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fc f930 	bl	8003fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f89d 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d5e:	e074      	b.n	8007e4a <HAL_UART_IRQHandler+0x3f2>
 8007d60:	04000120 	.word	0x04000120
 8007d64:	080088b5 	.word	0x080088b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d063      	beq.n	8007e4e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8007d86:	897b      	ldrh	r3, [r7, #10]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d060      	beq.n	8007e4e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d9a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0210 	bic.w	r2, r2, #16
 8007dcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dce:	897b      	ldrh	r3, [r7, #10]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f860 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007dd8:	e039      	b.n	8007e4e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <HAL_UART_IRQHandler+0x3a8>
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fd8a 	bl	8008912 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dfe:	e029      	b.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00d      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01a      	beq.n	8007e52 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
    }
    return;
 8007e24:	e015      	b.n	8007e52 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d011      	beq.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fd50 	bl	80088e0 <UART_EndTransmit_IT>
    return;
 8007e40:	e008      	b.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007e42:	bf00      	nop
 8007e44:	e006      	b.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007e46:	bf00      	nop
 8007e48:	e004      	b.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007e4a:	bf00      	nop
 8007e4c:	e002      	b.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007e52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop

08007e5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4baf      	ldr	r3, [pc, #700]	; (8008198 <UART_SetConfig+0x2e8>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	69f9      	ldr	r1, [r7, #28]
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4aa4      	ldr	r2, [pc, #656]	; (800819c <UART_SetConfig+0x2ec>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a9b      	ldr	r2, [pc, #620]	; (80081a0 <UART_SetConfig+0x2f0>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d121      	bne.n	8007f7a <UART_SetConfig+0xca>
 8007f36:	4b9b      	ldr	r3, [pc, #620]	; (80081a4 <UART_SetConfig+0x2f4>)
 8007f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d817      	bhi.n	8007f74 <UART_SetConfig+0xc4>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x9c>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f63 	.word	0x08007f63
 8007f58:	08007f6f 	.word	0x08007f6f
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	76fb      	strb	r3, [r7, #27]
 8007f60:	e070      	b.n	8008044 <UART_SetConfig+0x194>
 8007f62:	2302      	movs	r3, #2
 8007f64:	76fb      	strb	r3, [r7, #27]
 8007f66:	e06d      	b.n	8008044 <UART_SetConfig+0x194>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	76fb      	strb	r3, [r7, #27]
 8007f6c:	e06a      	b.n	8008044 <UART_SetConfig+0x194>
 8007f6e:	2308      	movs	r3, #8
 8007f70:	76fb      	strb	r3, [r7, #27]
 8007f72:	e067      	b.n	8008044 <UART_SetConfig+0x194>
 8007f74:	2310      	movs	r3, #16
 8007f76:	76fb      	strb	r3, [r7, #27]
 8007f78:	e064      	b.n	8008044 <UART_SetConfig+0x194>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a8a      	ldr	r2, [pc, #552]	; (80081a8 <UART_SetConfig+0x2f8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d132      	bne.n	8007fea <UART_SetConfig+0x13a>
 8007f84:	4b87      	ldr	r3, [pc, #540]	; (80081a4 <UART_SetConfig+0x2f4>)
 8007f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b0c      	cmp	r3, #12
 8007f90:	d828      	bhi.n	8007fe4 <UART_SetConfig+0x134>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0xe8>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fcd 	.word	0x08007fcd
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08007fe5 	.word	0x08007fe5
 8007fa4:	08007fe5 	.word	0x08007fe5
 8007fa8:	08007fd9 	.word	0x08007fd9
 8007fac:	08007fe5 	.word	0x08007fe5
 8007fb0:	08007fe5 	.word	0x08007fe5
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007fd3 	.word	0x08007fd3
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007fdf 	.word	0x08007fdf
 8007fcc:	2300      	movs	r3, #0
 8007fce:	76fb      	strb	r3, [r7, #27]
 8007fd0:	e038      	b.n	8008044 <UART_SetConfig+0x194>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	76fb      	strb	r3, [r7, #27]
 8007fd6:	e035      	b.n	8008044 <UART_SetConfig+0x194>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	76fb      	strb	r3, [r7, #27]
 8007fdc:	e032      	b.n	8008044 <UART_SetConfig+0x194>
 8007fde:	2308      	movs	r3, #8
 8007fe0:	76fb      	strb	r3, [r7, #27]
 8007fe2:	e02f      	b.n	8008044 <UART_SetConfig+0x194>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	76fb      	strb	r3, [r7, #27]
 8007fe8:	e02c      	b.n	8008044 <UART_SetConfig+0x194>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a6b      	ldr	r2, [pc, #428]	; (800819c <UART_SetConfig+0x2ec>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d125      	bne.n	8008040 <UART_SetConfig+0x190>
 8007ff4:	4b6b      	ldr	r3, [pc, #428]	; (80081a4 <UART_SetConfig+0x2f4>)
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008002:	d017      	beq.n	8008034 <UART_SetConfig+0x184>
 8008004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008008:	d817      	bhi.n	800803a <UART_SetConfig+0x18a>
 800800a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800e:	d00b      	beq.n	8008028 <UART_SetConfig+0x178>
 8008010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008014:	d811      	bhi.n	800803a <UART_SetConfig+0x18a>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <UART_SetConfig+0x172>
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801e:	d006      	beq.n	800802e <UART_SetConfig+0x17e>
 8008020:	e00b      	b.n	800803a <UART_SetConfig+0x18a>
 8008022:	2300      	movs	r3, #0
 8008024:	76fb      	strb	r3, [r7, #27]
 8008026:	e00d      	b.n	8008044 <UART_SetConfig+0x194>
 8008028:	2302      	movs	r3, #2
 800802a:	76fb      	strb	r3, [r7, #27]
 800802c:	e00a      	b.n	8008044 <UART_SetConfig+0x194>
 800802e:	2304      	movs	r3, #4
 8008030:	76fb      	strb	r3, [r7, #27]
 8008032:	e007      	b.n	8008044 <UART_SetConfig+0x194>
 8008034:	2308      	movs	r3, #8
 8008036:	76fb      	strb	r3, [r7, #27]
 8008038:	e004      	b.n	8008044 <UART_SetConfig+0x194>
 800803a:	2310      	movs	r3, #16
 800803c:	76fb      	strb	r3, [r7, #27]
 800803e:	e001      	b.n	8008044 <UART_SetConfig+0x194>
 8008040:	2310      	movs	r3, #16
 8008042:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a54      	ldr	r2, [pc, #336]	; (800819c <UART_SetConfig+0x2ec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d173      	bne.n	8008136 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800804e:	7efb      	ldrb	r3, [r7, #27]
 8008050:	2b08      	cmp	r3, #8
 8008052:	d824      	bhi.n	800809e <UART_SetConfig+0x1ee>
 8008054:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x1ac>)
 8008056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805a:	bf00      	nop
 800805c:	08008081 	.word	0x08008081
 8008060:	0800809f 	.word	0x0800809f
 8008064:	08008089 	.word	0x08008089
 8008068:	0800809f 	.word	0x0800809f
 800806c:	0800808f 	.word	0x0800808f
 8008070:	0800809f 	.word	0x0800809f
 8008074:	0800809f 	.word	0x0800809f
 8008078:	0800809f 	.word	0x0800809f
 800807c:	08008097 	.word	0x08008097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008080:	f7fd f888 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8008084:	6178      	str	r0, [r7, #20]
        break;
 8008086:	e00f      	b.n	80080a8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008088:	4b48      	ldr	r3, [pc, #288]	; (80081ac <UART_SetConfig+0x2fc>)
 800808a:	617b      	str	r3, [r7, #20]
        break;
 800808c:	e00c      	b.n	80080a8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800808e:	f7fc ffe9 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8008092:	6178      	str	r0, [r7, #20]
        break;
 8008094:	e008      	b.n	80080a8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800809a:	617b      	str	r3, [r7, #20]
        break;
 800809c:	e004      	b.n	80080a8 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	76bb      	strb	r3, [r7, #26]
        break;
 80080a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80fe 	beq.w	80082ac <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	4613      	mov	r3, r2
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	4413      	add	r3, r2
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d305      	bcc.n	80080cc <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d902      	bls.n	80080d2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	76bb      	strb	r3, [r7, #26]
 80080d0:	e0ec      	b.n	80082ac <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f04f 0100 	mov.w	r1, #0
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	020b      	lsls	r3, r1, #8
 80080e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080e8:	0202      	lsls	r2, r0, #8
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	6849      	ldr	r1, [r1, #4]
 80080ee:	0849      	lsrs	r1, r1, #1
 80080f0:	4608      	mov	r0, r1
 80080f2:	f04f 0100 	mov.w	r1, #0
 80080f6:	1814      	adds	r4, r2, r0
 80080f8:	eb43 0501 	adc.w	r5, r3, r1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	461a      	mov	r2, r3
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 f85f 	bl	80001cc <__aeabi_uldivmod>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4613      	mov	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800811c:	d308      	bcc.n	8008130 <UART_SetConfig+0x280>
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008124:	d204      	bcs.n	8008130 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	60da      	str	r2, [r3, #12]
 800812e:	e0bd      	b.n	80082ac <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	76bb      	strb	r3, [r7, #26]
 8008134:	e0ba      	b.n	80082ac <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800813e:	d168      	bne.n	8008212 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8008140:	7efb      	ldrb	r3, [r7, #27]
 8008142:	2b08      	cmp	r3, #8
 8008144:	d834      	bhi.n	80081b0 <UART_SetConfig+0x300>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0x29c>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	08008171 	.word	0x08008171
 8008150:	08008179 	.word	0x08008179
 8008154:	08008181 	.word	0x08008181
 8008158:	080081b1 	.word	0x080081b1
 800815c:	08008187 	.word	0x08008187
 8008160:	080081b1 	.word	0x080081b1
 8008164:	080081b1 	.word	0x080081b1
 8008168:	080081b1 	.word	0x080081b1
 800816c:	0800818f 	.word	0x0800818f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008170:	f7fd f810 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8008174:	6178      	str	r0, [r7, #20]
        break;
 8008176:	e020      	b.n	80081ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008178:	f7fd f822 	bl	80051c0 <HAL_RCC_GetPCLK2Freq>
 800817c:	6178      	str	r0, [r7, #20]
        break;
 800817e:	e01c      	b.n	80081ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008180:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <UART_SetConfig+0x2fc>)
 8008182:	617b      	str	r3, [r7, #20]
        break;
 8008184:	e019      	b.n	80081ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008186:	f7fc ff6d 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800818a:	6178      	str	r0, [r7, #20]
        break;
 800818c:	e015      	b.n	80081ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008192:	617b      	str	r3, [r7, #20]
        break;
 8008194:	e011      	b.n	80081ba <UART_SetConfig+0x30a>
 8008196:	bf00      	nop
 8008198:	efff69f3 	.word	0xefff69f3
 800819c:	40008000 	.word	0x40008000
 80081a0:	40013800 	.word	0x40013800
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40004400 	.word	0x40004400
 80081ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	76bb      	strb	r3, [r7, #26]
        break;
 80081b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d075      	beq.n	80082ac <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	005a      	lsls	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	441a      	add	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d916      	bls.n	800820c <UART_SetConfig+0x35c>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e4:	d212      	bcs.n	800820c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f023 030f 	bic.w	r3, r3, #15
 80081ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	89fb      	ldrh	r3, [r7, #14]
 80081fe:	4313      	orrs	r3, r2
 8008200:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	89fa      	ldrh	r2, [r7, #14]
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e04f      	b.n	80082ac <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	76bb      	strb	r3, [r7, #26]
 8008210:	e04c      	b.n	80082ac <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008212:	7efb      	ldrb	r3, [r7, #27]
 8008214:	2b08      	cmp	r3, #8
 8008216:	d828      	bhi.n	800826a <UART_SetConfig+0x3ba>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <UART_SetConfig+0x370>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008245 	.word	0x08008245
 8008224:	0800824d 	.word	0x0800824d
 8008228:	08008255 	.word	0x08008255
 800822c:	0800826b 	.word	0x0800826b
 8008230:	0800825b 	.word	0x0800825b
 8008234:	0800826b 	.word	0x0800826b
 8008238:	0800826b 	.word	0x0800826b
 800823c:	0800826b 	.word	0x0800826b
 8008240:	08008263 	.word	0x08008263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008244:	f7fc ffa6 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8008248:	6178      	str	r0, [r7, #20]
        break;
 800824a:	e013      	b.n	8008274 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800824c:	f7fc ffb8 	bl	80051c0 <HAL_RCC_GetPCLK2Freq>
 8008250:	6178      	str	r0, [r7, #20]
        break;
 8008252:	e00f      	b.n	8008274 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008254:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <UART_SetConfig+0x414>)
 8008256:	617b      	str	r3, [r7, #20]
        break;
 8008258:	e00c      	b.n	8008274 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800825a:	f7fc ff03 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800825e:	6178      	str	r0, [r7, #20]
        break;
 8008260:	e008      	b.n	8008274 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008266:	617b      	str	r3, [r7, #20]
        break;
 8008268:	e004      	b.n	8008274 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	76bb      	strb	r3, [r7, #26]
        break;
 8008272:	bf00      	nop
    }

    if (pclk != 0U)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d018      	beq.n	80082ac <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	085a      	lsrs	r2, r3, #1
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	441a      	add	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	fbb2 f3f3 	udiv	r3, r2, r3
 800828c:	b29b      	uxth	r3, r3
 800828e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b0f      	cmp	r3, #15
 8008294:	d908      	bls.n	80082a8 <UART_SetConfig+0x3f8>
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800829c:	d204      	bcs.n	80082a8 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	e001      	b.n	80082ac <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bdb0      	pop	{r4, r5, r7, pc}
 80082c2:	bf00      	nop
 80082c4:	00f42400 	.word	0x00f42400

080082c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01a      	beq.n	80083de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c6:	d10a      	bne.n	80083de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
  }
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800841c:	f7f9 ff0e 	bl	800223c <HAL_GetTick>
 8008420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b08      	cmp	r3, #8
 800842e:	d10e      	bne.n	800844e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f82d 	bl	800849e <UART_WaitOnFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e023      	b.n	8008496 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b04      	cmp	r3, #4
 800845a:	d10e      	bne.n	800847a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800845c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f817 	bl	800849e <UART_WaitOnFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e00d      	b.n	8008496 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4613      	mov	r3, r2
 80084ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ae:	e05e      	b.n	800856e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d05a      	beq.n	800856e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b8:	f7f9 fec0 	bl	800223c <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d302      	bcc.n	80084ce <UART_WaitOnFlagUntilTimeout+0x30>
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d11b      	bne.n	8008506 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2220      	movs	r2, #32
 80084f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e043      	b.n	800858e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02c      	beq.n	800856e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800851e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008522:	d124      	bne.n	800856e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800852c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800853c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2220      	movs	r2, #32
 8008552:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2220      	movs	r2, #32
 8008558:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e00f      	b.n	800858e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69da      	ldr	r2, [r3, #28]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4013      	ands	r3, r2
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	429a      	cmp	r2, r3
 800857c:	bf0c      	ite	eq
 800857e:	2301      	moveq	r3, #1
 8008580:	2300      	movne	r3, #0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	429a      	cmp	r2, r3
 800858a:	d091      	beq.n	80084b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2222      	movs	r2, #34	; 0x22
 80085c0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d02b      	beq.n	8008622 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	4a25      	ldr	r2, [pc, #148]	; (8008664 <UART_Start_Receive_DMA+0xcc>)
 80085d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	4a24      	ldr	r2, [pc, #144]	; (8008668 <UART_Start_Receive_DMA+0xd0>)
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	4a23      	ldr	r2, [pc, #140]	; (800866c <UART_Start_Receive_DMA+0xd4>)
 80085e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e6:	2200      	movs	r2, #0
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3324      	adds	r3, #36	; 0x24
 80085f4:	4619      	mov	r1, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fa:	461a      	mov	r2, r3
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	f7fb fc71 	bl	8003ee4 <HAL_DMA_Start_IT>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2210      	movs	r2, #16
 800860c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2220      	movs	r2, #32
 800861c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e01c      	b.n	800865c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008638:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0201 	orr.w	r2, r2, #1
 8008648:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008658:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	08008769 	.word	0x08008769
 8008668:	08008801 	.word	0x08008801
 800866c:	08008839 	.word	0x08008839

08008670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008686:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086b0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
 80086c0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d107      	bne.n	80086da <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0210 	bic.w	r2, r2, #16
 80086d8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d114      	bne.n	800873e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800872a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800873a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800873c:	e002      	b.n	8008744 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7f9 f8bc 	bl	80018bc <HAL_UART_TxCpltCallback>
}
 8008744:	bf00      	nop
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fb7e 	bl	8007e5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b00      	cmp	r3, #0
 8008782:	d12a      	bne.n	80087da <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800879a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0201 	bic.w	r2, r2, #1
 80087aa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ba:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2220      	movs	r2, #32
 80087c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d107      	bne.n	80087da <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0210 	bic.w	r2, r2, #16
 80087d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d107      	bne.n	80087f2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087e8:	4619      	mov	r1, r3
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fb54 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087f0:	e002      	b.n	80087f8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff fb3c 	bl	8007e70 <HAL_UART_RxCpltCallback>
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008812:	2b01      	cmp	r3, #1
 8008814:	d109      	bne.n	800882a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	b29b      	uxth	r3, r3
 8008820:	4619      	mov	r1, r3
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fb38 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008828:	e002      	b.n	8008830 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff fb2a 	bl	8007e84 <HAL_UART_RxHalfCpltCallback>
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800884a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008850:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	d109      	bne.n	8008874 <UART_DMAError+0x3c>
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2b21      	cmp	r3, #33	; 0x21
 8008864:	d106      	bne.n	8008874 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2200      	movs	r2, #0
 800886a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800886e:	6978      	ldr	r0, [r7, #20]
 8008870:	f7ff fefe 	bl	8008670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d109      	bne.n	8008896 <UART_DMAError+0x5e>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b22      	cmp	r3, #34	; 0x22
 8008886:	d106      	bne.n	8008896 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2200      	movs	r2, #0
 800888c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008890:	6978      	ldr	r0, [r7, #20]
 8008892:	f7ff ff02 	bl	800869a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800889c:	f043 0210 	orr.w	r2, r3, #16
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a6:	6978      	ldr	r0, [r7, #20]
 80088a8:	f7f8 fffe 	bl	80018a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ac:	bf00      	nop
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7f8 ffe8 	bl	80018a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7f8 ffd9 	bl	80018bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	; (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	; (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	; (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	; (800896c <__libc_init_array+0x44>)
 800893c:	f000 f820 	bl	8008980 <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	080089e8 	.word	0x080089e8
 8008964:	080089e8 	.word	0x080089e8
 8008968:	080089e8 	.word	0x080089e8
 800896c:	080089ec 	.word	0x080089ec

08008970 <memset>:
 8008970:	4402      	add	r2, r0
 8008972:	4603      	mov	r3, r0
 8008974:	4293      	cmp	r3, r2
 8008976:	d100      	bne.n	800897a <memset+0xa>
 8008978:	4770      	bx	lr
 800897a:	f803 1b01 	strb.w	r1, [r3], #1
 800897e:	e7f9      	b.n	8008974 <memset+0x4>

08008980 <_init>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	bf00      	nop
 8008984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008986:	bc08      	pop	{r3}
 8008988:	469e      	mov	lr, r3
 800898a:	4770      	bx	lr

0800898c <_fini>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr
