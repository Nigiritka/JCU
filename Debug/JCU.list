
JCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea8  08007ea8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea8  08007ea8  00017ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb0  08007eb0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000020  08007ed8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08007ed8  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd5c  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003180  00000000  00000000  0003bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00040548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023595  00000000  00000000  00041a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001884d  00000000  00000000  00064fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db88b  00000000  00000000  0007d7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  001590d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007e48 	.word	0x08007e48

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000024 	.word	0x20000024
 80001c8:	08007e48 	.word	0x08007e48

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CheckErrorsEnc>:
volatile bool COF = 0;											// if 1 - invalid angle data, AS5048 internal error
volatile bool OCF = 1;											// always must be 1, if isn't - AS5048 internal error.
volatile bool EncoderErrorFlag = 0;

void CheckErrorsEnc()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	comp_high = (AGCDiagnosticValue[0] & 0x08);					// bitmask for comp_high flag
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <CheckErrorsEnc+0xb8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <CheckErrorsEnc+0xbc>)
 80004dc:	701a      	strb	r2, [r3, #0]
	comp_low = (AGCDiagnosticValue[0] & 0x04);					// bitmask for comp_low flag
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <CheckErrorsEnc+0xb8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <CheckErrorsEnc+0xc0>)
 80004f2:	701a      	strb	r2, [r3, #0]
	COF = (AGCDiagnosticValue[0] & 0x02);						// bitmask for COF flag
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <CheckErrorsEnc+0xb8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000508:	701a      	strb	r2, [r3, #0]
	OCF = (AGCDiagnosticValue[0] & 0x01);						// bitmask for OCF flag
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <CheckErrorsEnc+0xb8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <CheckErrorsEnc+0xc8>)
 800051e:	701a      	strb	r2, [r3, #0]

	// Set/reset LED if we have/don't have an error
	if(comp_high == 1 || comp_low == 1 || COF == 1 || OCF == 0)
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <CheckErrorsEnc+0xbc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d111      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <CheckErrorsEnc+0xc0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10c      	bne.n	800054e <CheckErrorsEnc+0x8a>
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <CheckErrorsEnc+0xc8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <CheckErrorsEnc+0x9e>
	{
		EnableAlarmLED();
 800054e:	f000 f8c9 	bl	80006e4 <EnableAlarmLED>
		JCUState.Errors |= ERROR_ENCODER_MAGNET;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <CheckErrorsEnc+0xcc>)
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	e009      	b.n	8000576 <CheckErrorsEnc+0xb2>
		//ClearErrorFlags();
	}
	else
	{
		DisableAlarmLED();
 8000562:	f000 f8cb 	bl	80006fc <DisableAlarmLED>
		JCUState.Errors &=~ ERROR_ENCODER_MAGNET;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000572:	801a      	strh	r2, [r3, #0]
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000040 	.word	0x20000040
 8000580:	20000043 	.word	0x20000043
 8000584:	20000044 	.word	0x20000044
 8000588:	20000045 	.word	0x20000045
 800058c:	20000006 	.word	0x20000006
 8000590:	20000110 	.word	0x20000110

08000594 <ParityOk>:

//--------------Calculate PARITY EVEN bit-----------------
bool ParityOk(uint16_t scancode)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]

	uint16_t parity = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
	// checking 15 bits for EVEN Parity
	for (uint8_t i = 0; i < 15; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	e00d      	b.n	80005c4 <ParityOk+0x30>
	{
		if(scancode & 0x01)										// see if LSB is 1
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <ParityOk+0x24>
		{
			parity++;											// if it 1 add counter of "ones"
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
		}
		scancode = scancode >> 1;								// shift to next bit
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 15; i++)
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	3301      	adds	r3, #1
 80005c2:	737b      	strb	r3, [r7, #13]
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	2b0e      	cmp	r3, #14
 80005c8:	d9ee      	bls.n	80005a8 <ParityOk+0x14>
	}

	parity = parity & 0x01;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	81fb      	strh	r3, [r7, #14]
	// Compare calculated parity and the MSB of received DATA, return "1" if they are the same
	return (parity == scancode);
 80005d2:	89fa      	ldrh	r2, [r7, #14]
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <EncoderDataParcing>:
//-------------------------------------------------------

void EncoderDataParcing(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	switch(EncoderState)
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <EncoderDataParcing+0x7c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d034      	beq.n	8000662 <EncoderDataParcing+0x76>
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	dc33      	bgt.n	8000664 <EncoderDataParcing+0x78>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d002      	beq.n	8000606 <EncoderDataParcing+0x1a>
 8000600:	2b02      	cmp	r3, #2
 8000602:	d02b      	beq.n	800065c <EncoderDataParcing+0x70>
			break;
		case STATE_ENCODER_CLEAR_ERRORS:

			break;
	}
}
 8000604:	e02e      	b.n	8000664 <EncoderDataParcing+0x78>
			JCUState.Angle = (Angle[0] << 8) + Angle[1];
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <EncoderDataParcing+0x80>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b29b      	uxth	r3, r3
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <EncoderDataParcing+0x80>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	b29b      	uxth	r3, r3
 8000616:	4413      	add	r3, r2
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <EncoderDataParcing+0x84>)
 800061c:	805a      	strh	r2, [r3, #2]
			if (ParityOk(JCUState.Angle))
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <EncoderDataParcing+0x84>)
 8000620:	885b      	ldrh	r3, [r3, #2]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffb6 	bl	8000594 <ParityOk>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <EncoderDataParcing+0x52>
				JCUState.Errors &=~ ERROR_ENCODER_PARITY;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <EncoderDataParcing+0x84>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	f023 0302 	bic.w	r3, r3, #2
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <EncoderDataParcing+0x84>)
 800063a:	801a      	strh	r2, [r3, #0]
 800063c:	e006      	b.n	800064c <EncoderDataParcing+0x60>
				JCUState.Errors |= ERROR_ENCODER_PARITY;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <EncoderDataParcing+0x84>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <EncoderDataParcing+0x84>)
 800064a:	801a      	strh	r2, [r3, #0]
			JCUState.Angle &= 0x3FFF;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <EncoderDataParcing+0x84>)
 800064e:	885b      	ldrh	r3, [r3, #2]
 8000650:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <EncoderDataParcing+0x84>)
 8000658:	805a      	strh	r2, [r3, #2]
			break;
 800065a:	e003      	b.n	8000664 <EncoderDataParcing+0x78>
			CheckErrorsEnc();
 800065c:	f7ff ff32 	bl	80004c4 <CheckErrorsEnc>
			break;
 8000660:	e000      	b.n	8000664 <EncoderDataParcing+0x78>
			break;
 8000662:	bf00      	nop
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000042 	.word	0x20000042
 800066c:	2000003c 	.word	0x2000003c
 8000670:	20000110 	.word	0x20000110

08000674 <ReadAngle_RequestErrors>:


void ReadAngle_RequestErrors(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	EncoderState = STATE_ENCODER_READ_ANGLE;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <ReadAngle_RequestErrors+0x28>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2110      	movs	r1, #16
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f003 fb43 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi1, AGCDiagnosticAddress, Angle, SIZE);
 800068a:	2302      	movs	r3, #2
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <ReadAngle_RequestErrors+0x2c>)
 800068e:	4905      	ldr	r1, [pc, #20]	; (80006a4 <ReadAngle_RequestErrors+0x30>)
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <ReadAngle_RequestErrors+0x34>)
 8000692:	f004 fd83 	bl	800519c <HAL_SPI_TransmitReceive_IT>
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
													// remove 2 MSB bits from angle, because they represent Parity and Error
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000042 	.word	0x20000042
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	20000004 	.word	0x20000004
 80006a8:	200002ac 	.word	0x200002ac

080006ac <ReadErrors_RequestAngle>:

void ReadErrors_RequestAngle(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	EncoderState = STATE_ENCODER_READ_ERRORS;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <ReadErrors_RequestAngle+0x28>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f003 fb27 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi1, ReadAngle, AGCDiagnosticValue, SIZE);		// read data about error, and sent request to read angle, so that next communication we would have actual angle information
 80006c2:	2302      	movs	r3, #2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <ReadErrors_RequestAngle+0x2c>)
 80006c6:	4905      	ldr	r1, [pc, #20]	; (80006dc <ReadErrors_RequestAngle+0x30>)
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ReadErrors_RequestAngle+0x34>)
 80006ca:	f004 fd67 	bl	800519c <HAL_SPI_TransmitReceive_IT>
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);


}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000042 	.word	0x20000042
 80006d8:	20000040 	.word	0x20000040
 80006dc:	20000000 	.word	0x20000000
 80006e0:	200002ac 	.word	0x200002ac

080006e4 <EnableAlarmLED>:
	HAL_SPI_TransmitReceive_IT(&hspi1, ReadErrorFlagsAddress, ReadAngle, SIZE);

}

void EnableAlarmLED(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	4802      	ldr	r0, [pc, #8]	; (80006f8 <EnableAlarmLED+0x14>)
 80006f0:	f003 fb0e 	bl	8003d10 <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	48000800 	.word	0x48000800

080006fc <DisableAlarmLED>:

void DisableAlarmLED(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000706:	4802      	ldr	r0, [pc, #8]	; (8000710 <DisableAlarmLED+0x14>)
 8000708:	f003 fb02 	bl	8003d10 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	48000800 	.word	0x48000800

08000714 <ModbusRTURoutine>:
 * 43.5 us data is sent, 8 bytes
 */


void ModbusRTURoutine(uint8_t *pBUFFER, uint8_t Length, uint8_t BufferSize)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b08e      	sub	sp, #56	; 0x38
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
 8000720:	4613      	mov	r3, r2
 8000722:	70bb      	strb	r3, [r7, #2]
 8000724:	466b      	mov	r3, sp
 8000726:	461d      	mov	r5, r3
	/*
	 * create temporary variables for ModBus parcing
	 */
	uint16_t CRCCalc = 0;							// CRC which will be calculated
 8000728:	2300      	movs	r3, #0
 800072a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t CRCValue = 0;							// CRC which was sent by Master
 800072c:	2300      	movs	r3, #0
 800072e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t ModbusFunction = 0;						// Master modbus function (what action slave should do)
 8000730:	2300      	movs	r3, #0
 8000732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t RequestedAddress = 0;					// started address which Master wants to read
 8000736:	2300      	movs	r3, #0
 8000738:	843b      	strh	r3, [r7, #32]
	uint16_t AmountofRead = 0;						// amount of registers which master wants to read
 800073a:	2300      	movs	r3, #0
 800073c:	83fb      	strh	r3, [r7, #30]
	uint16_t AmountofWrite = 0;						// amount of registers which master wants to write
 800073e:	2300      	movs	r3, #0
 8000740:	83bb      	strh	r3, [r7, #28]
	uint8_t ByteCount = 0;							// amount of BYTEs which will be sent in response
 8000742:	2300      	movs	r3, #0
 8000744:	76fb      	strb	r3, [r7, #27]
	uint16_t CRCforResponse	= 0;					// CRC will be calculated for response data
 8000746:	2300      	movs	r3, #0
 8000748:	833b      	strh	r3, [r7, #24]
	uint8_t temp[Length];							// temporary array which we are gonna use to process incoming data
 800074a:	78fc      	ldrb	r4, [r7, #3]
 800074c:	4623      	mov	r3, r4
 800074e:	3b01      	subs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	b2e0      	uxtb	r0, r4
 8000754:	f04f 0100 	mov.w	r1, #0
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	00cb      	lsls	r3, r1, #3
 8000762:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000766:	00c2      	lsls	r2, r0, #3
 8000768:	b2e0      	uxtb	r0, r4
 800076a:	f04f 0100 	mov.w	r1, #0
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	00cb      	lsls	r3, r1, #3
 8000778:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800077c:	00c2      	lsls	r2, r0, #3
 800077e:	4623      	mov	r3, r4
 8000780:	3307      	adds	r3, #7
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	ebad 0d03 	sub.w	sp, sp, r3
 800078a:	466b      	mov	r3, sp
 800078c:	3300      	adds	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
	uint16_t *ptemp16bitJCUConfig = pJCUConfig;		// temporary pointer to shift between data which should be read or written pJCUConfig
 8000790:	4b99      	ldr	r3, [pc, #612]	; (80009f8 <ModbusRTURoutine+0x2e4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *ptemp16bitJCUState = pJCUState;		// temporary pointer to shift between data which should be read or written pJCUState
 8000796:	4b99      	ldr	r3, [pc, #612]	; (80009fc <ModbusRTURoutine+0x2e8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	633b      	str	r3, [r7, #48]	; 0x30

	// putting all data to the temp array
	for (uint8_t i = 0; i < Length; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80007a2:	e00d      	b.n	80007c0 <ModbusRTURoutine+0xac>
	{
		temp [i] = pBUFFER[i];
 80007a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	441a      	add	r2, r3
 80007ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007b0:	7811      	ldrb	r1, [r2, #0]
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < Length; i++)
 80007b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007ba:	3301      	adds	r3, #1
 80007bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80007c0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3ec      	bcc.n	80007a4 <ModbusRTURoutine+0x90>
	}

	// comparing received and calculated CRCs

	CRCValue = temp[Length-1];
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue <<= 8;
 80007d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue = CRCValue + temp[Length-2];
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	3b02      	subs	r3, #2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e6:	4413      	add	r3, r2
 80007e8:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCCalc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&temp, (Length-2));
 80007ea:	6939      	ldr	r1, [r7, #16]
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	3b02      	subs	r3, #2
 80007f0:	461a      	mov	r2, r3
 80007f2:	4883      	ldr	r0, [pc, #524]	; (8000a00 <ModbusRTURoutine+0x2ec>)
 80007f4:	f002 fd12 	bl	800321c <HAL_CRC_Calculate>
 80007f8:	4603      	mov	r3, r0
 80007fa:	84fb      	strh	r3, [r7, #38]	; 0x26

	// If data was not corrupted (CRC is ok)
	//if (1)
	if (CRCCalc == CRCValue)
 80007fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000800:	429a      	cmp	r2, r3
 8000802:	f040 8219 	bne.w	8000c38 <ModbusRTURoutine+0x524>
	{
		// Check if the message for us
		if (temp[0] == SLAVE_ID)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2201      	movs	r2, #1
 800080c:	4293      	cmp	r3, r2
 800080e:	f040 8213 	bne.w	8000c38 <ModbusRTURoutine+0x524>
		{
			// this packet for us, let's read it
			// Defining the modbus function
			ModbusFunction = temp[1];
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			switch (ModbusFunction)
 800081a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800081e:	3b03      	subs	r3, #3
 8000820:	2b0d      	cmp	r3, #13
 8000822:	f200 8205 	bhi.w	8000c30 <ModbusRTURoutine+0x51c>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <ModbusRTURoutine+0x118>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	08000865 	.word	0x08000865
 8000830:	08000979 	.word	0x08000979
 8000834:	08000c31 	.word	0x08000c31
 8000838:	08000aad 	.word	0x08000aad
 800083c:	08000c31 	.word	0x08000c31
 8000840:	08000c31 	.word	0x08000c31
 8000844:	08000c31 	.word	0x08000c31
 8000848:	08000c31 	.word	0x08000c31
 800084c:	08000c31 	.word	0x08000c31
 8000850:	08000c31 	.word	0x08000c31
 8000854:	08000c31 	.word	0x08000c31
 8000858:	08000c31 	.word	0x08000c31
 800085c:	08000c31 	.word	0x08000c31
 8000860:	08000b13 	.word	0x08000b13
			{
				case READ_AOHR:
				// Read JCU parameters which Master has set (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	b29b      	uxth	r3, r3
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b29a      	uxth	r2, r3
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	78db      	ldrb	r3, [r3, #3]
 8000872:	b29b      	uxth	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000878:	8c3a      	ldrh	r2, [r7, #32]
 800087a:	4b62      	ldr	r3, [pc, #392]	; (8000a04 <ModbusRTURoutine+0x2f0>)
 800087c:	4413      	add	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000882:	4413      	add	r3, r2
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c

					// Defining how many Holding registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	b29b      	uxth	r3, r3
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b29a      	uxth	r2, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	795b      	ldrb	r3, [r3, #5]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4413      	add	r3, r2
 8000898:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 800089a:	8bfb      	ldrh	r3, [r7, #30]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 80008a2:	8c3b      	ldrh	r3, [r7, #32]
 80008a4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d961      	bls.n	8000970 <ModbusRTURoutine+0x25c>
 80008ac:	8c3b      	ldrh	r3, [r7, #32]
 80008ae:	f649 4256 	movw	r2, #40022	; 0x9c56
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d85c      	bhi.n	8000970 <ModbusRTURoutine+0x25c>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofRead) <= TOTAL_AOHR))
 80008b6:	8c3b      	ldrh	r3, [r7, #32]
 80008b8:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 80008bc:	3b41      	subs	r3, #65	; 0x41
 80008be:	8bfa      	ldrh	r2, [r7, #30]
 80008c0:	4413      	add	r3, r2
 80008c2:	2b16      	cmp	r3, #22
 80008c4:	dc54      	bgt.n	8000970 <ModbusRTURoutine+0x25c>
					{
						TxData[0] = SLAVE_ID;
 80008c6:	2201      	movs	r2, #1
 80008c8:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80008ca:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 80008cc:	4a4e      	ldr	r2, [pc, #312]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80008ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008d2:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 80008d4:	4a4c      	ldr	r2, [pc, #304]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80008d6:	7efb      	ldrb	r3, [r7, #27]
 80008d8:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<ByteCount; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80008e0:	e01f      	b.n	8000922 <ModbusRTURoutine+0x20e>
						{
							uint16_t tempvalue = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	81bb      	strh	r3, [r7, #12]
							tempvalue = *ptemp16bitJCUConfig;
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 4] = tempvalue;
 80008ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008f0:	3302      	adds	r3, #2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	89ba      	ldrh	r2, [r7, #12]
 80008f6:	b2d1      	uxtb	r1, r2
 80008f8:	4a43      	ldr	r2, [pc, #268]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80008fa:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 80008fc:	89bb      	ldrh	r3, [r7, #12]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 3] = tempvalue;
 8000902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	3303      	adds	r3, #3
 800090a:	89ba      	ldrh	r2, [r7, #12]
 800090c:	b2d1      	uxtb	r1, r2
 800090e:	4a3e      	ldr	r2, [pc, #248]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 8000910:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUConfig++;
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	3302      	adds	r3, #2
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i++)
 8000918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800091c:	3301      	adds	r3, #1
 800091e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000922:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000926:	7efb      	ldrb	r3, [r7, #27]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3da      	bcc.n	80008e2 <ModbusRTURoutine+0x1ce>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 800092c:	7efb      	ldrb	r3, [r7, #27]
 800092e:	3303      	adds	r3, #3
 8000930:	461a      	mov	r2, r3
 8000932:	4935      	ldr	r1, [pc, #212]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 8000934:	4832      	ldr	r0, [pc, #200]	; (8000a00 <ModbusRTURoutine+0x2ec>)
 8000936:	f002 fc71 	bl	800321c <HAL_CRC_Calculate>
 800093a:	4603      	mov	r3, r0
 800093c:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 800093e:	7efb      	ldrb	r3, [r7, #27]
 8000940:	3303      	adds	r3, #3
 8000942:	8b3a      	ldrh	r2, [r7, #24]
 8000944:	b2d1      	uxtb	r1, r2
 8000946:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 8000948:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 800094a:	8b3b      	ldrh	r3, [r7, #24]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000950:	7efb      	ldrb	r3, [r7, #27]
 8000952:	3304      	adds	r3, #4
 8000954:	8b3a      	ldrh	r2, [r7, #24]
 8000956:	b2d1      	uxtb	r1, r2
 8000958:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 800095a:	54d1      	strb	r1, [r2, r3]
						HAL_UART_Transmit_DMA(&huart2, TxData, (5+ByteCount));
 800095c:	7efb      	ldrb	r3, [r7, #27]
 800095e:	b29b      	uxth	r3, r3
 8000960:	3305      	adds	r3, #5
 8000962:	b29b      	uxth	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	4928      	ldr	r1, [pc, #160]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 8000968:	4828      	ldr	r0, [pc, #160]	; (8000a0c <ModbusRTURoutine+0x2f8>)
 800096a:	f006 fa0d 	bl	8006d88 <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 800096e:	e163      	b.n	8000c38 <ModbusRTURoutine+0x524>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f971 	bl	8000c58 <ModbusExceptionHandler>
					break;
 8000976:	e15f      	b.n	8000c38 <ModbusRTURoutine+0x524>

				case READ_AIR:
				// Read JCU parameters (errors/Angle/speed/torque/temperature)

					// Defining the first address of input registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	b29b      	uxth	r3, r3
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	b29a      	uxth	r2, r3
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					ptemp16bitJCUState += RequestedAddress - ADDRESS_JCU_ERRORS;
 800098c:	8c3a      	ldrh	r2, [r7, #32]
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <ModbusRTURoutine+0x2fc>)
 8000990:	4413      	add	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000996:	4413      	add	r3, r2
 8000998:	633b      	str	r3, [r7, #48]	; 0x30

					// Defining how many input registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	795b      	ldrb	r3, [r3, #5]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 80009ae:	8bfb      	ldrh	r3, [r7, #30]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the input Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_JCU_ERRORS) && (RequestedAddress <= ADDRESS_JCU_TEMP))
 80009b6:	8c3b      	ldrh	r3, [r7, #32]
 80009b8:	f247 5230 	movw	r2, #30000	; 0x7530
 80009bc:	4293      	cmp	r3, r2
 80009be:	d971      	bls.n	8000aa4 <ModbusRTURoutine+0x390>
 80009c0:	8c3b      	ldrh	r3, [r7, #32]
 80009c2:	f247 5235 	movw	r2, #30005	; 0x7535
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d86c      	bhi.n	8000aa4 <ModbusRTURoutine+0x390>
							&& (((RequestedAddress - ADDRESS_JCU_ERRORS) + AmountofRead) <= TOTAL_AIR))
 80009ca:	8c3b      	ldrh	r3, [r7, #32]
 80009cc:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80009d0:	3b31      	subs	r3, #49	; 0x31
 80009d2:	8bfa      	ldrh	r2, [r7, #30]
 80009d4:	4413      	add	r3, r2
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	dc64      	bgt.n	8000aa4 <ModbusRTURoutine+0x390>
					{
						TxData[0] = SLAVE_ID;
 80009da:	2201      	movs	r2, #1
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80009de:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80009e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009e6:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <ModbusRTURoutine+0x2f4>)
 80009ea:	7efb      	ldrb	r3, [r7, #27]
 80009ec:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<AmountofRead; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80009f4:	e02e      	b.n	8000a54 <ModbusRTURoutine+0x340>
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	20000190 	.word	0x20000190
 8000a04:	7fff63bf 	.word	0x7fff63bf
 8000a08:	200000ac 	.word	0x200000ac
 8000a0c:	20000310 	.word	0x20000310
 8000a10:	7fff8acf 	.word	0x7fff8acf
						{
							uint16_t tempvalue = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	81fb      	strh	r3, [r7, #14]
							tempvalue = *ptemp16bitJCUState;
 8000a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 4] = tempvalue;
 8000a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a22:	3302      	adds	r3, #2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	89fa      	ldrh	r2, [r7, #14]
 8000a28:	b2d1      	uxtb	r1, r2
 8000a2a:	4a86      	ldr	r2, [pc, #536]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000a2c:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 3] = tempvalue;
 8000a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3303      	adds	r3, #3
 8000a3c:	89fa      	ldrh	r2, [r7, #14]
 8000a3e:	b2d1      	uxtb	r1, r2
 8000a40:	4a80      	ldr	r2, [pc, #512]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000a42:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUState++;
 8000a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a46:	3302      	adds	r3, #2
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
						for (uint8_t i=0; i<AmountofRead; i++)
 8000a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a4e:	3301      	adds	r3, #1
 8000a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000a54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	8bfa      	ldrh	r2, [r7, #30]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8d9      	bhi.n	8000a14 <ModbusRTURoutine+0x300>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000a60:	7efb      	ldrb	r3, [r7, #27]
 8000a62:	3303      	adds	r3, #3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4977      	ldr	r1, [pc, #476]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000a68:	4877      	ldr	r0, [pc, #476]	; (8000c48 <ModbusRTURoutine+0x534>)
 8000a6a:	f002 fbd7 	bl	800321c <HAL_CRC_Calculate>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000a72:	7efb      	ldrb	r3, [r7, #27]
 8000a74:	3303      	adds	r3, #3
 8000a76:	8b3a      	ldrh	r2, [r7, #24]
 8000a78:	b2d1      	uxtb	r1, r2
 8000a7a:	4a72      	ldr	r2, [pc, #456]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000a7e:	8b3b      	ldrh	r3, [r7, #24]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000a84:	7efb      	ldrb	r3, [r7, #27]
 8000a86:	3304      	adds	r3, #4
 8000a88:	8b3a      	ldrh	r2, [r7, #24]
 8000a8a:	b2d1      	uxtb	r1, r2
 8000a8c:	4a6d      	ldr	r2, [pc, #436]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000a8e:	54d1      	strb	r1, [r2, r3]
						HAL_UART_Transmit_DMA(&huart2, TxData, (5+ByteCount));
 8000a90:	7efb      	ldrb	r3, [r7, #27]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3305      	adds	r3, #5
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	496a      	ldr	r1, [pc, #424]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000a9c:	486b      	ldr	r0, [pc, #428]	; (8000c4c <ModbusRTURoutine+0x538>)
 8000a9e:	f006 f973 	bl	8006d88 <HAL_UART_Transmit_DMA>
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000aa2:	e0c9      	b.n	8000c38 <ModbusRTURoutine+0x524>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f000 f8d7 	bl	8000c58 <ModbusExceptionHandler>
					break;
 8000aaa:	e0c5      	b.n	8000c38 <ModbusRTURoutine+0x524>

				case WRITE_SINGLE_AOHR:
				// Write Single parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					RequestedAddress = (temp[2] << 8) + temp[3];
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000ac0:	8c3a      	ldrh	r2, [r7, #32]
 8000ac2:	4b63      	ldr	r3, [pc, #396]	; (8000c50 <ModbusRTURoutine+0x53c>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aca:	4413      	add	r3, r2
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c

					/*
					 * Check if there is no such error:
					 * 1. the address of the holding Register is correct
					 */
					if ((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000ace:	8c3b      	ldrh	r3, [r7, #32]
 8000ad0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d918      	bls.n	8000b0a <ModbusRTURoutine+0x3f6>
 8000ad8:	8c3b      	ldrh	r3, [r7, #32]
 8000ada:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d813      	bhi.n	8000b0a <ModbusRTURoutine+0x3f6>
					{
						*ptemp16bitJCUConfig = (temp[4] << 8) + temp[5];
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	801a      	strh	r2, [r3, #0]

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						HAL_UART_Transmit_DMA(&huart2, RxData, Length);
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4954      	ldr	r1, [pc, #336]	; (8000c54 <ModbusRTURoutine+0x540>)
 8000b02:	4852      	ldr	r0, [pc, #328]	; (8000c4c <ModbusRTURoutine+0x538>)
 8000b04:	f006 f940 	bl	8006d88 <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 8000b08:	e096      	b.n	8000c38 <ModbusRTURoutine+0x524>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f000 f8a4 	bl	8000c58 <ModbusExceptionHandler>
					break;
 8000b10:	e092      	b.n	8000c38 <ModbusRTURoutine+0x524>

				case WRITE_MULTIPLE_AOHR:
				// Write multiple parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to write (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	789b      	ldrb	r3, [r3, #2]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000b26:	8c3a      	ldrh	r2, [r7, #32]
 8000b28:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <ModbusRTURoutine+0x53c>)
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b30:	4413      	add	r3, r2
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					// Defining how many Holding registers master wants to read
					AmountofWrite = (temp[4] << 8) + temp[5];
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	791b      	ldrb	r3, [r3, #4]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	795b      	ldrb	r3, [r3, #5]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	83bb      	strh	r3, [r7, #28]
					ByteCount = temp[6];
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	799b      	ldrb	r3, [r3, #6]
 8000b4c:	76fb      	strb	r3, [r7, #27]
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to write does not exceed amount possible infromation
					 * 3. Check if master quantity of Bytes in message is equal (quantity of register) * 2
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000b4e:	8c3b      	ldrh	r3, [r7, #32]
 8000b50:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d967      	bls.n	8000c28 <ModbusRTURoutine+0x514>
 8000b58:	8c3b      	ldrh	r3, [r7, #32]
 8000b5a:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d862      	bhi.n	8000c28 <ModbusRTURoutine+0x514>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofWrite) <= TOTAL_AOHR)
 8000b62:	8c3b      	ldrh	r3, [r7, #32]
 8000b64:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000b68:	3b41      	subs	r3, #65	; 0x41
 8000b6a:	8bba      	ldrh	r2, [r7, #28]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2b16      	cmp	r3, #22
 8000b70:	dc5a      	bgt.n	8000c28 <ModbusRTURoutine+0x514>
							&& (ByteCount == AmountofWrite*2))
 8000b72:	7efa      	ldrb	r2, [r7, #27]
 8000b74:	8bbb      	ldrh	r3, [r7, #28]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d155      	bne.n	8000c28 <ModbusRTURoutine+0x514>
					{
						//uint8_t *ptemp8bit = (uint8_t*) ptemp16bitJCUState;			// for more convenient shifting of bytes during writing, we are creating 8 bit pointer

						for (uint8_t i=0; i<ByteCount; i+=2)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000b82:	e019      	b.n	8000bb8 <ModbusRTURoutine+0x4a4>
						{
							*ptemp16bitJCUConfig = (temp[i+7] << 8) + temp[i+8];
 8000b84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b88:	3307      	adds	r3, #7
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b98:	3308      	adds	r3, #8
 8000b9a:	6939      	ldr	r1, [r7, #16]
 8000b9c:	5ccb      	ldrb	r3, [r1, r3]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba6:	801a      	strh	r2, [r3, #0]
							ptemp16bitJCUConfig++;
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	3302      	adds	r3, #2
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i+=2)
 8000bae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000bb8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000bbc:	7efb      	ldrb	r3, [r7, #27]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d3e0      	bcc.n	8000b84 <ModbusRTURoutine+0x470>
						}

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						for (uint8_t i = 0; i < 6; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000bc8:	e00c      	b.n	8000be4 <ModbusRTURoutine+0x4d0>
						{
							TxData[i] = temp[i];
 8000bca:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000bce:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	5c89      	ldrb	r1, [r1, r2]
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000bd8:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < 6; i++)
 8000bda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000bde:	3301      	adds	r3, #1
 8000be0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000be4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	d9ee      	bls.n	8000bca <ModbusRTURoutine+0x4b6>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+2));
 8000bec:	7efb      	ldrb	r3, [r7, #27]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4914      	ldr	r1, [pc, #80]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <ModbusRTURoutine+0x534>)
 8000bf6:	f002 fb11 	bl	800321c <HAL_CRC_Calculate>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+2] = CRCforResponse;
 8000bfe:	7efb      	ldrb	r3, [r7, #27]
 8000c00:	3302      	adds	r3, #2
 8000c02:	8b3a      	ldrh	r2, [r7, #24]
 8000c04:	b2d1      	uxtb	r1, r2
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000c08:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000c0a:	8b3b      	ldrh	r3, [r7, #24]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000c10:	7efb      	ldrb	r3, [r7, #27]
 8000c12:	3303      	adds	r3, #3
 8000c14:	8b3a      	ldrh	r2, [r7, #24]
 8000c16:	b2d1      	uxtb	r1, r2
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000c1a:	54d1      	strb	r1, [r2, r3]

						HAL_UART_Transmit_DMA(&huart2, TxData, WRITE_MULTIPLE_AOHR_BYTES_RESPONSE);
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	4909      	ldr	r1, [pc, #36]	; (8000c44 <ModbusRTURoutine+0x530>)
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <ModbusRTURoutine+0x538>)
 8000c22:	f006 f8b1 	bl	8006d88 <HAL_UART_Transmit_DMA>
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000c26:	e007      	b.n	8000c38 <ModbusRTURoutine+0x524>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 f815 	bl	8000c58 <ModbusExceptionHandler>
					break;
 8000c2e:	e003      	b.n	8000c38 <ModbusRTURoutine+0x524>

				default:
					// Modbus Exception 0x01 - Illegal Function
					ModbusExceptionHandler(MODBUS_ILLEGAL_FUNCTION);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f000 f811 	bl	8000c58 <ModbusExceptionHandler>
					break;
 8000c36:	bf00      	nop
 8000c38:	46ad      	mov	sp, r5
		// wait new packet
	}

	//HAL_UART_Receive_IT(&huart2, RxData, 256);

}
 8000c3a:	bf00      	nop
 8000c3c:	3738      	adds	r7, #56	; 0x38
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bdb0      	pop	{r4, r5, r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000ac 	.word	0x200000ac
 8000c48:	20000190 	.word	0x20000190
 8000c4c:	20000310 	.word	0x20000310
 8000c50:	7fff63bf 	.word	0x7fff63bf
 8000c54:	20000048 	.word	0x20000048

08000c58 <ModbusExceptionHandler>:

void ModbusExceptionHandler(uint8_t ExceptionCode)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	}
	else if (ExceptionCode == MODBUS_ILLEGAL_DATA_ADDRESS)
	{

	}
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <RunMotor>:
uint8_t PeriodCounter=0;



void RunMotor(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

	//EnableAlarmLED();

	if (PeriodCounter == 0)
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <RunMotor+0x34>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d108      	bne.n	8000c8e <RunMotor+0x1e>
	{
		ReadAngle_RequestErrors();
 8000c7c:	f7ff fcfa 	bl	8000674 <ReadAngle_RequestErrors>
		PeriodCounter++;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <RunMotor+0x34>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <RunMotor+0x34>)
 8000c8a:	701a      	strb	r2, [r3, #0]
		PeriodCounter++;
	else
		PeriodCounter = 0;
*/

}
 8000c8c:	e007      	b.n	8000c9e <RunMotor+0x2e>
		ReadErrors_RequestAngle();
 8000c8e:	f7ff fd0d 	bl	80006ac <ReadErrors_RequestAngle>
		HAL_ADC_Start_IT(&hadc1);
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <RunMotor+0x38>)
 8000c94:	f001 fa4e 	bl	8002134 <HAL_ADC_Start_IT>
		PeriodCounter=0;
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <RunMotor+0x34>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000046 	.word	0x20000046
 8000ca8:	200001b4 	.word	0x200001b4

08000cac <EnableMotor>:

void EnableMotor(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim1);
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <EnableMotor+0x44>)
 8000cb2:	f004 fef9 	bl	8005aa8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <EnableMotor+0x44>)
 8000cba:	f004 ffa1 	bl	8005c00 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <EnableMotor+0x44>)
 8000cc2:	f005 fe21 	bl	8006908 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <EnableMotor+0x44>)
 8000cca:	f004 ff99 	bl	8005c00 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <EnableMotor+0x44>)
 8000cd2:	f005 fe19 	bl	8006908 <HAL_TIMEx_PWMN_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 400);
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <EnableMotor+0x44>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 600);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <EnableMotor+0x44>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ce8:	639a      	str	r2, [r3, #56]	; 0x38
	//JCUConfig.StatusRegister |= ENABLE_MOTOR;

	//ClearErrorFlags();
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000260 	.word	0x20000260

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fe61 	bl	80019be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f840 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 fa6a 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d04:	f000 fa42 	bl	800118c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d08:	f000 f9f8 	bl	80010fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d0c:	f000 f88a 	bl	8000e24 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d10:	f000 f958 	bl	8000fc4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000d14:	f000 f918 	bl	8000f48 <MX_SPI1_Init>
  MX_CRC_Init();
 8000d18:	f000 f8e8 	bl	8000eec <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  // disable interrupt of DMA - half of reveive
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <main+0x74>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <main+0x74>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0204 	bic.w	r2, r2, #4
 8000d2a:	601a      	str	r2, [r3, #0]

  hdma_usart2_rx.Instance->CNDTR = BUFFSIZE;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <main+0x74>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2264      	movs	r2, #100	; 0x64
 8000d32:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart2, RxData, BUFFSIZE);
 8000d34:	2264      	movs	r2, #100	; 0x64
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <main+0x78>)
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <main+0x7c>)
 8000d3a:	f006 f8a3 	bl	8006e84 <HAL_UART_Receive_DMA>
  //JCUConfig.KiCurrentLoop = 5.6522;
  EnableMotor();
 8000d3e:	f7ff ffb5 	bl	8000cac <EnableMotor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <main+0x80>)
 8000d48:	f002 fffa 	bl	8003d40 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f000 feaa 	bl	8001aa8 <HAL_Delay>
	  if (JCUConfig.StatusRegister == 1)
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <main+0x84>)
 8000d56:	88db      	ldrh	r3, [r3, #6]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d1f2      	bne.n	8000d42 <main+0x4e>
		  HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <main+0x88>)
 8000d62:	f002 ffd5 	bl	8003d10 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000d66:	e7ec      	b.n	8000d42 <main+0x4e>
 8000d68:	20000148 	.word	0x20000148
 8000d6c:	20000048 	.word	0x20000048
 8000d70:	20000310 	.word	0x20000310
 8000d74:	48000800 	.word	0x48000800
 8000d78:	2000011c 	.word	0x2000011c
 8000d7c:	48000400 	.word	0x48000400

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b096      	sub	sp, #88	; 0x58
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2244      	movs	r2, #68	; 0x44
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 f852 	bl	8007e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000da2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000da6:	f002 fff3 	bl	8003d90 <HAL_PWREx_ControlVoltageScaling>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000db0:	f000 faf8 	bl	80013a4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f82a 	bl	8003e3c <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dee:	f000 fad9 	bl	80013a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2303      	movs	r3, #3
 8000df8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fc36 	bl	800467c <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e16:	f000 fac5 	bl	80013a4 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3758      	adds	r7, #88	; 0x58
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <MX_ADC1_Init+0xc0>)
 8000e3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000e9c:	f001 f802 	bl	8001ea4 <HAL_ADC_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000ea6:	f000 fa7d 	bl	80013a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_ADC1_Init+0xc4>)
 8000eac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb6:	237f      	movs	r3, #127	; 0x7f
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_ADC1_Init+0xbc>)
 8000ec8:	f001 fbbe 	bl	8002648 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ed2:	f000 fa67 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001b4 	.word	0x200001b4
 8000ee4:	50040000 	.word	0x50040000
 8000ee8:	2e300800 	.word	0x2e300800

08000eec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_CRC_Init+0x54>)
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <MX_CRC_Init+0x58>)
 8000ef4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_CRC_Init+0x54>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_CRC_Init+0x54>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f04:	2220      	movs	r2, #32
 8000f06:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	619a      	str	r2, [r3, #24]
	hcrc.Init.GeneratingPolynomial = 0x8005;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f10:	f248 0205 	movw	r2, #32773	; 0x8005
 8000f14:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0xFFFF;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f22:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_CRC_Init+0x54>)
 8000f2c:	f002 f912 	bl	8003154 <HAL_CRC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_CRC_Init+0x4e>
	{
	Error_Handler();
 8000f36:	f000 fa35 	bl	80013a4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000190 	.word	0x20000190
 8000f44:	40023000 	.word	0x40023000

08000f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_SPI1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f7e:	2218      	movs	r2, #24
 8000f80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000fa8:	f004 f854 	bl	8005054 <HAL_SPI_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f9f7 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200002ac 	.word	0x200002ac
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	222c      	movs	r2, #44	; 0x2c
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 ff21 	bl	8007e38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <MX_TIM1_Init+0x130>)
 8000ff8:	4a3f      	ldr	r2, [pc, #252]	; (80010f8 <MX_TIM1_Init+0x134>)
 8000ffa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <MX_TIM1_Init+0x130>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <MX_TIM1_Init+0x130>)
 8001004:	2220      	movs	r2, #32
 8001006:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <MX_TIM1_Init+0x130>)
 800100a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <MX_TIM1_Init+0x130>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <MX_TIM1_Init+0x130>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <MX_TIM1_Init+0x130>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001022:	4834      	ldr	r0, [pc, #208]	; (80010f4 <MX_TIM1_Init+0x130>)
 8001024:	f004 fd94 	bl	8005b50 <HAL_TIM_PWM_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800102e:	f000 f9b9 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800103e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001042:	4619      	mov	r1, r3
 8001044:	482b      	ldr	r0, [pc, #172]	; (80010f4 <MX_TIM1_Init+0x130>)
 8001046:	f005 fd2f 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001050:	f000 f9a8 	bl	80013a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001060:	2300      	movs	r3, #0
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	481e      	ldr	r0, [pc, #120]	; (80010f4 <MX_TIM1_Init+0x130>)
 800107a:	f005 f805 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001084:	f000 f98e 	bl	80013a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108c:	2204      	movs	r2, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4818      	ldr	r0, [pc, #96]	; (80010f4 <MX_TIM1_Init+0x130>)
 8001092:	f004 fff9 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800109c:	f000 f982 	bl	80013a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80010ac:	230a      	movs	r3, #10
 80010ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <MX_TIM1_Init+0x130>)
 80010d6:	f005 fd4d 	bl	8006b74 <HAL_TIMEx_ConfigBreakDeadTime>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80010e0:	f000 f960 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MX_TIM1_Init+0x130>)
 80010e6:	f000 fa85 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 80010ea:	bf00      	nop
 80010ec:	3758      	adds	r7, #88	; 0x58
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000260 	.word	0x20000260
 80010f8:	40012c00 	.word	0x40012c00

080010fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <MX_USART2_UART_Init+0x84>)
 8001104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <MX_USART2_UART_Init+0x88>)
 800110a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_USART2_UART_Init+0x80>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_USART2_UART_Init+0x80>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001120:	220c      	movs	r2, #12
 8001122:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USART2_UART_Init+0x80>)
 800112c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_USART2_UART_Init+0x80>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113e:	480f      	ldr	r0, [pc, #60]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001140:	f005 fdd3 	bl	8006cea <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800114a:	f000 f92b 	bl	80013a4 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart2.Instance->RTOR = ModbusTimeout;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <MX_USART2_UART_Init+0x8c>)
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	615a      	str	r2, [r3, #20]
  huart2.Instance->CR1 |= USART_CR1_RTOIE;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART2_UART_Init+0x80>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001166:	601a      	str	r2, [r3, #0]
  huart2.Instance->CR2 |= USART_CR2_RTOEN;
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <MX_USART2_UART_Init+0x80>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <MX_USART2_UART_Init+0x80>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE END USART2_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000310 	.word	0x20000310
 8001180:	40004400 	.word	0x40004400
 8001184:	001e8480 	.word	0x001e8480
 8001188:	20000010 	.word	0x20000010

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_DMA_Init+0x48>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <MX_DMA_Init+0x48>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6493      	str	r3, [r2, #72]	; 0x48
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MX_DMA_Init+0x48>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2010      	movs	r0, #16
 80011b0:	f001 ff99 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011b4:	2010      	movs	r0, #16
 80011b6:	f001 ffb2 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2011      	movs	r0, #17
 80011c0:	f001 ff91 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011c4:	2011      	movs	r0, #17
 80011c6:	f001 ffaa 	bl	800311e <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <MX_GPIO_Init+0xe0>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <MX_GPIO_Init+0xe0>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_GPIO_Init+0xe0>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_GPIO_Init+0xe0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <MX_GPIO_Init+0xe0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_GPIO_Init+0xe0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_GPIO_Init+0xe0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <MX_GPIO_Init+0xe0>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_GPIO_Init+0xe0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800123c:	481f      	ldr	r0, [pc, #124]	; (80012bc <MX_GPIO_Init+0xe4>)
 800123e:	f002 fd67 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f002 fd61 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_WHITE_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2118      	movs	r1, #24
 8001252:	481b      	ldr	r0, [pc, #108]	; (80012c0 <MX_GPIO_Init+0xe8>)
 8001254:	f002 fd5c 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8001258:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <MX_GPIO_Init+0xe4>)
 8001272:	f002 fbe3 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001276:	2310      	movs	r3, #16
 8001278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f002 fbd4 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LED_WHITE_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_WHITE_Pin;
 8001294:	2318      	movs	r3, #24
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_GPIO_Init+0xe8>)
 80012ac:	f002 fbc6 	bl	8003a3c <HAL_GPIO_Init>

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000400 	.word	0x48000400

080012c4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	RunMotor();
 80012cc:	f7ff fcd0 	bl	8000c70 <RunMotor>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	JCUState.Torque = HAL_ADC_GetValue(hadc);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 ffdc 	bl	800229e <HAL_ADC_GetValue>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_ADC_ConvCpltCallback+0x20>)
 80012ec:	80da      	strh	r2, [r3, #6]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, JCUState.Torque/4);
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 4096-JCUState.Torque/4);
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000110 	.word	0x20000110

080012fc <EndofBlock>:

void EndofBlock(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	// Check if it is timeout, and no new byte is coming
	if (huart2.Instance->ISR & USART_ISR_RTOF)
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <EndofBlock+0x2c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <EndofBlock+0x26>
	{

		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		ModbusRTURoutine(RxData, (BUFFSIZE - hdma_usart2_rx.Instance->CNDTR), BUFFSIZE);
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <EndofBlock+0x30>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001318:	2264      	movs	r2, #100	; 0x64
 800131a:	4619      	mov	r1, r3
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <EndofBlock+0x34>)
 800131e:	f7ff f9f9 	bl	8000714 <ModbusRTURoutine>
	}
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000310 	.word	0x20000310
 800132c:	20000148 	.word	0x20000148
 8001330:	20000048 	.word	0x20000048

08001334 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

	// disable DMA for reseting DMA's counter, after enable again
	__HAL_DMA_DISABLE(&hdma_usart2_rx);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_UART_TxCpltCallback+0x44>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_UART_TxCpltCallback+0x44>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Instance->CNDTR = BUFFSIZE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_UART_TxCpltCallback+0x44>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_UART_TxCpltCallback+0x44>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_UART_TxCpltCallback+0x44>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]


	HAL_UART_Receive_DMA(&huart2, RxData, BUFFSIZE);
 8001364:	2264      	movs	r2, #100	; 0x64
 8001366:	4905      	ldr	r1, [pc, #20]	; (800137c <HAL_UART_TxCpltCallback+0x48>)
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_TxCpltCallback+0x4c>)
 800136a:	f005 fd8b 	bl	8006e84 <HAL_UART_Receive_DMA>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000148 	.word	0x20000148
 800137c:	20000048 	.word	0x20000048
 8001380:	20000310 	.word	0x20000310

08001384 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2110      	movs	r1, #16
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f002 fcbc 	bl	8003d10 <HAL_GPIO_WritePin>
	EncoderDataParcing();
 8001398:	f7ff f928 	bl	80005ec <EncoderDataParcing>
	//EnableAlarmLED();
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b09e      	sub	sp, #120	; 0x78
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2254      	movs	r2, #84	; 0x54
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f006 fd0d 	bl	8007e38 <memset>
  if(hadc->Instance==ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <HAL_ADC_MspInit+0xd0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d14b      	bne.n	80014c0 <HAL_ADC_MspInit+0xc8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800142c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800142e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001432:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800143c:	230a      	movs	r3, #10
 800143e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001440:	2307      	movs	r3, #7
 8001442:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800144c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fb16 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001462:	f7ff ff9f 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_ADC_MspInit+0xd4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_ADC_MspInit+0xd4>)
 800146c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_ADC_MspInit+0xd4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_ADC_MspInit+0xd4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_ADC_MspInit+0xd4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_ADC_MspInit+0xd4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001496:	2340      	movs	r3, #64	; 0x40
 8001498:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800149a:	230b      	movs	r3, #11
 800149c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f002 fac6 	bl	8003a3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2012      	movs	r0, #18
 80014b6:	f001 fe16 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014ba:	2012      	movs	r0, #18
 80014bc:	f001 fe2f 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3778      	adds	r7, #120	; 0x78
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	50040000 	.word	0x50040000
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_CRC_MspInit+0x38>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10b      	bne.n	80014fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	6493      	str	r3, [r2, #72]	; 0x48
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023000 	.word	0x40023000
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d131      	bne.n	8001596 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8001562:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001574:	2305      	movs	r3, #5
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f002 fa5b 	bl	8003a3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2023      	movs	r0, #35	; 0x23
 800158c:	f001 fdab 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001590:	2023      	movs	r0, #35	; 0x23
 8001592:	f001 fdc4 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40013000 	.word	0x40013000
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_TIM_PWM_MspInit+0x44>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d113      	bne.n	80015e2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_TIM_PWM_MspInit+0x48>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_TIM_PWM_MspInit+0x48>)
 80015c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c4:	6613      	str	r3, [r2, #96]	; 0x60
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_PWM_MspInit+0x48>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2019      	movs	r0, #25
 80015d8:	f001 fd85 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015dc:	2019      	movs	r0, #25
 80015de:	f001 fd9e 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012c00 	.word	0x40012c00
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_TIM_MspPostInit+0xa0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d139      	bne.n	800168a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_TIM_MspPostInit+0xa4>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_TIM_MspPostInit+0xa4>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_TIM_MspPostInit+0xa4>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_TIM_MspPostInit+0xa4>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_TIM_MspPostInit+0xa4>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_TIM_MspPostInit+0xa4>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001646:	f44f 7360 	mov.w	r3, #896	; 0x380
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f002 f9e9 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_TIM_MspPostInit+0xa8>)
 8001686:	f002 f9d9 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b09e      	sub	sp, #120	; 0x78
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2254      	movs	r2, #84	; 0x54
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fbb9 	bl	8007e38 <memset>
  if(huart->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a55      	ldr	r2, [pc, #340]	; (8001820 <HAL_UART_MspInit+0x180>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f040 80a3 	bne.w	8001818 <HAL_UART_MspInit+0x178>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f9d2 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ea:	f7ff fe5b 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ee:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <HAL_UART_MspInit+0x184>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <HAL_UART_MspInit+0x184>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_UART_MspInit+0x184>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_UART_MspInit+0x184>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_UART_MspInit+0x184>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b44      	ldr	r3, [pc, #272]	; (8001824 <HAL_UART_MspInit+0x184>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800171e:	2304      	movs	r3, #4
 8001720:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f002 f97e 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001744:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001752:	2303      	movs	r3, #3
 8001754:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f002 f96c 	bl	8003a3c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_UART_MspInit+0x188>)
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_UART_MspInit+0x18c>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_UART_MspInit+0x188>)
 800176c:	2202      	movs	r2, #2
 800176e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_UART_MspInit+0x188>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001776:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <HAL_UART_MspInit+0x188>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_UART_MspInit+0x188>)
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_UART_MspInit+0x188>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_UART_MspInit+0x188>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_UART_MspInit+0x188>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_UART_MspInit+0x188>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800179a:	4823      	ldr	r0, [pc, #140]	; (8001828 <HAL_UART_MspInit+0x188>)
 800179c:	f001 fed8 	bl	8003550 <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80017a6:	f7ff fdfd 	bl	80013a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <HAL_UART_MspInit+0x188>)
 80017ae:	671a      	str	r2, [r3, #112]	; 0x70
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_UART_MspInit+0x188>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017b8:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <HAL_UART_MspInit+0x194>)
 80017ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017be:	2202      	movs	r2, #2
 80017c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017c4:	2210      	movs	r2, #16
 80017c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <HAL_UART_MspInit+0x190>)
 80017ee:	f001 feaf 	bl	8003550 <HAL_DMA_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_UART_MspInit+0x15c>
    {
      Error_Handler();
 80017f8:	f7ff fdd4 	bl	80013a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_UART_MspInit+0x190>)
 8001800:	66da      	str	r2, [r3, #108]	; 0x6c
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_UART_MspInit+0x190>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2026      	movs	r0, #38	; 0x26
 800180e:	f001 fc6a 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001812:	2026      	movs	r0, #38	; 0x26
 8001814:	f001 fc83 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3778      	adds	r7, #120	; 0x78
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004400 	.word	0x40004400
 8001824:	40021000 	.word	0x40021000
 8001828:	20000148 	.word	0x20000148
 800182c:	4002006c 	.word	0x4002006c
 8001830:	20000218 	.word	0x20000218
 8001834:	40020080 	.word	0x40020080

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f8f0 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Channel6_IRQHandler+0x10>)
 8001892:	f001 fff4 	bl	800387e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000148 	.word	0x20000148

080018a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA1_Channel7_IRQHandler+0x10>)
 80018a6:	f001 ffea 	bl	800387e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000218 	.word	0x20000218

080018b4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <ADC1_IRQHandler+0x10>)
 80018ba:	f000 fcfd 	bl	80022b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001b4 	.word	0x200001b4

080018c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018ce:	f004 fabb 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000260 	.word	0x20000260

080018dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <SPI1_IRQHandler+0x10>)
 80018e2:	f003 fd0b 	bl	80052fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200002ac 	.word	0x200002ac

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	EndofBlock();
 80018f4:	f7ff fd02 	bl	80012fc <EndofBlock>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USART2_IRQHandler+0x14>)
 80018fa:	f005 fb07 	bl	8006f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000310 	.word	0x20000310

08001908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <SystemInit+0x5c>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <SystemInit+0x5c>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <SystemInit+0x60>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <SystemInit+0x60>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <SystemInit+0x60>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <SystemInit+0x60>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <SystemInit+0x60>)
 8001934:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001938:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800193c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SystemInit+0x60>)
 8001940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001944:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <SystemInit+0x60>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <SystemInit+0x60>)
 800194c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SystemInit+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	40021000 	.word	0x40021000

0800196c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001970:	f7ff ffca 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001974:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001976:	e003      	b.n	8001980 <LoopCopyDataInit>

08001978 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800197a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800197c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800197e:	3104      	adds	r1, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001984:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001986:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001988:	d3f6      	bcc.n	8001978 <CopyDataInit>
	ldr	r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800198c:	e002      	b.n	8001994 <LoopFillZerobss>

0800198e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800198e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001990:	f842 3b04 	str.w	r3, [r2], #4

08001994 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001996:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001998:	d3f9      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199a:	f006 fa29 	bl	8007df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800199e:	f7ff f9a9 	bl	8000cf4 <main>

080019a2 <LoopForever>:

LoopForever:
    b LoopForever
 80019a2:	e7fe      	b.n	80019a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a4:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80019a8:	08007eb8 	.word	0x08007eb8
	ldr	r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019b0:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 80019b4:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 80019b8:	20000398 	.word	0x20000398

080019bc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <CAN1_RX0_IRQHandler>

080019be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c8:	2003      	movs	r0, #3
 80019ca:	f001 fb81 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f80e 	bl	80019f0 <HAL_InitTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	e001      	b.n	80019e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e0:	f7ff fce6 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_InitTick+0x6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d023      	beq.n	8001a4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_InitTick+0x70>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_InitTick+0x6c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fb8d 	bl	800313a <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d809      	bhi.n	8001a40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f001 fb57 	bl	80030e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_InitTick+0x74>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e007      	b.n	8001a50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e004      	b.n	8001a50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e001      	b.n	8001a50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000001c 	.word	0x2000001c
 8001a60:	20000014 	.word	0x20000014
 8001a64:	20000018 	.word	0x20000018

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	20000394 	.word	0x20000394

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000394 	.word	0x20000394

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000001c 	.word	0x2000001c

08001af0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <LL_ADC_SetOffset+0x44>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b90:	bf00      	nop
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	03fff000 	.word	0x03fff000

08001ba0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3360      	adds	r3, #96	; 0x60
 8001bae:	461a      	mov	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3360      	adds	r3, #96	; 0x60
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3330      	adds	r3, #48	; 0x30
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	211f      	movs	r1, #31
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 011f 	and.w	r1, r3, #31
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3314      	adds	r3, #20
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0e5b      	lsrs	r3, r3, #25
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0d1b      	lsrs	r3, r3, #20
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2107      	movs	r1, #7
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	0d1b      	lsrs	r3, r3, #20
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	431a      	orrs	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cf0:	bf00      	nop
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0318 	and.w	r3, r3, #24
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d20:	40d9      	lsrs	r1, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	400b      	ands	r3, r1
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	0007ffff 	.word	0x0007ffff

08001d44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6093      	str	r3, [r2, #8]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d7c:	d101      	bne.n	8001d82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_IsEnabled+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_IsEnabled+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e12c      	b.n	8002118 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fa93 	bl	80013f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff3f 	bl	8001d68 <LL_ADC_IsDeepPowerDownEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff25 	bl	8001d44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff5a 	bl	8001db8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff3e 	bl	8001d90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f14:	4b82      	ldr	r3, [pc, #520]	; (8002120 <HAL_ADC_Init+0x27c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	4a82      	ldr	r2, [pc, #520]	; (8002124 <HAL_ADC_Init+0x280>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff3c 	bl	8001db8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10d      	bne.n	8001f62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f043 0210 	orr.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff75 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8001f6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 80c5 	bne.w	8002106 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 80c1 	bne.w	8002106 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f8c:	f043 0202 	orr.w	r2, r3, #2
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff35 	bl	8001e08 <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fa4:	4860      	ldr	r0, [pc, #384]	; (8002128 <HAL_ADC_Init+0x284>)
 8001fa6:	f7ff ff2f 	bl	8001e08 <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	485d      	ldr	r0, [pc, #372]	; (800212c <HAL_ADC_Init+0x288>)
 8001fb8:	f7ff fd9a 	bl	8001af0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7e5b      	ldrb	r3, [r3, #25]
 8001fc0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fcc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fd2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d106      	bne.n	8001ff8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	045b      	lsls	r3, r3, #17
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <HAL_ADC_Init+0x28c>)
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	430b      	orrs	r3, r1
 8002026:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff12 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8002032:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff1f 	bl	8001e7c <LL_ADC_INJ_IsConversionOngoing>
 800203e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d13d      	bne.n	80020c2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13a      	bne.n	80020c2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002050:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002058:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002068:	f023 0302 	bic.w	r3, r3, #2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	69b9      	ldr	r1, [r7, #24]
 8002072:	430b      	orrs	r3, r1
 8002074:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800207c:	2b01      	cmp	r3, #1
 800207e:	d118      	bne.n	80020b2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800209c:	4311      	orrs	r1, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020a2:	430a      	orrs	r2, r1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	e007      	b.n	80020c2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10c      	bne.n	80020e4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f023 010f 	bic.w	r1, r3, #15
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
 80020e2:	e007      	b.n	80020f4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 020f 	bic.w	r2, r2, #15
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
 8002104:	e007      	b.n	8002116 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002116:	7ffb      	ldrb	r3, [r7, #31]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000014 	.word	0x20000014
 8002124:	053e2d63 	.word	0x053e2d63
 8002128:	50040000 	.word	0x50040000
 800212c:	50040300 	.word	0x50040300
 8002130:	fff0c007 	.word	0xfff0c007

08002134 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fe88 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 80a1 	bne.w	8002290 <HAL_ADC_Start_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_ADC_Start_IT+0x28>
 8002158:	2302      	movs	r3, #2
 800215a:	e09c      	b.n	8002296 <HAL_ADC_Start_IT+0x162>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fe4f 	bl	8002e08 <ADC_Enable>
 800216a:	4603      	mov	r3, r0
 800216c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 8088 	bne.w	8002286 <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	f023 0206 	bic.w	r2, r3, #6
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	659a      	str	r2, [r3, #88]	; 0x58
 80021a2:	e002      	b.n	80021aa <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	221c      	movs	r2, #28
 80021b0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 021c 	bic.w	r2, r2, #28
 80021c8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d108      	bne.n	80021e4 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0208 	orr.w	r2, r2, #8
 80021e0:	605a      	str	r2, [r3, #4]
          break;
 80021e2:	e008      	b.n	80021f6 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0204 	orr.w	r2, r2, #4
 80021f2:	605a      	str	r2, [r3, #4]
          break;
 80021f4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0210 	orr.w	r2, r2, #16
 800220c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02d      	beq.n	8002278 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002224:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d110      	bne.n	8002256 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0220 	bic.w	r2, r2, #32
 8002242:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002252:	605a      	str	r2, [r3, #4]
            break;
 8002254:	e011      	b.n	800227a <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002264:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0220 	orr.w	r2, r2, #32
 8002274:	605a      	str	r2, [r3, #4]
            break;
 8002276:	e000      	b.n	800227a <HAL_ADC_Start_IT+0x146>
        }
      }
 8002278:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fdd5 	bl	8001e2e <LL_ADC_REG_StartConversion>
 8002284:	e006      	b.n	8002294 <HAL_ADC_Start_IT+0x160>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800228e:	e001      	b.n	8002294 <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002290:	2302      	movs	r3, #2
 8002292:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d017      	beq.n	800230e <HAL_ADC_IRQHandler+0x56>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fe0b 	bl	8002f1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2202      	movs	r2, #2
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_ADC_IRQHandler+0x6a>
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05e      	beq.n	80023ea <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d059      	beq.n	80023ea <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fc55 	bl	8001c02 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03e      	beq.n	80023dc <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d135      	bne.n	80023dc <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b08      	cmp	r3, #8
 800237c:	d12e      	bne.n	80023dc <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fd67 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11a      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 020c 	bic.w	r2, r2, #12
 800239c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d112      	bne.n	80023dc <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
 80023c2:	e00b      	b.n	80023dc <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe ff7b 	bl	80012d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_ADC_IRQHandler+0x146>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002404:	2b00      	cmp	r3, #0
 8002406:	d072      	beq.n	80024ee <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06d      	beq.n	80024ee <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc26 	bl	8001c80 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002434:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fbe1 	bl	8001c02 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002440:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d047      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_ADC_IRQHandler+0x1b2>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d03f      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d13a      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d133      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12e      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fcf8 	bl	8001e7c <LL_ADC_INJ_IsConversionOngoing>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
 80024c6:	e00b      	b.n	80024e0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 0210 	orr.w	r2, r3, #16
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fcf3 	bl	8002ecc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2260      	movs	r2, #96	; 0x60
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d011      	beq.n	800251c <HAL_ADC_IRQHandler+0x264>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f886 	bl	8002620 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d012      	beq.n	800254c <HAL_ADC_IRQHandler+0x294>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fcd9 	bl	8002ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002552:	2b00      	cmp	r3, #0
 8002554:	d012      	beq.n	800257c <HAL_ADC_IRQHandler+0x2c4>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fccb 	bl	8002f08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d02a      	beq.n	80025dc <HAL_ADC_IRQHandler+0x324>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d025      	beq.n	80025dc <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002598:	2301      	movs	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	e008      	b.n	80025b0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f043 0202 	orr.w	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f830 	bl	8002634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2210      	movs	r2, #16
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d018      	beq.n	8002618 <HAL_ADC_IRQHandler+0x360>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f043 0208 	orr.w	r2, r3, #8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002610:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fc64 	bl	8002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0b6      	sub	sp, #216	; 0xd8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x22>
 8002666:	2302      	movs	r3, #2
 8002668:	e3b9      	b.n	8002dde <HAL_ADC_ConfigChannel+0x796>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fbed 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 839e 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	3b02      	subs	r3, #2
 8002692:	2b03      	cmp	r3, #3
 8002694:	d81b      	bhi.n	80026ce <HAL_ADC_ConfigChannel+0x86>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <HAL_ADC_ConfigChannel+0x54>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b5 	.word	0x080026b5
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026c5 	.word	0x080026c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	220c      	movs	r2, #12
 80026b0:	605a      	str	r2, [r3, #4]
          break;
 80026b2:	e011      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2212      	movs	r2, #18
 80026b8:	605a      	str	r2, [r3, #4]
          break;
 80026ba:	e00d      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2218      	movs	r2, #24
 80026c0:	605a      	str	r2, [r3, #4]
          break;
 80026c2:	e009      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ca:	605a      	str	r2, [r3, #4]
          break;
 80026cc:	e004      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2206      	movs	r2, #6
 80026d2:	605a      	str	r2, [r3, #4]
          break;
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fa9f 	bl	8001c28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fbb1 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 80026f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fbbd 	bl	8001e7c <LL_ADC_INJ_IsConversionOngoing>
 8002702:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 81a6 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 81a1 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	461a      	mov	r2, r3
 8002728:	f7ff fabd 	bl	8001ca6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	08db      	lsrs	r3, r3, #3
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d00a      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800275e:	f7ff f9fb 	bl	8001b58 <LL_ADC_SetOffset>
 8002762:	e17b      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa18 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x148>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fa0d 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	e01e      	b.n	80027ce <HAL_ADC_ConfigChannel+0x186>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fa02 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e004      	b.n	80027cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x19e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	e018      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e004      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800280e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f9d1 	bl	8001bcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f9b5 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f9aa 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	e01e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x24c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f99f 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800287c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e004      	b.n	8002892 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x264>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	e018      	b.n	80028de <HAL_ADC_ConfigChannel+0x296>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f96e 	bl	8001bcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f952 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x2d4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f947 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	e01e      	b.n	800295a <HAL_ADC_ConfigChannel+0x312>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f93c 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800293a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e004      	b.n	8002958 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800294e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x32a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	e016      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x358>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e004      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2102      	movs	r1, #2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f90d 	bl	8001bcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f8f1 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x396>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2103      	movs	r1, #3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f8e6 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	e017      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x3c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f8db 	bl	8001ba0 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x3de>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	e011      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x402>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d106      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f8b8 	bl	8001bcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f9d1 	bl	8001e08 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 813f 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff f93e 	bl	8001cfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	f040 8130 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x46c>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e019      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x4a0>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d079      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x4c0>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b06:	e015      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x4ec>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x50c>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x53c>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x562>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x594>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	e080      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x5b4>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	e015      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x5e0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x600>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	e017      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x630>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	61fb      	str	r3, [r7, #28]
  return result;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	ea42 0103 	orr.w	r1, r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x65c>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b1e      	subs	r3, #30
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	e01d      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x698>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  return result;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e005      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x684>
 8002cc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b1e      	subs	r3, #30
 8002cda:	051b      	lsls	r3, r3, #20
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fe ffdd 	bl	8001ca6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d06c      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf8:	483c      	ldr	r0, [pc, #240]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002cfa:	f7fe ff1f 	bl	8001b3c <LL_ADC_GetCommonPathInternalCh>
 8002cfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d127      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d121      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d157      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	482f      	ldr	r0, [pc, #188]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002d2e:	f7fe fef2 	bl	8001b16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <HAL_ADC_ConfigChannel+0x7b4>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4c:	e002      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f9      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d113      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x746>
 8002d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d12a      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d84:	4619      	mov	r1, r3
 8002d86:	4819      	ldr	r0, [pc, #100]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002d88:	f7fe fec5 	bl	8001b16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8c:	e021      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d11c      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d111      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db6:	4619      	mov	r1, r3
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002dba:	f7fe feac 	bl	8001b16 <LL_ADC_SetCommonPathInternalCh>
 8002dbe:	e008      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	37d8      	adds	r7, #216	; 0xd8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	80080000 	.word	0x80080000
 8002dec:	50040300 	.word	0x50040300
 8002df0:	c7520000 	.word	0xc7520000
 8002df4:	50040000 	.word	0x50040000
 8002df8:	20000014 	.word	0x20000014
 8002dfc:	053e2d63 	.word	0x053e2d63
 8002e00:	cb840000 	.word	0xcb840000
 8002e04:	80000001 	.word	0x80000001

08002e08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fff7 	bl	8001e08 <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d14d      	bne.n	8002ebc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <ADC_Enable+0xc0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e039      	b.n	8002ebe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe ffc6 	bl	8001de0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e54:	f7fe fe1c 	bl	8001a90 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5a:	e028      	b.n	8002eae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe ffd1 	bl	8001e08 <LL_ADC_IsEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe ffb5 	bl	8001de0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e76:	f7fe fe0b 	bl	8001a90 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d914      	bls.n	8002eae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00d      	beq.n	8002eae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e007      	b.n	8002ebe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d1cf      	bne.n	8002e5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	8000003f 	.word	0x8000003f

08002ecc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60d3      	str	r3, [r2, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__NVIC_GetPriorityGrouping+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0307 	and.w	r3, r3, #7
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	db0b      	blt.n	8002fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <__NVIC_EnableIRQ+0x38>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	; (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	; (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf28      	it	cs
 8003042:	2304      	movcs	r3, #4
 8003044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	2b06      	cmp	r3, #6
 800304c:	d902      	bls.n	8003054 <NVIC_EncodePriority+0x30>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3b03      	subs	r3, #3
 8003052:	e000      	b.n	8003056 <NVIC_EncodePriority+0x32>
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	401a      	ands	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43d9      	mvns	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	4313      	orrs	r3, r2
         );
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309c:	d301      	bcc.n	80030a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <SysTick_Config+0x40>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030aa:	210f      	movs	r1, #15
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f7ff ff8e 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SysTick_Config+0x40>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <SysTick_Config+0x40>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010

080030d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff29 	bl	8002f30 <__NVIC_SetPriorityGrouping>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f8:	f7ff ff3e 	bl	8002f78 <__NVIC_GetPriorityGrouping>
 80030fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6978      	ldr	r0, [r7, #20]
 8003104:	f7ff ff8e 	bl	8003024 <NVIC_EncodePriority>
 8003108:	4602      	mov	r2, r0
 800310a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff5d 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff31 	bl	8002f94 <__NVIC_EnableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffa2 	bl	800308c <SysTick_Config>
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e054      	b.n	8003210 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7f5b      	ldrb	r3, [r3, #29]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe f9aa 	bl	80014d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	791b      	ldrb	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_CRC_Init+0xc4>)
 8003190:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0218 	bic.w	r2, r2, #24
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	e00c      	b.n	80031be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f948 	bl	8003444 <HAL_CRCEx_Polynomial_Set>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e028      	b.n	8003210 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	795b      	ldrb	r3, [r3, #5]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295
 80031ce:	611a      	str	r2, [r3, #16]
 80031d0:	e004      	b.n	80031dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6912      	ldr	r2, [r2, #16]
 80031da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	04c11db7 	.word	0x04c11db7

0800321c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2202      	movs	r2, #2
 8003230:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d006      	beq.n	8003258 <HAL_CRC_Calculate+0x3c>
 800324a:	2b03      	cmp	r3, #3
 800324c:	d829      	bhi.n	80032a2 <HAL_CRC_Calculate+0x86>
 800324e:	2b01      	cmp	r3, #1
 8003250:	d019      	beq.n	8003286 <HAL_CRC_Calculate+0x6a>
 8003252:	2b02      	cmp	r3, #2
 8003254:	d01e      	beq.n	8003294 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003256:	e024      	b.n	80032a2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e00a      	b.n	8003274 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d3f0      	bcc.n	800325e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]
      break;
 8003284:	e00e      	b.n	80032a4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f812 	bl	80032b4 <CRC_Handle_8>
 8003290:	6138      	str	r0, [r7, #16]
      break;
 8003292:	e007      	b.n	80032a4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f899 	bl	80033d0 <CRC_Handle_16>
 800329e:	6138      	str	r0, [r7, #16]
      break;
 80032a0:	e000      	b.n	80032a4 <HAL_CRC_Calculate+0x88>
      break;
 80032a2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80032aa:	693b      	ldr	r3, [r7, #16]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	e023      	b.n	800330e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3301      	adds	r3, #1
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	440b      	add	r3, r1
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80032e0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	440b      	add	r3, r1
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80032f0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3303      	adds	r3, #3
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	440b      	add	r3, r1
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003304:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	429a      	cmp	r2, r3
 8003316:	d3d6      	bcc.n	80032c6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04d      	beq.n	80033be <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4413      	add	r3, r2
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d116      	bne.n	8003374 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	b21a      	sxth	r2, r3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3301      	adds	r3, #1
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	440b      	add	r3, r1
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b21b      	sxth	r3, r3
 8003362:	4313      	orrs	r3, r2
 8003364:	b21b      	sxth	r3, r3
 8003366:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	8b7a      	ldrh	r2, [r7, #26]
 8003372:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b03      	cmp	r3, #3
 800337c:	d11f      	bne.n	80033be <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	4413      	add	r3, r2
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	b21a      	sxth	r2, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	3301      	adds	r3, #1
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	440b      	add	r3, r1
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b21b      	sxth	r3, r3
 800339a:	4313      	orrs	r3, r2
 800339c:	b21b      	sxth	r3, r3
 800339e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	8b7a      	ldrh	r2, [r7, #26]
 80033aa:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e013      	b.n	800340a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	440b      	add	r3, r1
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3301      	adds	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	429a      	cmp	r2, r3
 8003412:	d3e6      	bcc.n	80033e2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	4413      	add	r3, r2
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003454:	231f      	movs	r3, #31
 8003456:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003458:	bf00      	nop
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	613a      	str	r2, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <HAL_CRCEx_Polynomial_Set+0x34>
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_CRCEx_Polynomial_Set+0x16>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b18      	cmp	r3, #24
 800347c:	d846      	bhi.n	800350c <HAL_CRCEx_Polynomial_Set+0xc8>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	08003513 	.word	0x08003513
 8003488:	0800350d 	.word	0x0800350d
 800348c:	0800350d 	.word	0x0800350d
 8003490:	0800350d 	.word	0x0800350d
 8003494:	0800350d 	.word	0x0800350d
 8003498:	0800350d 	.word	0x0800350d
 800349c:	0800350d 	.word	0x0800350d
 80034a0:	0800350d 	.word	0x0800350d
 80034a4:	08003501 	.word	0x08003501
 80034a8:	0800350d 	.word	0x0800350d
 80034ac:	0800350d 	.word	0x0800350d
 80034b0:	0800350d 	.word	0x0800350d
 80034b4:	0800350d 	.word	0x0800350d
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	0800350d 	.word	0x0800350d
 80034c0:	0800350d 	.word	0x0800350d
 80034c4:	080034f5 	.word	0x080034f5
 80034c8:	0800350d 	.word	0x0800350d
 80034cc:	0800350d 	.word	0x0800350d
 80034d0:	0800350d 	.word	0x0800350d
 80034d4:	0800350d 	.word	0x0800350d
 80034d8:	0800350d 	.word	0x0800350d
 80034dc:	0800350d 	.word	0x0800350d
 80034e0:	0800350d 	.word	0x0800350d
 80034e4:	080034e9 	.word	0x080034e9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d913      	bls.n	8003516 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034f2:	e010      	b.n	8003516 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b07      	cmp	r3, #7
 80034f8:	d90f      	bls.n	800351a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034fe:	e00c      	b.n	800351a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b0f      	cmp	r3, #15
 8003504:	d90b      	bls.n	800351e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800350a:	e008      	b.n	800351e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
      break;
 8003510:	e006      	b.n	8003520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003512:	bf00      	nop
 8003514:	e004      	b.n	8003520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800351e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 0118 	bic.w	r1, r3, #24
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e098      	b.n	8003694 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_DMA_Init+0x150>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d80f      	bhi.n	800358e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_DMA_Init+0x154>)
 8003576:	4413      	add	r3, r2
 8003578:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_DMA_Init+0x158>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a48      	ldr	r2, [pc, #288]	; (80036ac <HAL_DMA_Init+0x15c>)
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
 800358c:	e00e      	b.n	80035ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <HAL_DMA_Init+0x160>)
 8003596:	4413      	add	r3, r2
 8003598:	4a43      	ldr	r2, [pc, #268]	; (80036a8 <HAL_DMA_Init+0x158>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_DMA_Init+0x164>)
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003606:	d039      	beq.n	800367c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4a27      	ldr	r2, [pc, #156]	; (80036ac <HAL_DMA_Init+0x15c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d11a      	bne.n	8003648 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_DMA_Init+0x168>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f003 031c 	and.w	r3, r3, #28
 800361e:	210f      	movs	r1, #15
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	4924      	ldr	r1, [pc, #144]	; (80036b8 <HAL_DMA_Init+0x168>)
 8003628:	4013      	ands	r3, r2
 800362a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <HAL_DMA_Init+0x168>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f003 031c 	and.w	r3, r3, #28
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	491d      	ldr	r1, [pc, #116]	; (80036b8 <HAL_DMA_Init+0x168>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
 8003646:	e019      	b.n	800367c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_DMA_Init+0x16c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f003 031c 	and.w	r3, r3, #28
 8003654:	210f      	movs	r1, #15
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	4917      	ldr	r1, [pc, #92]	; (80036bc <HAL_DMA_Init+0x16c>)
 800365e:	4013      	ands	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_DMA_Init+0x16c>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f003 031c 	and.w	r3, r3, #28
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	4911      	ldr	r1, [pc, #68]	; (80036bc <HAL_DMA_Init+0x16c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40020407 	.word	0x40020407
 80036a4:	bffdfff8 	.word	0xbffdfff8
 80036a8:	cccccccd 	.word	0xcccccccd
 80036ac:	40020000 	.word	0x40020000
 80036b0:	bffdfbf8 	.word	0xbffdfbf8
 80036b4:	40020400 	.word	0x40020400
 80036b8:	400200a8 	.word	0x400200a8
 80036bc:	400204a8 	.word	0x400204a8

080036c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_DMA_Start_IT+0x20>
 80036dc:	2302      	movs	r3, #2
 80036de:	e04b      	b.n	8003778 <HAL_DMA_Start_IT+0xb8>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d13a      	bne.n	800376a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f95f 	bl	80039dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 020e 	orr.w	r2, r2, #14
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e00f      	b.n	8003758 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 020a 	orr.w	r2, r2, #10
 8003756:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e005      	b.n	8003776 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d008      	beq.n	80037aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2204      	movs	r2, #4
 800379c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e022      	b.n	80037f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 020e 	bic.w	r2, r2, #14
 80037b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f003 021c 	and.w	r2, r3, #28
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d005      	beq.n	8003820 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e029      	b.n	8003874 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f003 021c 	and.w	r2, r3, #28
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
    }
  }
  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f003 031c 	and.w	r3, r3, #28
 800389e:	2204      	movs	r2, #4
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d026      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x7a>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d021      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0204 	bic.w	r2, r2, #4
 80038d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 021c 	and.w	r2, r3, #28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2104      	movs	r1, #4
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d071      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038f6:	e06c      	b.n	80039d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	f003 031c 	and.w	r3, r3, #28
 8003900:	2202      	movs	r2, #2
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02e      	beq.n	800396a <HAL_DMA_IRQHandler+0xec>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d029      	beq.n	800396a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020a 	bic.w	r2, r2, #10
 8003932:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f003 021c 	and.w	r2, r3, #28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	2102      	movs	r1, #2
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d038      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003968:	e033      	b.n	80039d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f003 031c 	and.w	r3, r3, #28
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d02a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x156>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d025      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 021c 	and.w	r2, r3, #28
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2101      	movs	r1, #1
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
}
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d108      	bne.n	8003a20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a1e:	e007      	b.n	8003a30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4a:	e148      	b.n	8003cde <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 813a 	beq.w	8003cd8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d00b      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d007      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a78:	2b11      	cmp	r3, #17
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b12      	cmp	r3, #18
 8003a82:	d130      	bne.n	8003ae6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aba:	2201      	movs	r2, #1
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0201 	and.w	r2, r3, #1
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0xea>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b12      	cmp	r3, #18
 8003b24:	d123      	bne.n	8003b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	08da      	lsrs	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3208      	adds	r2, #8
 8003b68:	6939      	ldr	r1, [r7, #16]
 8003b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8094 	beq.w	8003cd8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_GPIO_Init+0x2c0>)
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb4:	4a51      	ldr	r2, [pc, #324]	; (8003cfc <HAL_GPIO_Init+0x2c0>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6613      	str	r3, [r2, #96]	; 0x60
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <HAL_GPIO_Init+0x2c0>)
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bc8:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_GPIO_Init+0x2c4>)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	220f      	movs	r2, #15
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bf2:	d00d      	beq.n	8003c10 <HAL_GPIO_Init+0x1d4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a43      	ldr	r2, [pc, #268]	; (8003d04 <HAL_GPIO_Init+0x2c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <HAL_GPIO_Init+0x1d0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <HAL_GPIO_Init+0x2cc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_GPIO_Init+0x1cc>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e004      	b.n	8003c12 <HAL_GPIO_Init+0x1d6>
 8003c08:	2307      	movs	r3, #7
 8003c0a:	e002      	b.n	8003c12 <HAL_GPIO_Init+0x1d6>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_GPIO_Init+0x1d6>
 8003c10:	2300      	movs	r3, #0
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	f002 0203 	and.w	r2, r2, #3
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c22:	4937      	ldr	r1, [pc, #220]	; (8003d00 <HAL_GPIO_Init+0x2c4>)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c5a:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c7e:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cae:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f aeaf 	bne.w	8003a4c <HAL_GPIO_Init+0x10>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48000800 	.word	0x48000800
 8003d0c:	40010400 	.word	0x40010400

08003d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d20:	787b      	ldrb	r3, [r7, #1]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d2c:	e002      	b.n	8003d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43d9      	mvns	r1, r3
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	400b      	ands	r3, r1
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	619a      	str	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40007000 	.word	0x40007000

08003d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9e:	d130      	bne.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da0:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d038      	beq.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2232      	movs	r2, #50	; 0x32
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0c9b      	lsrs	r3, r3, #18
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd4:	e002      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de8:	d102      	bne.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f2      	bne.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfc:	d110      	bne.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e00f      	b.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d007      	beq.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e18:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40007000 	.word	0x40007000
 8003e34:	20000014 	.word	0x20000014
 8003e38:	431bde83 	.word	0x431bde83

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f000 bc11 	b.w	8004672 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e50:	4ba0      	ldr	r3, [pc, #640]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80e4 	beq.w	800403a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4c>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	f040 808b 	bne.w	8003f96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 8087 	bne.w	8003f96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e88:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x64>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e3e8      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_RCC_OscConfig+0x7e>
 8003eb0:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb8:	e005      	b.n	8003ec6 <HAL_RCC_OscConfig+0x8a>
 8003eba:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d223      	bcs.n	8003f12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fd7a 	bl	80049c8 <RCC_SetFlashLatencyFromMSIRange>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e3c9      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ede:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7c      	ldr	r2, [pc, #496]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ee4:	f043 0308 	orr.w	r3, r3, #8
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b7a      	ldr	r3, [pc, #488]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4977      	ldr	r1, [pc, #476]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efc:	4b75      	ldr	r3, [pc, #468]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	4972      	ldr	r1, [pc, #456]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
 8003f10:	e025      	b.n	8003f5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f12:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6f      	ldr	r2, [pc, #444]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	496a      	ldr	r1, [pc, #424]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	4965      	ldr	r1, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fd3a 	bl	80049c8 <RCC_SetFlashLatencyFromMSIRange>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e389      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f5e:	f000 fc6f 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	495a      	ldr	r1, [pc, #360]	; (80040d8 <HAL_RCC_OscConfig+0x29c>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a58      	ldr	r2, [pc, #352]	; (80040dc <HAL_RCC_OscConfig+0x2a0>)
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f7e:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <HAL_RCC_OscConfig+0x2a4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd fd34 	bl	80019f0 <HAL_InitTick>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d052      	beq.n	8004038 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	e36d      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d032      	beq.n	8004004 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f9e:	4b4d      	ldr	r3, [pc, #308]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a4c      	ldr	r2, [pc, #304]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003faa:	f7fd fd71 	bl	8001a90 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fd6d 	bl	8001a90 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e356      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fd0:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a3f      	ldr	r2, [pc, #252]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	493a      	ldr	r1, [pc, #232]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	4935      	ldr	r1, [pc, #212]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
 8004002:	e01a      	b.n	800403a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004004:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a32      	ldr	r2, [pc, #200]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004010:	f7fd fd3e 	bl	8001a90 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004018:	f7fd fd3a 	bl	8001a90 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e323      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x1dc>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d073      	beq.n	800412e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d005      	beq.n	8004058 <HAL_RCC_OscConfig+0x21c>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d10e      	bne.n	8004070 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d063      	beq.n	800412c <HAL_RCC_OscConfig+0x2f0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d15f      	bne.n	800412c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e300      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x24c>
 800407a:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0x288>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x270>
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0x288>
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <HAL_RCC_OscConfig+0x298>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01b      	beq.n	8004104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fce0 	bl	8001a90 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d2:	e010      	b.n	80040f6 <HAL_RCC_OscConfig+0x2ba>
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08007e60 	.word	0x08007e60
 80040dc:	20000014 	.word	0x20000014
 80040e0:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fcd4 	bl	8001a90 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e2bd      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f6:	4baf      	ldr	r3, [pc, #700]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2a8>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fcc4 	bl	8001a90 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd fcc0 	bl	8001a90 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e2a9      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800411e:	4ba5      	ldr	r3, [pc, #660]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x2d0>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d060      	beq.n	80041fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x310>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d119      	bne.n	800417a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d116      	bne.n	800417a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414c:	4b99      	ldr	r3, [pc, #612]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_OscConfig+0x328>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e286      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b93      	ldr	r3, [pc, #588]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	4990      	ldr	r1, [pc, #576]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004178:	e040      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d023      	beq.n	80041ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004182:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a8b      	ldr	r2, [pc, #556]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd fc7f 	bl	8001a90 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7fd fc7b 	bl	8001a90 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e264      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a8:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	497c      	ldr	r1, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	e018      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ca:	4b7a      	ldr	r3, [pc, #488]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a79      	ldr	r2, [pc, #484]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7fd fc5b 	bl	8001a90 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041de:	f7fd fc57 	bl	8001a90 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e240      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f0:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d03c      	beq.n	8004282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01c      	beq.n	800424a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004210:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd fc36 	bl	8001a90 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004228:	f7fd fc32 	bl	8001a90 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e21b      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800423a:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 800423c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ef      	beq.n	8004228 <HAL_RCC_OscConfig+0x3ec>
 8004248:	e01b      	b.n	8004282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424a:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fd fc19 	bl	8001a90 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fd fc15 	bl	8001a90 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e1fe      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ef      	bne.n	8004262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80a6 	beq.w	80043dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004294:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a0:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	4a43      	ldr	r2, [pc, #268]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6593      	str	r3, [r2, #88]	; 0x58
 80042ac:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b8:	2301      	movs	r3, #1
 80042ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042bc:	4b3e      	ldr	r3, [pc, #248]	; (80043b8 <HAL_RCC_OscConfig+0x57c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d118      	bne.n	80042fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c8:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_OscConfig+0x57c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a3a      	ldr	r2, [pc, #232]	; (80043b8 <HAL_RCC_OscConfig+0x57c>)
 80042ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d4:	f7fd fbdc 	bl	8001a90 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fd fbd8 	bl	8001a90 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e1c1      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ee:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <HAL_RCC_OscConfig+0x57c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d108      	bne.n	8004314 <HAL_RCC_OscConfig+0x4d8>
 8004302:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004312:	e024      	b.n	800435e <HAL_RCC_OscConfig+0x522>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b05      	cmp	r3, #5
 800431a:	d110      	bne.n	800433e <HAL_RCC_OscConfig+0x502>
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800433c:	e00f      	b.n	800435e <HAL_RCC_OscConfig+0x522>
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434e:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fd fb93 	bl	8001a90 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fb8f 	bl	8001a90 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e176      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x578>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0ed      	beq.n	800436e <HAL_RCC_OscConfig+0x532>
 8004392:	e01a      	b.n	80043ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fd fb7c 	bl	8001a90 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800439a:	e00f      	b.n	80043bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fd fb78 	bl	8001a90 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d906      	bls.n	80043bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e15f      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043bc:	4baa      	ldr	r3, [pc, #680]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e8      	bne.n	800439c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d0:	4ba5      	ldr	r3, [pc, #660]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	4aa4      	ldr	r2, [pc, #656]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80043d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d03c      	beq.n	8004462 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01c      	beq.n	800442a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043f0:	4b9d      	ldr	r3, [pc, #628]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80043f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f6:	4a9c      	ldr	r2, [pc, #624]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fb46 	bl	8001a90 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004408:	f7fd fb42 	bl	8001a90 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e12b      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800441a:	4b93      	ldr	r3, [pc, #588]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800441c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ef      	beq.n	8004408 <HAL_RCC_OscConfig+0x5cc>
 8004428:	e01b      	b.n	8004462 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800442a:	4b8f      	ldr	r3, [pc, #572]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800442c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004430:	4a8d      	ldr	r2, [pc, #564]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd fb29 	bl	8001a90 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004442:	f7fd fb25 	bl	8001a90 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e10e      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004454:	4b84      	ldr	r3, [pc, #528]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ef      	bne.n	8004442 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8102 	beq.w	8004670 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	2b02      	cmp	r3, #2
 8004472:	f040 80c5 	bne.w	8004600 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004476:	4b7c      	ldr	r3, [pc, #496]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f003 0203 	and.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	429a      	cmp	r2, r3
 8004488:	d12c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	3b01      	subs	r3, #1
 8004496:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d123      	bne.n	80044e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d11b      	bne.n	80044e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d113      	bne.n	80044e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d109      	bne.n	80044e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	3b01      	subs	r3, #1
 80044de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d067      	beq.n	80045b4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	d062      	beq.n	80045b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044ea:	4b5f      	ldr	r3, [pc, #380]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0bb      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044fa:	4b5b      	ldr	r3, [pc, #364]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5a      	ldr	r2, [pc, #360]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004504:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004506:	f7fd fac3 	bl	8001a90 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fabf 	bl	8001a90 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0a8      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004520:	4b51      	ldr	r3, [pc, #324]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b4e      	ldr	r3, [pc, #312]	; (800466c <HAL_RCC_OscConfig+0x830>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800453c:	3a01      	subs	r2, #1
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004546:	0212      	lsls	r2, r2, #8
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800454e:	0852      	lsrs	r2, r2, #1
 8004550:	3a01      	subs	r2, #1
 8004552:	0552      	lsls	r2, r2, #21
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800455a:	0852      	lsrs	r2, r2, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	0652      	lsls	r2, r2, #25
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004566:	06d2      	lsls	r2, r2, #27
 8004568:	430a      	orrs	r2, r1
 800456a:	493f      	ldr	r1, [pc, #252]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004570:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a39      	ldr	r2, [pc, #228]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004588:	f7fd fa82 	bl	8001a90 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fa7e 	bl	8001a90 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e067      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ae:	e05f      	b.n	8004670 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e05e      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b4:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d157      	bne.n	8004670 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c0:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045cc:	4b26      	ldr	r3, [pc, #152]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a25      	ldr	r2, [pc, #148]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d8:	f7fd fa5a 	bl	8001a90 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fd fa56 	bl	8001a90 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e03f      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x7a4>
 80045fe:	e037      	b.n	8004670 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d02d      	beq.n	8004662 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a17      	ldr	r2, [pc, #92]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004624:	f023 0303 	bic.w	r3, r3, #3
 8004628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004630:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004638:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fd fa29 	bl	8001a90 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004642:	f7fd fa25 	bl	8001a90 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e00e      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <HAL_RCC_OscConfig+0x82c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x806>
 8004660:	e006      	b.n	8004670 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e005      	b.n	8004672 <HAL_RCC_OscConfig+0x836>
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000
 800466c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0c8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b66      	ldr	r3, [pc, #408]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d910      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b63      	ldr	r3, [pc, #396]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4961      	ldr	r1, [pc, #388]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b0      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d04c      	beq.n	8004766 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d4:	4b56      	ldr	r3, [pc, #344]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d121      	bne.n	8004724 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e09e      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ec:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d115      	bne.n	8004724 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e092      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004704:	4b4a      	ldr	r3, [pc, #296]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e086      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004714:	4b46      	ldr	r3, [pc, #280]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e07e      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004724:	4b42      	ldr	r3, [pc, #264]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f023 0203 	bic.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	493f      	ldr	r1, [pc, #252]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004736:	f7fd f9ab 	bl	8001a90 <HAL_GetTick>
 800473a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473c:	e00a      	b.n	8004754 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473e:	f7fd f9a7 	bl	8001a90 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e066      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 020c 	and.w	r2, r3, #12
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	429a      	cmp	r2, r3
 8004764:	d1eb      	bne.n	800473e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	492c      	ldr	r1, [pc, #176]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d210      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	4924      	ldr	r1, [pc, #144]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_ClockConfig+0x1b0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e036      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4918      	ldr	r1, [pc, #96]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4910      	ldr	r1, [pc, #64]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047f2:	f000 f825 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047f6:	4602      	mov	r2, r0
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_RCC_ClockConfig+0x1b4>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	490c      	ldr	r1, [pc, #48]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	5ccb      	ldrb	r3, [r1, r3]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	fa22 f303 	lsr.w	r3, r2, r3
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd f8ea 	bl	80019f0 <HAL_InitTick>
 800481c:	4603      	mov	r3, r0
 800481e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004820:	7afb      	ldrb	r3, [r7, #11]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40022000 	.word	0x40022000
 8004830:	40021000 	.word	0x40021000
 8004834:	08007e60 	.word	0x08007e60
 8004838:	20000014 	.word	0x20000014
 800483c:	20000018 	.word	0x20000018

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484e:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004858:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x34>
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d121      	bne.n	80048b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d11e      	bne.n	80048b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004874:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d107      	bne.n	8004890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 8004882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e005      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004890:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800489c:	4a2b      	ldr	r2, [pc, #172]	; (800494c <HAL_RCC_GetSysClockFreq+0x10c>)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10d      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d102      	bne.n	80048be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_GetSysClockFreq+0x110>)
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e004      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <HAL_RCC_GetSysClockFreq+0x114>)
 80048c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d134      	bne.n	8004938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ce:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d003      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0xac>
 80048e4:	e005      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCC_GetSysClockFreq+0x110>)
 80048e8:	617b      	str	r3, [r7, #20]
      break;
 80048ea:	e005      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_GetSysClockFreq+0x114>)
 80048ee:	617b      	str	r3, [r7, #20]
      break;
 80048f0:	e002      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	617b      	str	r3, [r7, #20]
      break;
 80048f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048f8:	4b13      	ldr	r3, [pc, #76]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	3301      	adds	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	fb02 f203 	mul.w	r2, r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_RCC_GetSysClockFreq+0x108>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	0e5b      	lsrs	r3, r3, #25
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	3301      	adds	r3, #1
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004938:	69bb      	ldr	r3, [r7, #24]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
 800494c:	08007e78 	.word	0x08007e78
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200

08004958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_RCC_GetHCLKFreq+0x14>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000014 	.word	0x20000014

08004970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004974:	f7ff fff0 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	4904      	ldr	r1, [pc, #16]	; (8004998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	08007e70 	.word	0x08007e70

0800499c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049a0:	f7ff ffda 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0adb      	lsrs	r3, r3, #11
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4904      	ldr	r1, [pc, #16]	; (80049c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	08007e70 	.word	0x08007e70

080049c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049d4:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049e0:	f7ff f9c8 	bl	8003d74 <HAL_PWREx_GetVoltageRange>
 80049e4:	6178      	str	r0, [r7, #20]
 80049e6:	e014      	b.n	8004a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f2:	6593      	str	r3, [r2, #88]	; 0x58
 80049f4:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a00:	f7ff f9b8 	bl	8003d74 <HAL_PWREx_GetVoltageRange>
 8004a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a18:	d10b      	bne.n	8004a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d919      	bls.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2ba0      	cmp	r3, #160	; 0xa0
 8004a24:	d902      	bls.n	8004a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a26:	2302      	movs	r3, #2
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e013      	b.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e010      	b.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d902      	bls.n	8004a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a38:	2303      	movs	r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e00a      	b.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d102      	bne.n	8004a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a44:	2302      	movs	r3, #2
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	e004      	b.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b70      	cmp	r3, #112	; 0x70
 8004a4e:	d101      	bne.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a50:	2301      	movs	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 0207 	bic.w	r2, r3, #7
 8004a5c:	4909      	ldr	r1, [pc, #36]	; (8004a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40022000 	.word	0x40022000

08004a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a90:	2300      	movs	r3, #0
 8004a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a94:	2300      	movs	r3, #0
 8004a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d031      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aac:	d01a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ab2:	d814      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004abc:	d10f      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004abe:	4bac      	ldr	r3, [pc, #688]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4aab      	ldr	r2, [pc, #684]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aca:	e00c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f9cc 	bl	8004e70 <RCCEx_PLLSAI1_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aec:	4ba0      	ldr	r3, [pc, #640]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	499d      	ldr	r1, [pc, #628]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7cfb      	ldrb	r3, [r7, #19]
 8004b06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8099 	beq.w	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b1a:	4b95      	ldr	r3, [pc, #596]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b30:	4b8f      	ldr	r3, [pc, #572]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	4a8e      	ldr	r2, [pc, #568]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4c:	4b89      	ldr	r3, [pc, #548]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a88      	ldr	r2, [pc, #544]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b58:	f7fc ff9a 	bl	8001a90 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b5e:	e009      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fc ff96 	bl	8001a90 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d902      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	74fb      	strb	r3, [r7, #19]
        break;
 8004b72:	e005      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b74:	4b7f      	ldr	r3, [pc, #508]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ef      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d155      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b86:	4b7a      	ldr	r3, [pc, #488]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01e      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d019      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ba2:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bae:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	4a6e      	ldr	r2, [pc, #440]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	4a6a      	ldr	r2, [pc, #424]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bce:	4a68      	ldr	r2, [pc, #416]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d016      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fc ff56 	bl	8001a90 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be6:	e00b      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fc ff52 	bl	8001a90 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d902      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	74fb      	strb	r3, [r7, #19]
            break;
 8004bfe:	e006      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c00:	4b5b      	ldr	r3, [pc, #364]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0ec      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c14:	4b56      	ldr	r3, [pc, #344]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	4953      	ldr	r1, [pc, #332]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c2a:	e004      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	74bb      	strb	r3, [r7, #18]
 8004c30:	e001      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c36:	7c7b      	ldrb	r3, [r7, #17]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	4a4b      	ldr	r2, [pc, #300]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c54:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 0203 	bic.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4943      	ldr	r1, [pc, #268]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f023 020c 	bic.w	r2, r3, #12
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	493a      	ldr	r1, [pc, #232]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c98:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	4932      	ldr	r1, [pc, #200]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cba:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	4929      	ldr	r1, [pc, #164]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	4921      	ldr	r1, [pc, #132]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4918      	ldr	r1, [pc, #96]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4910      	ldr	r1, [pc, #64]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d02c      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	4907      	ldr	r1, [pc, #28]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d60:	d10a      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d62:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	4a02      	ldr	r2, [pc, #8]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6c:	60d3      	str	r3, [r2, #12]
 8004d6e:	e015      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f871 	bl	8004e70 <RCCEx_PLLSAI1_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d028      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	492d      	ldr	r1, [pc, #180]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd2:	60d3      	str	r3, [r2, #12]
 8004dd4:	e011      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f842 	bl	8004e70 <RCCEx_PLLSAI1_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01c      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e06:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e14:	4915      	ldr	r1, [pc, #84]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f81f 	bl	8004e70 <RCCEx_PLLSAI1_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	4904      	ldr	r1, [pc, #16]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e62:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000

08004e70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e7e:	4b74      	ldr	r3, [pc, #464]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d018      	beq.n	8004ebc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e8a:	4b71      	ldr	r3, [pc, #452]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0203 	and.w	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d10d      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ea2:	4b6b      	ldr	r3, [pc, #428]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
       ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d047      	beq.n	8004f46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	e044      	b.n	8004f46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d018      	beq.n	8004ef6 <RCCEx_PLLSAI1_Config+0x86>
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d825      	bhi.n	8004f14 <RCCEx_PLLSAI1_Config+0xa4>
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d002      	beq.n	8004ed2 <RCCEx_PLLSAI1_Config+0x62>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d009      	beq.n	8004ee4 <RCCEx_PLLSAI1_Config+0x74>
 8004ed0:	e020      	b.n	8004f14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ed2:	4b5f      	ldr	r3, [pc, #380]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11d      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee2:	e01a      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ee4:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d116      	bne.n	8004f1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef4:	e013      	b.n	8004f1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ef6:	4b56      	ldr	r3, [pc, #344]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f02:	4b53      	ldr	r3, [pc, #332]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f12:	e006      	b.n	8004f22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e004      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10d      	bne.n	8004f46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f2a:	4b49      	ldr	r3, [pc, #292]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	4943      	ldr	r1, [pc, #268]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d17c      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f4c:	4b40      	ldr	r3, [pc, #256]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3f      	ldr	r2, [pc, #252]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fc fd9a 	bl	8001a90 <HAL_GetTick>
 8004f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f5e:	e009      	b.n	8004f74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f60:	f7fc fd96 	bl	8001a90 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d902      	bls.n	8004f74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	73fb      	strb	r3, [r7, #15]
        break;
 8004f72:	e005      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f74:	4b36      	ldr	r3, [pc, #216]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ef      	bne.n	8004f60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d15f      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d110      	bne.n	8004fae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f8c:	4b30      	ldr	r3, [pc, #192]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6892      	ldr	r2, [r2, #8]
 8004f9c:	0211      	lsls	r1, r2, #8
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68d2      	ldr	r2, [r2, #12]
 8004fa2:	06d2      	lsls	r2, r2, #27
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	492a      	ldr	r1, [pc, #168]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]
 8004fac:	e027      	b.n	8004ffe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d112      	bne.n	8004fda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fb4:	4b26      	ldr	r3, [pc, #152]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6892      	ldr	r2, [r2, #8]
 8004fc4:	0211      	lsls	r1, r2, #8
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6912      	ldr	r2, [r2, #16]
 8004fca:	0852      	lsrs	r2, r2, #1
 8004fcc:	3a01      	subs	r2, #1
 8004fce:	0552      	lsls	r2, r2, #21
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	491f      	ldr	r1, [pc, #124]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	610b      	str	r3, [r1, #16]
 8004fd8:	e011      	b.n	8004ffe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fda:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fe2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6892      	ldr	r2, [r2, #8]
 8004fea:	0211      	lsls	r1, r2, #8
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6952      	ldr	r2, [r2, #20]
 8004ff0:	0852      	lsrs	r2, r2, #1
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	0652      	lsls	r2, r2, #25
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	4915      	ldr	r1, [pc, #84]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a13      	ldr	r2, [pc, #76]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005008:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fc fd41 	bl	8001a90 <HAL_GetTick>
 800500e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005010:	e009      	b.n	8005026 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005012:	f7fc fd3d 	bl	8001a90 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d902      	bls.n	8005026 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	73fb      	strb	r3, [r7, #15]
          break;
 8005024:	e005      	b.n	8005032 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ef      	beq.n	8005012 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	4903      	ldr	r1, [pc, #12]	; (8005050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005042:	4313      	orrs	r3, r2
 8005044:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000

08005054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e095      	b.n	8005192 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005076:	d009      	beq.n	800508c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
 800507e:	e005      	b.n	800508c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc fa32 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050cc:	d902      	bls.n	80050d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e002      	b.n	80050da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050e2:	d007      	beq.n	80050f4 <HAL_SPI_Init+0xa0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	ea42 0103 	orr.w	r1, r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	f003 0204 	and.w	r2, r3, #4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005170:	ea42 0103 	orr.w	r1, r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_SPI_TransmitReceive_IT+0x20>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e091      	b.n	80052e0 <HAL_SPI_TransmitReceive_IT+0x144>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051ca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051d2:	7dbb      	ldrb	r3, [r7, #22]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d00d      	beq.n	80051f4 <HAL_SPI_TransmitReceive_IT+0x58>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051de:	d106      	bne.n	80051ee <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_TransmitReceive_IT+0x52>
 80051e8:	7dbb      	ldrb	r3, [r7, #22]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
 80051f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051f2:	e070      	b.n	80052d6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_SPI_TransmitReceive_IT+0x6a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005200:	887b      	ldrh	r3, [r7, #2]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
    goto error;
 800520a:	e064      	b.n	80052d6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b04      	cmp	r3, #4
 8005216:	d003      	beq.n	8005220 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2205      	movs	r2, #5
 800521c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	887a      	ldrh	r2, [r7, #2]
 8005236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	887a      	ldrh	r2, [r7, #2]
 8005242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	887a      	ldrh	r2, [r7, #2]
 800524a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005256:	d906      	bls.n	8005266 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <HAL_SPI_TransmitReceive_IT+0x150>)
 800525c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005262:	651a      	str	r2, [r3, #80]	; 0x50
 8005264:	e005      	b.n	8005272 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800526a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005270:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800527a:	d802      	bhi.n	8005282 <HAL_SPI_TransmitReceive_IT+0xe6>
 800527c:	887b      	ldrh	r3, [r7, #2]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d908      	bls.n	8005294 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e007      	b.n	80052a4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80052b2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d008      	beq.n	80052d4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e000      	b.n	80052d6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80052d4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	0800569f 	.word	0x0800569f
 80052f0:	08005705 	.word	0x08005705
 80052f4:	0800554f 	.word	0x0800554f
 80052f8:	0800560d 	.word	0x0800560d

080052fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10f      	bne.n	8005340 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	099b      	lsrs	r3, r3, #6
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
    return;
 800533e:	e0d7      	b.n	80054f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_SPI_IRQHandler+0x66>
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	09db      	lsrs	r3, r3, #7
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
    return;
 8005360:	e0c6      	b.n	80054f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_SPI_IRQHandler+0x8c>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	099b      	lsrs	r3, r3, #6
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80b4 	beq.w	80054f0 <HAL_SPI_IRQHandler+0x1f4>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80ad 	beq.w	80054f0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	099b      	lsrs	r3, r3, #6
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d023      	beq.n	80053ea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d011      	beq.n	80053d2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	e00b      	b.n	80053ea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	693b      	ldr	r3, [r7, #16]
        return;
 80053e8:	e082      	b.n	80054f0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d014      	beq.n	8005420 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00c      	beq.n	8005446 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	f043 0208 	orr.w	r2, r3, #8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04f      	beq.n	80054ee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800545c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <HAL_SPI_IRQHandler+0x17e>
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d034      	beq.n	80054e4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0203 	bic.w	r2, r2, #3
 8005488:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	2b00      	cmp	r3, #0
 8005490:	d011      	beq.n	80054b6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <HAL_SPI_IRQHandler+0x1fc>)
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe f9ac 	bl	80037fc <HAL_DMA_Abort_IT>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_SPI_IRQHandler+0x1fc>)
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe f996 	bl	80037fc <HAL_DMA_Abort_IT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80054e2:	e003      	b.n	80054ec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f813 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054ea:	e000      	b.n	80054ee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80054ec:	bf00      	nop
    return;
 80054ee:	bf00      	nop
  }
}
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08005525 	.word	0x08005525

080054fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff ffe5 	bl	8005510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	d923      	bls.n	80055aa <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	b292      	uxth	r2, r2
 800556e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b02      	subs	r3, #2
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d11f      	bne.n	80055d8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	e016      	b.n	80055d8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f103 020c 	add.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa10 	bl	8005a24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d912      	bls.n	8005644 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	881a      	ldrh	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	1c9a      	adds	r2, r3, #2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b02      	subs	r3, #2
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005642:	e012      	b.n	800566a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	330c      	adds	r3, #12
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d110      	bne.n	8005696 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005682:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9c7 	bl	8005a24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	b292      	uxth	r2, r2
 80056b2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f994 	bl	8005a24 <SPI_CloseRxTx_ISR>
    }
  }
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	1c9a      	adds	r2, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d110      	bne.n	800575c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005748:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f964 	bl	8005a24 <SPI_CloseRxTx_ISR>
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005774:	f7fc f98c 	bl	8001a90 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	4413      	add	r3, r2
 8005782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005784:	f7fc f984 	bl	8001a90 <HAL_GetTick>
 8005788:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	015b      	lsls	r3, r3, #5
 8005790:	0d1b      	lsrs	r3, r3, #20
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800579a:	e054      	b.n	8005846 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d050      	beq.n	8005846 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057a4:	f7fc f974 	bl	8001a90 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d902      	bls.n	80057ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d13d      	bne.n	8005836 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d2:	d111      	bne.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057dc:	d004      	beq.n	80057e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e6:	d107      	bne.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005800:	d10f      	bne.n	8005822 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e017      	b.n	8005866 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	3b01      	subs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4013      	ands	r3, r2
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	429a      	cmp	r2, r3
 8005854:	bf0c      	ite	eq
 8005856:	2301      	moveq	r3, #1
 8005858:	2300      	movne	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	429a      	cmp	r2, r3
 8005862:	d19b      	bne.n	800579c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000014 	.word	0x20000014

08005874 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005882:	f7fc f905 	bl	8001a90 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	4413      	add	r3, r2
 8005890:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005892:	f7fc f8fd 	bl	8001a90 <HAL_GetTick>
 8005896:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005898:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00da      	lsls	r2, r3, #3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	0d1b      	lsrs	r3, r3, #20
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	fb02 f303 	mul.w	r3, r2, r3
 80058ae:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80058b0:	e062      	b.n	8005978 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80058b8:	d109      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0x5a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80058cc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d050      	beq.n	8005978 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058d6:	f7fc f8db 	bl	8001a90 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d902      	bls.n	80058ec <SPI_WaitFifoStateUntilTimeout+0x78>
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d13d      	bne.n	8005968 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005904:	d111      	bne.n	800592a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590e:	d004      	beq.n	800591a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d107      	bne.n	800592a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005928:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005932:	d10f      	bne.n	8005954 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005952:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e010      	b.n	800598a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	3b01      	subs	r3, #1
 8005976:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d194      	bne.n	80058b2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000014 	.word	0x20000014

08005998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ff5f 	bl	8005874 <SPI_WaitFifoStateUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e027      	b.n	8005a1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	2180      	movs	r1, #128	; 0x80
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fec4 	bl	8005764 <SPI_WaitFlagStateUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e6:	f043 0220 	orr.w	r2, r3, #32
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e014      	b.n	8005a1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff ff38 	bl	8005874 <SPI_WaitFifoStateUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e000      	b.n	8005a1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a2c:	f7fc f830 	bl	8001a90 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0220 	bic.w	r2, r2, #32
 8005a40:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	2164      	movs	r1, #100	; 0x64
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff ffa6 	bl	8005998 <SPI_EndRxTxTransaction>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d115      	bne.n	8005a92 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d107      	bne.n	8005a82 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fd3e 	bl	80054fc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005a80:	e00e      	b.n	8005aa0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fc7a 	bl	8001384 <HAL_SPI_TxRxCpltCallback>
}
 8005a90:	e006      	b.n	8005aa0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fd38 	bl	8005510 <HAL_SPI_ErrorCallback>
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d001      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e03b      	b.n	8005b38 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_Base_Start_IT+0x4e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_Base_Start_IT+0x4e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d115      	bne.n	8005b22 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <HAL_TIM_Base_Start_IT+0xa4>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b06      	cmp	r3, #6
 8005b06:	d015      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x8c>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0e:	d011      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b20:	e008      	b.n	8005b34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e000      	b.n	8005b36 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	00010007 	.word	0x00010007

08005b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e049      	b.n	8005bf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fd16 	bl	80015a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fbb2 	bl	80062f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <HAL_TIM_PWM_Start_IT+0x24>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	e03c      	b.n	8005c9e <HAL_TIM_PWM_Start_IT+0x9e>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d109      	bne.n	8005c3e <HAL_TIM_PWM_Start_IT+0x3e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	bf14      	ite	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	2300      	moveq	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e02f      	b.n	8005c9e <HAL_TIM_PWM_Start_IT+0x9e>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d109      	bne.n	8005c58 <HAL_TIM_PWM_Start_IT+0x58>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e022      	b.n	8005c9e <HAL_TIM_PWM_Start_IT+0x9e>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d109      	bne.n	8005c72 <HAL_TIM_PWM_Start_IT+0x72>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	bf14      	ite	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2300      	moveq	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e015      	b.n	8005c9e <HAL_TIM_PWM_Start_IT+0x9e>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d109      	bne.n	8005c8c <HAL_TIM_PWM_Start_IT+0x8c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e008      	b.n	8005c9e <HAL_TIM_PWM_Start_IT+0x9e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0c4      	b.n	8005e30 <HAL_TIM_PWM_Start_IT+0x230>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start_IT+0xb6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb4:	e023      	b.n	8005cfe <HAL_TIM_PWM_Start_IT+0xfe>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start_IT+0xc6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc4:	e01b      	b.n	8005cfe <HAL_TIM_PWM_Start_IT+0xfe>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start_IT+0xd6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_PWM_Start_IT+0xfe>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start_IT+0xe6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_PWM_Start_IT+0xfe>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start_IT+0xf6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_PWM_Start_IT+0xfe>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d841      	bhi.n	8005d88 <HAL_TIM_PWM_Start_IT+0x188>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <HAL_TIM_PWM_Start_IT+0x10c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d77 	.word	0x08005d77
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0202 	orr.w	r2, r2, #2
 8005d4e:	60da      	str	r2, [r3, #12]
      break;
 8005d50:	e01b      	b.n	8005d8a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0204 	orr.w	r2, r2, #4
 8005d60:	60da      	str	r2, [r3, #12]
      break;
 8005d62:	e012      	b.n	8005d8a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	60da      	str	r2, [r3, #12]
      break;
 8005d74:	e009      	b.n	8005d8a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0210 	orr.w	r2, r2, #16
 8005d84:	60da      	str	r2, [r3, #12]
      break;
 8005d86:	e000      	b.n	8005d8a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8005d88:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fd92 	bl	80068bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	; (8005e38 <HAL_TIM_PWM_Start_IT+0x238>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_TIM_PWM_Start_IT+0x1b6>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a25      	ldr	r2, [pc, #148]	; (8005e3c <HAL_TIM_PWM_Start_IT+0x23c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_PWM_Start_IT+0x1b6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a23      	ldr	r2, [pc, #140]	; (8005e40 <HAL_TIM_PWM_Start_IT+0x240>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_TIM_PWM_Start_IT+0x1ba>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <HAL_TIM_PWM_Start_IT+0x1bc>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_TIM_PWM_Start_IT+0x238>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_TIM_PWM_Start_IT+0x1ee>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d004      	beq.n	8005dee <HAL_TIM_PWM_Start_IT+0x1ee>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <HAL_TIM_PWM_Start_IT+0x23c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d115      	bne.n	8005e1a <HAL_TIM_PWM_Start_IT+0x21a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <HAL_TIM_PWM_Start_IT+0x244>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d015      	beq.n	8005e2c <HAL_TIM_PWM_Start_IT+0x22c>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e06:	d011      	beq.n	8005e2c <HAL_TIM_PWM_Start_IT+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	e008      	b.n	8005e2c <HAL_TIM_PWM_Start_IT+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e000      	b.n	8005e2e <HAL_TIM_PWM_Start_IT+0x22e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	40014400 	.word	0x40014400
 8005e44:	00010007 	.word	0x00010007

08005e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0202 	mvn.w	r2, #2
 8005e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa16 	bl	80062bc <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa08 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fa19 	bl	80062d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0204 	mvn.w	r2, #4
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f9ec 	bl	80062bc <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9de 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f9ef 	bl	80062d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d11b      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0208 	mvn.w	r2, #8
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2204      	movs	r2, #4
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9c2 	bl	80062bc <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9b4 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9c5 	bl	80062d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0210 	mvn.w	r2, #16
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2208      	movs	r2, #8
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f998 	bl	80062bc <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f98a 	bl	80062a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f99b 	bl	80062d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0201 	mvn.w	r2, #1
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fb f97c 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe4:	2b80      	cmp	r3, #128	; 0x80
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fe40 	bl	8006c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006006:	d10e      	bne.n	8006026 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d107      	bne.n	8006026 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800601e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fe33 	bl	8006c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d10e      	bne.n	8006052 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d107      	bne.n	8006052 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f949 	bl	80062e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b20      	cmp	r3, #32
 800605e:	d10e      	bne.n	800607e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b20      	cmp	r3, #32
 800606c:	d107      	bne.n	800607e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0220 	mvn.w	r2, #32
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fdf3 	bl	8006c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0fd      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x216>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b14      	cmp	r3, #20
 80060ae:	f200 80f0 	bhi.w	8006292 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006293 	.word	0x08006293
 80060c0:	08006293 	.word	0x08006293
 80060c4:	08006293 	.word	0x08006293
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	08006293 	.word	0x08006293
 80060d0:	08006293 	.word	0x08006293
 80060d4:	08006293 	.word	0x08006293
 80060d8:	0800618f 	.word	0x0800618f
 80060dc:	08006293 	.word	0x08006293
 80060e0:	08006293 	.word	0x08006293
 80060e4:	08006293 	.word	0x08006293
 80060e8:	080061cf 	.word	0x080061cf
 80060ec:	08006293 	.word	0x08006293
 80060f0:	08006293 	.word	0x08006293
 80060f4:	08006293 	.word	0x08006293
 80060f8:	08006211 	.word	0x08006211
 80060fc:	08006293 	.word	0x08006293
 8006100:	08006293 	.word	0x08006293
 8006104:	08006293 	.word	0x08006293
 8006108:	08006251 	.word	0x08006251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f954 	bl	80063c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
      break;
 800614a:	e0a3      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f9b0 	bl	80064b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	619a      	str	r2, [r3, #24]
      break;
 800618c:	e082      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fa09 	bl	80065ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0208 	orr.w	r2, r2, #8
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	61da      	str	r2, [r3, #28]
      break;
 80061cc:	e062      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fa61 	bl	800669c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	61da      	str	r2, [r3, #28]
      break;
 800620e:	e041      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fa9e 	bl	8006758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800624e:	e021      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fad6 	bl	8006808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006290:	e000      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop

080062a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_Base_SetConfig+0x20>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d108      	bne.n	800632a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00b      	beq.n	800634a <TIM_Base_SetConfig+0x52>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d007      	beq.n	800634a <TIM_Base_SetConfig+0x52>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <TIM_Base_SetConfig+0xc0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_Base_SetConfig+0x52>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1d      	ldr	r2, [pc, #116]	; (80063bc <TIM_Base_SetConfig+0xc4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d108      	bne.n	800635c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0c      	ldr	r2, [pc, #48]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_Base_SetConfig+0xa0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <TIM_Base_SetConfig+0xc0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_Base_SetConfig+0xa0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <TIM_Base_SetConfig+0xc4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d103      	bne.n	80063a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	615a      	str	r2, [r3, #20]
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400

080063c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f023 0201 	bic.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 0302 	bic.w	r3, r3, #2
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a24      	ldr	r2, [pc, #144]	; (80064ac <TIM_OC1_SetConfig+0xec>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_OC1_SetConfig+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <TIM_OC1_SetConfig+0xf0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC1_SetConfig+0x70>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <TIM_OC1_SetConfig+0xf4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d10c      	bne.n	800644a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0308 	bic.w	r3, r3, #8
 8006436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <TIM_OC1_SetConfig+0xec>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d007      	beq.n	8006462 <TIM_OC1_SetConfig+0xa2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <TIM_OC1_SetConfig+0xf0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_OC1_SetConfig+0xa2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <TIM_OC1_SetConfig+0xf4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d111      	bne.n	8006486 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	621a      	str	r2, [r3, #32]
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400

080064b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0210 	bic.w	r2, r3, #16
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0320 	bic.w	r3, r3, #32
 8006506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <TIM_OC2_SetConfig+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <TIM_OC2_SetConfig+0xe8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_OC2_SetConfig+0x98>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <TIM_OC2_SetConfig+0xec>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC2_SetConfig+0x98>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <TIM_OC2_SetConfig+0xf0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d113      	bne.n	8006578 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400

080065ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d10d      	bne.n	800662a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a18      	ldr	r2, [pc, #96]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_OC3_SetConfig+0x96>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a17      	ldr	r2, [pc, #92]	; (8006694 <TIM_OC3_SetConfig+0xe8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_OC3_SetConfig+0x96>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a16      	ldr	r2, [pc, #88]	; (8006698 <TIM_OC3_SetConfig+0xec>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d113      	bne.n	800666a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	621a      	str	r2, [r3, #32]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400

0800669c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a14      	ldr	r2, [pc, #80]	; (800674c <TIM_OC4_SetConfig+0xb0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_OC4_SetConfig+0x74>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a13      	ldr	r2, [pc, #76]	; (8006750 <TIM_OC4_SetConfig+0xb4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_OC4_SetConfig+0x74>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <TIM_OC4_SetConfig+0xb8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d109      	bne.n	8006724 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40012c00 	.word	0x40012c00
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400

08006758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800679c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a13      	ldr	r2, [pc, #76]	; (80067fc <TIM_OC5_SetConfig+0xa4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_OC5_SetConfig+0x6a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a12      	ldr	r2, [pc, #72]	; (8006800 <TIM_OC5_SetConfig+0xa8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC5_SetConfig+0x6a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a11      	ldr	r2, [pc, #68]	; (8006804 <TIM_OC5_SetConfig+0xac>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d109      	bne.n	80067d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40014000 	.word	0x40014000
 8006804:	40014400 	.word	0x40014400

08006808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800684e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	051b      	lsls	r3, r3, #20
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <TIM_OC6_SetConfig+0xa8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_OC6_SetConfig+0x6c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <TIM_OC6_SetConfig+0xac>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC6_SetConfig+0x6c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a12      	ldr	r2, [pc, #72]	; (80068b8 <TIM_OC6_SetConfig+0xb0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d109      	bne.n	8006888 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400

080068bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2201      	movs	r2, #1
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_TIMEx_PWMN_Start_IT+0x24>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e022      	b.n	8006972 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d109      	bne.n	8006946 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	e015      	b.n	8006972 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d109      	bne.n	8006960 <HAL_TIMEx_PWMN_Start_IT+0x58>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	e008      	b.n	8006972 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e08b      	b.n	8006a92 <HAL_TIMEx_PWMN_Start_IT+0x18a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_TIMEx_PWMN_Start_IT+0x82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006988:	e013      	b.n	80069b2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d104      	bne.n	800699a <HAL_TIMEx_PWMN_Start_IT+0x92>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006998:	e00b      	b.n	80069b2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d104      	bne.n	80069aa <HAL_TIMEx_PWMN_Start_IT+0xa2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069a8:	e003      	b.n	80069b2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d01b      	beq.n	80069f0 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d821      	bhi.n	8006a02 <HAL_TIMEx_PWMN_Start_IT+0xfa>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_TIMEx_PWMN_Start_IT+0xc4>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d009      	beq.n	80069de <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80069ca:	e01a      	b.n	8006a02 <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0202 	orr.w	r2, r2, #2
 80069da:	60da      	str	r2, [r3, #12]
      break;
 80069dc:	e012      	b.n	8006a04 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0204 	orr.w	r2, r2, #4
 80069ec:	60da      	str	r2, [r3, #12]
      break;
 80069ee:	e009      	b.n	8006a04 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0208 	orr.w	r2, r2, #8
 80069fe:	60da      	str	r2, [r3, #12]
      break;
 8006a00:	e000      	b.n	8006a04 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 8006a02:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a12:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f93f 	bl	8006ca0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <HAL_TIMEx_PWMN_Start_IT+0x194>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIMEx_PWMN_Start_IT+0x148>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a44:	d004      	beq.n	8006a50 <HAL_TIMEx_PWMN_Start_IT+0x148>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_TIMEx_PWMN_Start_IT+0x198>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d115      	bne.n	8006a7c <HAL_TIMEx_PWMN_Start_IT+0x174>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <HAL_TIMEx_PWMN_Start_IT+0x19c>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d015      	beq.n	8006a8e <HAL_TIMEx_PWMN_Start_IT+0x186>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a68:	d011      	beq.n	8006a8e <HAL_TIMEx_PWMN_Start_IT+0x186>
    {
      __HAL_TIM_ENABLE(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	e008      	b.n	8006a8e <HAL_TIMEx_PWMN_Start_IT+0x186>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e000      	b.n	8006a90 <HAL_TIMEx_PWMN_Start_IT+0x188>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	00010007 	.word	0x00010007

08006aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e04f      	b.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d108      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b28:	d004      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40014000 	.word	0x40014000

08006b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e060      	b.n	8006c52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d115      	bne.n	8006c40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	051b      	lsls	r3, r3, #20
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00

08006c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e040      	b.n	8006d7e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d106      	bne.n	8006d12 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fa fcc7 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2224      	movs	r2, #36	; 0x24
 8006d16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0201 	bic.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb25 	bl	8007378 <UART_SetConfig>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e022      	b.n	8006d7e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fd25 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0201 	orr.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fdac 	bl	80078d4 <UART_CheckIdleState>
 8006d7c:	4603      	mov	r3, r0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d166      	bne.n	8006e6c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_UART_Transmit_DMA+0x22>
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e05f      	b.n	8006e6e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UART_Transmit_DMA+0x34>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e058      	b.n	8006e6e <HAL_UART_Transmit_DMA+0xe6>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2221      	movs	r2, #33	; 0x21
 8006de6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02b      	beq.n	8006e48 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df4:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <HAL_UART_Transmit_DMA+0xf0>)
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <HAL_UART_Transmit_DMA+0xf4>)
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e04:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <HAL_UART_Transmit_DMA+0xf8>)
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3328      	adds	r3, #40	; 0x28
 8006e20:	461a      	mov	r2, r3
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	f7fc fc4c 	bl	80036c0 <HAL_DMA_Start_IT>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2210      	movs	r2, #16
 8006e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e012      	b.n	8006e6e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2240      	movs	r2, #64	; 0x40
 8006e4e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e66:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	08007bc1 	.word	0x08007bc1
 8006e7c:	08007c15 	.word	0x08007c15
 8006e80:	08007d01 	.word	0x08007d01

08006e84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d131      	bne.n	8006efe <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_UART_Receive_DMA+0x22>
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e02a      	b.n	8006f00 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Receive_DMA+0x34>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e023      	b.n	8006f00 <HAL_UART_Receive_DMA+0x7c>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a0f      	ldr	r2, [pc, #60]	; (8006f08 <HAL_UART_Receive_DMA+0x84>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006eec:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fdb3 	bl	8007a60 <UART_Start_Receive_DMA>
 8006efa:	4603      	mov	r3, r0
 8006efc:	e000      	b.n	8006f00 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40008000 	.word	0x40008000

08006f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f32:	4013      	ands	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d113      	bne.n	8006f64 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00e      	beq.n	8006f64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 81ce 	beq.w	80072f6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
      }
      return;
 8006f62:	e1c8      	b.n	80072f6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80e3 	beq.w	8007132 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4ba6      	ldr	r3, [pc, #664]	; (8007214 <HAL_UART_IRQHandler+0x308>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 80d8 	beq.w	8007132 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d010      	beq.n	8006fae <HAL_UART_IRQHandler+0xa2>
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa4:	f043 0201 	orr.w	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <HAL_UART_IRQHandler+0xce>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd0:	f043 0204 	orr.w	r2, r3, #4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <HAL_UART_IRQHandler+0xfa>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ffc:	f043 0202 	orr.w	r2, r3, #2
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2208      	movs	r2, #8
 800702a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007032:	f043 0208 	orr.w	r2, r3, #8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <HAL_UART_IRQHandler+0x15e>
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00c      	beq.n	800706a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007060:	f043 0220 	orr.w	r2, r3, #32
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8142 	beq.w	80072fa <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00c      	beq.n	800709a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d004      	beq.n	80070ba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d031      	beq.n	800711e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fd51 	bl	8007b62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d123      	bne.n	8007116 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d013      	beq.n	800710e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	4a4b      	ldr	r2, [pc, #300]	; (8007218 <HAL_UART_IRQHandler+0x30c>)
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fc fb82 	bl	80037fc <HAL_DMA_Abort_IT>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d017      	beq.n	800712e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	e00f      	b.n	800712e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f91c 	bl	800734c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	e00b      	b.n	800712e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f918 	bl	800734c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	e007      	b.n	800712e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f914 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800712c:	e0e5      	b.n	80072fa <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712e:	bf00      	nop
    return;
 8007130:	e0e3      	b.n	80072fa <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	2b01      	cmp	r3, #1
 8007138:	f040 80a9 	bne.w	800728e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80a3 	beq.w	800728e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 809d 	beq.w	800728e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2210      	movs	r2, #16
 800715a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d158      	bne.n	800721c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007174:	893b      	ldrh	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 80c1 	beq.w	80072fe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007182:	893a      	ldrh	r2, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	f080 80ba 	bcs.w	80072fe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	893a      	ldrh	r2, [r7, #8]
 800718e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d12a      	bne.n	80071f8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0210 	bic.w	r2, r2, #16
 80071ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fc fac4 	bl	8003780 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007204:	b29b      	uxth	r3, r3
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8a7 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007212:	e074      	b.n	80072fe <HAL_UART_IRQHandler+0x3f2>
 8007214:	04000120 	.word	0x04000120
 8007218:	08007d7d 	.word	0x08007d7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007228:	b29b      	uxth	r3, r3
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d063      	beq.n	8007302 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800723a:	897b      	ldrh	r3, [r7, #10]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d060      	beq.n	8007302 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800724e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0210 	bic.w	r2, r2, #16
 8007280:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007282:	897b      	ldrh	r3, [r7, #10]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f86a 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800728c:	e039      	b.n	8007302 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00d      	beq.n	80072b4 <HAL_UART_IRQHandler+0x3a8>
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fd94 	bl	8007dda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072b2:	e029      	b.n	8007308 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d008      	beq.n	80072da <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
    }
    return;
 80072d8:	e015      	b.n	8007306 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d011      	beq.n	8007308 <HAL_UART_IRQHandler+0x3fc>
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fd5a 	bl	8007da8 <UART_EndTransmit_IT>
    return;
 80072f4:	e008      	b.n	8007308 <HAL_UART_IRQHandler+0x3fc>
      return;
 80072f6:	bf00      	nop
 80072f8:	e006      	b.n	8007308 <HAL_UART_IRQHandler+0x3fc>
    return;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <HAL_UART_IRQHandler+0x3fc>
      return;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007306:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop

08007310 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007378:	b5b0      	push	{r4, r5, r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	4313      	orrs	r3, r2
 800739a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4baf      	ldr	r3, [pc, #700]	; (8007660 <UART_SetConfig+0x2e8>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	69f9      	ldr	r1, [r7, #28]
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4aa4      	ldr	r2, [pc, #656]	; (8007664 <UART_SetConfig+0x2ec>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	4313      	orrs	r3, r2
 80073de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a9b      	ldr	r2, [pc, #620]	; (8007668 <UART_SetConfig+0x2f0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d121      	bne.n	8007442 <UART_SetConfig+0xca>
 80073fe:	4b9b      	ldr	r3, [pc, #620]	; (800766c <UART_SetConfig+0x2f4>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d817      	bhi.n	800743c <UART_SetConfig+0xc4>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0x9c>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007425 	.word	0x08007425
 8007418:	08007431 	.word	0x08007431
 800741c:	0800742b 	.word	0x0800742b
 8007420:	08007437 	.word	0x08007437
 8007424:	2301      	movs	r3, #1
 8007426:	76fb      	strb	r3, [r7, #27]
 8007428:	e070      	b.n	800750c <UART_SetConfig+0x194>
 800742a:	2302      	movs	r3, #2
 800742c:	76fb      	strb	r3, [r7, #27]
 800742e:	e06d      	b.n	800750c <UART_SetConfig+0x194>
 8007430:	2304      	movs	r3, #4
 8007432:	76fb      	strb	r3, [r7, #27]
 8007434:	e06a      	b.n	800750c <UART_SetConfig+0x194>
 8007436:	2308      	movs	r3, #8
 8007438:	76fb      	strb	r3, [r7, #27]
 800743a:	e067      	b.n	800750c <UART_SetConfig+0x194>
 800743c:	2310      	movs	r3, #16
 800743e:	76fb      	strb	r3, [r7, #27]
 8007440:	e064      	b.n	800750c <UART_SetConfig+0x194>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a8a      	ldr	r2, [pc, #552]	; (8007670 <UART_SetConfig+0x2f8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d132      	bne.n	80074b2 <UART_SetConfig+0x13a>
 800744c:	4b87      	ldr	r3, [pc, #540]	; (800766c <UART_SetConfig+0x2f4>)
 800744e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007452:	f003 030c 	and.w	r3, r3, #12
 8007456:	2b0c      	cmp	r3, #12
 8007458:	d828      	bhi.n	80074ac <UART_SetConfig+0x134>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0xe8>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007495 	.word	0x08007495
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074a1 	.word	0x080074a1
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	0800749b 	.word	0x0800749b
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074a7 	.word	0x080074a7
 8007494:	2300      	movs	r3, #0
 8007496:	76fb      	strb	r3, [r7, #27]
 8007498:	e038      	b.n	800750c <UART_SetConfig+0x194>
 800749a:	2302      	movs	r3, #2
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e035      	b.n	800750c <UART_SetConfig+0x194>
 80074a0:	2304      	movs	r3, #4
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	e032      	b.n	800750c <UART_SetConfig+0x194>
 80074a6:	2308      	movs	r3, #8
 80074a8:	76fb      	strb	r3, [r7, #27]
 80074aa:	e02f      	b.n	800750c <UART_SetConfig+0x194>
 80074ac:	2310      	movs	r3, #16
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	e02c      	b.n	800750c <UART_SetConfig+0x194>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a6b      	ldr	r2, [pc, #428]	; (8007664 <UART_SetConfig+0x2ec>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d125      	bne.n	8007508 <UART_SetConfig+0x190>
 80074bc:	4b6b      	ldr	r3, [pc, #428]	; (800766c <UART_SetConfig+0x2f4>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074ca:	d017      	beq.n	80074fc <UART_SetConfig+0x184>
 80074cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d0:	d817      	bhi.n	8007502 <UART_SetConfig+0x18a>
 80074d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d6:	d00b      	beq.n	80074f0 <UART_SetConfig+0x178>
 80074d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074dc:	d811      	bhi.n	8007502 <UART_SetConfig+0x18a>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <UART_SetConfig+0x172>
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e6:	d006      	beq.n	80074f6 <UART_SetConfig+0x17e>
 80074e8:	e00b      	b.n	8007502 <UART_SetConfig+0x18a>
 80074ea:	2300      	movs	r3, #0
 80074ec:	76fb      	strb	r3, [r7, #27]
 80074ee:	e00d      	b.n	800750c <UART_SetConfig+0x194>
 80074f0:	2302      	movs	r3, #2
 80074f2:	76fb      	strb	r3, [r7, #27]
 80074f4:	e00a      	b.n	800750c <UART_SetConfig+0x194>
 80074f6:	2304      	movs	r3, #4
 80074f8:	76fb      	strb	r3, [r7, #27]
 80074fa:	e007      	b.n	800750c <UART_SetConfig+0x194>
 80074fc:	2308      	movs	r3, #8
 80074fe:	76fb      	strb	r3, [r7, #27]
 8007500:	e004      	b.n	800750c <UART_SetConfig+0x194>
 8007502:	2310      	movs	r3, #16
 8007504:	76fb      	strb	r3, [r7, #27]
 8007506:	e001      	b.n	800750c <UART_SetConfig+0x194>
 8007508:	2310      	movs	r3, #16
 800750a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a54      	ldr	r2, [pc, #336]	; (8007664 <UART_SetConfig+0x2ec>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d173      	bne.n	80075fe <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007516:	7efb      	ldrb	r3, [r7, #27]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d824      	bhi.n	8007566 <UART_SetConfig+0x1ee>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <UART_SetConfig+0x1ac>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007549 	.word	0x08007549
 8007528:	08007567 	.word	0x08007567
 800752c:	08007551 	.word	0x08007551
 8007530:	08007567 	.word	0x08007567
 8007534:	08007557 	.word	0x08007557
 8007538:	08007567 	.word	0x08007567
 800753c:	08007567 	.word	0x08007567
 8007540:	08007567 	.word	0x08007567
 8007544:	0800755f 	.word	0x0800755f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007548:	f7fd fa12 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 800754c:	6178      	str	r0, [r7, #20]
        break;
 800754e:	e00f      	b.n	8007570 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007550:	4b48      	ldr	r3, [pc, #288]	; (8007674 <UART_SetConfig+0x2fc>)
 8007552:	617b      	str	r3, [r7, #20]
        break;
 8007554:	e00c      	b.n	8007570 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007556:	f7fd f973 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 800755a:	6178      	str	r0, [r7, #20]
        break;
 800755c:	e008      	b.n	8007570 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800755e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007562:	617b      	str	r3, [r7, #20]
        break;
 8007564:	e004      	b.n	8007570 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	76bb      	strb	r3, [r7, #26]
        break;
 800756e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 80fe 	beq.w	8007774 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	429a      	cmp	r2, r3
 8007586:	d305      	bcc.n	8007594 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	429a      	cmp	r2, r3
 8007592:	d902      	bls.n	800759a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	76bb      	strb	r3, [r7, #26]
 8007598:	e0ec      	b.n	8007774 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4618      	mov	r0, r3
 800759e:	f04f 0100 	mov.w	r1, #0
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	020b      	lsls	r3, r1, #8
 80075ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075b0:	0202      	lsls	r2, r0, #8
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	6849      	ldr	r1, [r1, #4]
 80075b6:	0849      	lsrs	r1, r1, #1
 80075b8:	4608      	mov	r0, r1
 80075ba:	f04f 0100 	mov.w	r1, #0
 80075be:	1814      	adds	r4, r2, r0
 80075c0:	eb43 0501 	adc.w	r5, r3, r1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	461a      	mov	r2, r3
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f8 fdfb 	bl	80001cc <__aeabi_uldivmod>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4613      	mov	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e4:	d308      	bcc.n	80075f8 <UART_SetConfig+0x280>
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ec:	d204      	bcs.n	80075f8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	e0bd      	b.n	8007774 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	76bb      	strb	r3, [r7, #26]
 80075fc:	e0ba      	b.n	8007774 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007606:	d168      	bne.n	80076da <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007608:	7efb      	ldrb	r3, [r7, #27]
 800760a:	2b08      	cmp	r3, #8
 800760c:	d834      	bhi.n	8007678 <UART_SetConfig+0x300>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <UART_SetConfig+0x29c>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007639 	.word	0x08007639
 8007618:	08007641 	.word	0x08007641
 800761c:	08007649 	.word	0x08007649
 8007620:	08007679 	.word	0x08007679
 8007624:	0800764f 	.word	0x0800764f
 8007628:	08007679 	.word	0x08007679
 800762c:	08007679 	.word	0x08007679
 8007630:	08007679 	.word	0x08007679
 8007634:	08007657 	.word	0x08007657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007638:	f7fd f99a 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 800763c:	6178      	str	r0, [r7, #20]
        break;
 800763e:	e020      	b.n	8007682 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007640:	f7fd f9ac 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 8007644:	6178      	str	r0, [r7, #20]
        break;
 8007646:	e01c      	b.n	8007682 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <UART_SetConfig+0x2fc>)
 800764a:	617b      	str	r3, [r7, #20]
        break;
 800764c:	e019      	b.n	8007682 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764e:	f7fd f8f7 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 8007652:	6178      	str	r0, [r7, #20]
        break;
 8007654:	e015      	b.n	8007682 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765a:	617b      	str	r3, [r7, #20]
        break;
 800765c:	e011      	b.n	8007682 <UART_SetConfig+0x30a>
 800765e:	bf00      	nop
 8007660:	efff69f3 	.word	0xefff69f3
 8007664:	40008000 	.word	0x40008000
 8007668:	40013800 	.word	0x40013800
 800766c:	40021000 	.word	0x40021000
 8007670:	40004400 	.word	0x40004400
 8007674:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	76bb      	strb	r3, [r7, #26]
        break;
 8007680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d075      	beq.n	8007774 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	005a      	lsls	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	441a      	add	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	fbb2 f3f3 	udiv	r3, r2, r3
 800769c:	b29b      	uxth	r3, r3
 800769e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b0f      	cmp	r3, #15
 80076a4:	d916      	bls.n	80076d4 <UART_SetConfig+0x35c>
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ac:	d212      	bcs.n	80076d4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f023 030f 	bic.w	r3, r3, #15
 80076b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	89fb      	ldrh	r3, [r7, #14]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	89fa      	ldrh	r2, [r7, #14]
 80076d0:	60da      	str	r2, [r3, #12]
 80076d2:	e04f      	b.n	8007774 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	76bb      	strb	r3, [r7, #26]
 80076d8:	e04c      	b.n	8007774 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076da:	7efb      	ldrb	r3, [r7, #27]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d828      	bhi.n	8007732 <UART_SetConfig+0x3ba>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x370>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	08007733 	.word	0x08007733
 80076f8:	08007723 	.word	0x08007723
 80076fc:	08007733 	.word	0x08007733
 8007700:	08007733 	.word	0x08007733
 8007704:	08007733 	.word	0x08007733
 8007708:	0800772b 	.word	0x0800772b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fd f930 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 8007710:	6178      	str	r0, [r7, #20]
        break;
 8007712:	e013      	b.n	800773c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fd f942 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 8007718:	6178      	str	r0, [r7, #20]
        break;
 800771a:	e00f      	b.n	800773c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800771c:	4b1b      	ldr	r3, [pc, #108]	; (800778c <UART_SetConfig+0x414>)
 800771e:	617b      	str	r3, [r7, #20]
        break;
 8007720:	e00c      	b.n	800773c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007722:	f7fd f88d 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 8007726:	6178      	str	r0, [r7, #20]
        break;
 8007728:	e008      	b.n	800773c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772e:	617b      	str	r3, [r7, #20]
        break;
 8007730:	e004      	b.n	800773c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	76bb      	strb	r3, [r7, #26]
        break;
 800773a:	bf00      	nop
    }

    if (pclk != 0U)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d018      	beq.n	8007774 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	085a      	lsrs	r2, r3, #1
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	441a      	add	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	b29b      	uxth	r3, r3
 8007756:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b0f      	cmp	r3, #15
 800775c:	d908      	bls.n	8007770 <UART_SetConfig+0x3f8>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007764:	d204      	bcs.n	8007770 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	60da      	str	r2, [r3, #12]
 800776e:	e001      	b.n	8007774 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007780:	7ebb      	ldrb	r3, [r7, #26]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bdb0      	pop	{r4, r5, r7, pc}
 800778a:	bf00      	nop
 800778c:	00f42400 	.word	0x00f42400

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7fa f8d4 	bl	8001a90 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10e      	bne.n	8007916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f82d 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e023      	b.n	800795e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d10e      	bne.n	8007942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f817 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00d      	b.n	800795e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	4613      	mov	r3, r2
 8007974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007976:	e05e      	b.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d05a      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007980:	f7fa f886 	bl	8001a90 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	429a      	cmp	r2, r3
 800798e:	d302      	bcc.n	8007996 <UART_WaitOnFlagUntilTimeout+0x30>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d11b      	bne.n	80079ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0201 	bic.w	r2, r2, #1
 80079b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e043      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d02c      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ea:	d124      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a04:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e00f      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d091      	beq.n	8007978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	88fa      	ldrh	r2, [r7, #6]
 8007a78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2222      	movs	r2, #34	; 0x22
 8007a88:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d02b      	beq.n	8007aea <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	4a25      	ldr	r2, [pc, #148]	; (8007b2c <UART_Start_Receive_DMA+0xcc>)
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	4a24      	ldr	r2, [pc, #144]	; (8007b30 <UART_Start_Receive_DMA+0xd0>)
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	4a23      	ldr	r2, [pc, #140]	; (8007b34 <UART_Start_Receive_DMA+0xd4>)
 8007aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	2200      	movs	r2, #0
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	4619      	mov	r1, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	f7fb fdfb 	bl	80036c0 <HAL_DMA_Start_IT>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00c      	beq.n	8007aea <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e01c      	b.n	8007b24 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b00:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0201 	orr.w	r2, r2, #1
 8007b10:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b20:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	08007c31 	.word	0x08007c31
 8007b30:	08007cc9 	.word	0x08007cc9
 8007b34:	08007d01 	.word	0x08007d01

08007b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b4e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b78:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0201 	bic.w	r2, r2, #1
 8007b88:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d107      	bne.n	8007ba2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0210 	bic.w	r2, r2, #16
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d114      	bne.n	8007c06 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bf2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c02:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c04:	e002      	b.n	8007c0c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7f9 fb94 	bl	8001334 <HAL_UART_TxCpltCallback>
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fb74 	bl	8007310 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d12a      	bne.n	8007ca2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c62:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c82:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d107      	bne.n	8007ca2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0210 	bic.w	r2, r2, #16
 8007ca0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d107      	bne.n	8007cba <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fb54 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cb8:	e002      	b.n	8007cc0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff fb32 	bl	8007324 <HAL_UART_RxCpltCallback>
}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d109      	bne.n	8007cf2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4619      	mov	r1, r3
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fb38 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cf0:	e002      	b.n	8007cf8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff fb20 	bl	8007338 <HAL_UART_RxHalfCpltCallback>
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b80      	cmp	r3, #128	; 0x80
 8007d26:	d109      	bne.n	8007d3c <UART_DMAError+0x3c>
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b21      	cmp	r3, #33	; 0x21
 8007d2c:	d106      	bne.n	8007d3c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007d36:	6978      	ldr	r0, [r7, #20]
 8007d38:	f7ff fefe 	bl	8007b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	d109      	bne.n	8007d5e <UART_DMAError+0x5e>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b22      	cmp	r3, #34	; 0x22
 8007d4e:	d106      	bne.n	8007d5e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007d58:	6978      	ldr	r0, [r7, #20]
 8007d5a:	f7ff ff02 	bl	8007b62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d64:	f043 0210 	orr.w	r2, r3, #16
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff faec 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff fad6 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7f9 fab1 	bl	8001334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <__libc_init_array>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4d0d      	ldr	r5, [pc, #52]	; (8007e28 <__libc_init_array+0x38>)
 8007df4:	4c0d      	ldr	r4, [pc, #52]	; (8007e2c <__libc_init_array+0x3c>)
 8007df6:	1b64      	subs	r4, r4, r5
 8007df8:	10a4      	asrs	r4, r4, #2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	42a6      	cmp	r6, r4
 8007dfe:	d109      	bne.n	8007e14 <__libc_init_array+0x24>
 8007e00:	4d0b      	ldr	r5, [pc, #44]	; (8007e30 <__libc_init_array+0x40>)
 8007e02:	4c0c      	ldr	r4, [pc, #48]	; (8007e34 <__libc_init_array+0x44>)
 8007e04:	f000 f820 	bl	8007e48 <_init>
 8007e08:	1b64      	subs	r4, r4, r5
 8007e0a:	10a4      	asrs	r4, r4, #2
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	42a6      	cmp	r6, r4
 8007e10:	d105      	bne.n	8007e1e <__libc_init_array+0x2e>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e18:	4798      	blx	r3
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7ee      	b.n	8007dfc <__libc_init_array+0xc>
 8007e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e22:	4798      	blx	r3
 8007e24:	3601      	adds	r6, #1
 8007e26:	e7f2      	b.n	8007e0e <__libc_init_array+0x1e>
 8007e28:	08007eb0 	.word	0x08007eb0
 8007e2c:	08007eb0 	.word	0x08007eb0
 8007e30:	08007eb0 	.word	0x08007eb0
 8007e34:	08007eb4 	.word	0x08007eb4

08007e38 <memset>:
 8007e38:	4402      	add	r2, r0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d100      	bne.n	8007e42 <memset+0xa>
 8007e40:	4770      	bx	lr
 8007e42:	f803 1b01 	strb.w	r1, [r3], #1
 8007e46:	e7f9      	b.n	8007e3c <memset+0x4>

08007e48 <_init>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	bf00      	nop
 8007e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4e:	bc08      	pop	{r3}
 8007e50:	469e      	mov	lr, r3
 8007e52:	4770      	bx	lr

08007e54 <_fini>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr
