
JCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d0  080092d0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d8  080092d8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080092e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000020  08009300  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08009300  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c6  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d2  00000000  00000000  0003b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236d9  00000000  00000000  00041498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a260  00000000  00000000  00064b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc466  00000000  00000000  0007edd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f18  00000000  00000000  0015b288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009270 	.word	0x08009270

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000024 	.word	0x20000024
 80001c8:	08009270 	.word	0x08009270

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <CheckErrorsEnc>:
volatile bool COF = 0;											// if 1 - invalid angle data, AS5048 internal error
volatile bool OCF = 1;											// always must be 1, if isn't - AS5048 internal error.
volatile bool EncoderErrorFlag = 0;

void CheckErrorsEnc()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	comp_high = (AGCDiagnosticValue[0] & 0x08);					// bitmask for comp_high flag
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <CheckErrorsEnc+0xb8>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	2b00      	cmp	r3, #0
 80004de:	bf14      	ite	ne
 80004e0:	2301      	movne	r3, #1
 80004e2:	2300      	moveq	r3, #0
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <CheckErrorsEnc+0xbc>)
 80004e8:	701a      	strb	r2, [r3, #0]
	comp_low = (AGCDiagnosticValue[0] & 0x04);					// bitmask for comp_low flag
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <CheckErrorsEnc+0xb8>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	bf14      	ite	ne
 80004f6:	2301      	movne	r3, #1
 80004f8:	2300      	moveq	r3, #0
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <CheckErrorsEnc+0xc0>)
 80004fe:	701a      	strb	r2, [r3, #0]
	COF = (AGCDiagnosticValue[0] & 0x02);						// bitmask for COF flag
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <CheckErrorsEnc+0xb8>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	2b00      	cmp	r3, #0
 800050a:	bf14      	ite	ne
 800050c:	2301      	movne	r3, #1
 800050e:	2300      	moveq	r3, #0
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <CheckErrorsEnc+0xc4>)
 8000514:	701a      	strb	r2, [r3, #0]
	OCF = (AGCDiagnosticValue[0] & 0x01);						// bitmask for OCF flag
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <CheckErrorsEnc+0xb8>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf14      	ite	ne
 8000522:	2301      	movne	r3, #1
 8000524:	2300      	moveq	r3, #0
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <CheckErrorsEnc+0xc8>)
 800052a:	701a      	strb	r2, [r3, #0]

	// Set/reset LED if we have/don't have an error
	if(comp_high == 1 || comp_low == 1 || COF == 1 || OCF == 0)
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <CheckErrorsEnc+0xbc>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d111      	bne.n	800055a <CheckErrorsEnc+0x8a>
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <CheckErrorsEnc+0xc0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10c      	bne.n	800055a <CheckErrorsEnc+0x8a>
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <CheckErrorsEnc+0xc4>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d107      	bne.n	800055a <CheckErrorsEnc+0x8a>
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <CheckErrorsEnc+0xc8>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	f083 0301 	eor.w	r3, r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d009      	beq.n	800056e <CheckErrorsEnc+0x9e>
	{
		EnableAlarmLED();
 800055a:	f000 f917 	bl	800078c <EnableAlarmLED>
		JCUState.Errors |= ERROR_ENCODER_MAGNET;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <CheckErrorsEnc+0xcc>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <CheckErrorsEnc+0xcc>)
 800056a:	801a      	strh	r2, [r3, #0]
 800056c:	e009      	b.n	8000582 <CheckErrorsEnc+0xb2>
	}
	else
	{
		DisableAlarmLED();
 800056e:	f000 f919 	bl	80007a4 <DisableAlarmLED>
		JCUState.Errors &=~ ERROR_ENCODER_MAGNET;
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <CheckErrorsEnc+0xcc>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <CheckErrorsEnc+0xcc>)
 800057e:	801a      	strh	r2, [r3, #0]
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000044 	.word	0x20000044
 800058c:	20000048 	.word	0x20000048
 8000590:	20000049 	.word	0x20000049
 8000594:	2000004a 	.word	0x2000004a
 8000598:	2000000a 	.word	0x2000000a
 800059c:	2000007c 	.word	0x2000007c

080005a0 <ParityOk>:

//--------------Calculate PARITY EVEN bit-----------------
bool ParityOk(uint16_t scancode)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]

	uint16_t parity = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	81fb      	strh	r3, [r7, #14]
	// checking 15 bits for EVEN Parity
	for (uint8_t i = 0; i < 15; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	737b      	strb	r3, [r7, #13]
 80005b2:	e00d      	b.n	80005d0 <ParityOk+0x30>
	{
		if(scancode & 0x01)										// see if LSB is 1
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <ParityOk+0x24>
		{
			parity++;											// if it 1 add counter of "ones"
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	3301      	adds	r3, #1
 80005c2:	81fb      	strh	r3, [r7, #14]
		}
		scancode = scancode >> 1;								// shift to next bit
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	085b      	lsrs	r3, r3, #1
 80005c8:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 15; i++)
 80005ca:	7b7b      	ldrb	r3, [r7, #13]
 80005cc:	3301      	adds	r3, #1
 80005ce:	737b      	strb	r3, [r7, #13]
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	2b0e      	cmp	r3, #14
 80005d4:	d9ee      	bls.n	80005b4 <ParityOk+0x14>
	}

	parity = parity & 0x01;
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	81fb      	strh	r3, [r7, #14]
	// Compare calculated parity and the MSB of received DATA, return "1" if they are the same
	return (parity == scancode);
 80005de:	89fa      	ldrh	r2, [r7, #14]
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <EncoderRoutine>:
//-------------------------------------------------------



void EncoderRoutine(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	switch(EncoderState)
 80005fc:	4b43      	ldr	r3, [pc, #268]	; (800070c <EncoderRoutine+0x114>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b07      	cmp	r3, #7
 8000602:	f200 8081 	bhi.w	8000708 <EncoderRoutine+0x110>
 8000606:	a201      	add	r2, pc, #4	; (adr r2, 800060c <EncoderRoutine+0x14>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	0800062d 	.word	0x0800062d
 8000610:	08000707 	.word	0x08000707
 8000614:	0800064d 	.word	0x0800064d
 8000618:	08000707 	.word	0x08000707
 800061c:	0800066d 	.word	0x0800066d
 8000620:	080006db 	.word	0x080006db
 8000624:	08000707 	.word	0x08000707
 8000628:	080006fb 	.word	0x080006fb
	{
		case (ENCODER_CLEAR_ERRORS):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2110      	movs	r1, #16
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f004 f822 	bl	800467c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadErrorFlagsAddress, Angle, SIZE);
 8000638:	2302      	movs	r3, #2
 800063a:	4a35      	ldr	r2, [pc, #212]	; (8000710 <EncoderRoutine+0x118>)
 800063c:	4935      	ldr	r1, [pc, #212]	; (8000714 <EncoderRoutine+0x11c>)
 800063e:	4836      	ldr	r0, [pc, #216]	; (8000718 <EncoderRoutine+0x120>)
 8000640:	f005 fa64 	bl	8005b0c <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ERRORS;
 8000644:	4b31      	ldr	r3, [pc, #196]	; (800070c <EncoderRoutine+0x114>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
		break;
 800064a:	e05d      	b.n	8000708 <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ERRORS):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_WAIT_ANGLE):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f004 f812 	bl	800467c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, AGCDiagnosticAddress, Angle, SIZE);			// read  read angle, and sent request to read errors, so that next communication we would have error information
 8000658:	2302      	movs	r3, #2
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <EncoderRoutine+0x118>)
 800065c:	492f      	ldr	r1, [pc, #188]	; (800071c <EncoderRoutine+0x124>)
 800065e:	482e      	ldr	r0, [pc, #184]	; (8000718 <EncoderRoutine+0x120>)
 8000660:	f005 fa54 	bl	8005b0c <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ANGLE;
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <EncoderRoutine+0x114>)
 8000666:	2203      	movs	r2, #3
 8000668:	701a      	strb	r2, [r3, #0]
		break;
 800066a:	e04d      	b.n	8000708 <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ANGLE):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_ANGLE):
			temp = (Angle[0] << 8) + Angle[1];
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <EncoderRoutine+0x118>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	b29a      	uxth	r2, r3
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <EncoderRoutine+0x118>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <EncoderRoutine+0x128>)
 8000682:	801a      	strh	r2, [r3, #0]
			if (ParityOk(temp))										// check parity, if angular data was corrupted
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <EncoderRoutine+0x128>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff89 	bl	80005a0 <ParityOk>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d015      	beq.n	80006c0 <EncoderRoutine+0xc8>
			{
				JCUState.Errors &=~ ERROR_ENCODER_PARITY;
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <EncoderRoutine+0x12c>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f023 0302 	bic.w	r3, r3, #2
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <EncoderRoutine+0x12c>)
 80006a0:	801a      	strh	r2, [r3, #0]
				temp &= 0x3FFF;										// remove status bits from angle information
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <EncoderRoutine+0x128>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <EncoderRoutine+0x128>)
 80006ae:	801a      	strh	r2, [r3, #0]
				JCUState.Angle = temp;								// update angle with latest value
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <EncoderRoutine+0x128>)
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <EncoderRoutine+0x12c>)
 80006b6:	805a      	strh	r2, [r3, #2]
				EncoderState = ENCODER_WAIT_DIAGNOSTIC;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <EncoderRoutine+0x114>)
 80006ba:	2205      	movs	r2, #5
 80006bc:	701a      	strb	r2, [r3, #0]
				break;
 80006be:	e023      	b.n	8000708 <EncoderRoutine+0x110>
			}
			else
			{
				//JCUState.Angle = 0;
				DisableMotor();
 80006c0:	f000 fd26 	bl	8001110 <DisableMotor>
				JCUState.Errors |= ERROR_ENCODER_PARITY;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <EncoderRoutine+0x12c>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <EncoderRoutine+0x12c>)
 80006d0:	801a      	strh	r2, [r3, #0]
				EncoderState = ENCODER_CLEAR_ERRORS;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <EncoderRoutine+0x114>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
				break;
 80006d8:	e016      	b.n	8000708 <EncoderRoutine+0x110>
			}

		case (ENCODER_WAIT_DIAGNOSTIC):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f003 ffcb 	bl	800467c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadAngle, AGCDiagnosticValue, SIZE);		// read data about error, and sent request to read angle, so that next communication we would have actual angle information
 80006e6:	2302      	movs	r3, #2
 80006e8:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <EncoderRoutine+0x130>)
 80006ea:	4910      	ldr	r1, [pc, #64]	; (800072c <EncoderRoutine+0x134>)
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <EncoderRoutine+0x120>)
 80006ee:	f005 fa0d 	bl	8005b0c <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_DIAGNOSTIC;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <EncoderRoutine+0x114>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e006      	b.n	8000708 <EncoderRoutine+0x110>
		case (ENCODER_LOCK_DIAGNOSTIC):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_DIAGNOSTIC):
			CheckErrorsEnc();
 80006fa:	f7ff fee9 	bl	80004d0 <CheckErrorsEnc>
			EncoderState = ENCODER_WAIT_ANGLE;
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <EncoderRoutine+0x114>)
 8000700:	2202      	movs	r2, #2
 8000702:	701a      	strb	r2, [r3, #0]
		break;
 8000704:	e000      	b.n	8000708 <EncoderRoutine+0x110>
		break;
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000003c 	.word	0x2000003c
 8000710:	20000040 	.word	0x20000040
 8000714:	20000004 	.word	0x20000004
 8000718:	20000168 	.word	0x20000168
 800071c:	20000008 	.word	0x20000008
 8000720:	20000046 	.word	0x20000046
 8000724:	2000007c 	.word	0x2000007c
 8000728:	20000044 	.word	0x20000044
 800072c:	20000000 	.word	0x20000000

08000730 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);				// put CS high again after end of data transfer
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f003 ff9c 	bl	800467c <HAL_GPIO_WritePin>
	if (EncoderState == ENCODER_LOCK_ERRORS)
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d103      	bne.n	8000754 <HAL_SPI_TxRxCpltCallback+0x24>
		EncoderState = ENCODER_WAIT_ANGLE;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 800074e:	2202      	movs	r2, #2
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e012      	b.n	800077a <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_ANGLE)
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d103      	bne.n	8000764 <HAL_SPI_TxRxCpltCallback+0x34>
		EncoderState = ENCODER_BUSY_ANGLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 800075e:	2204      	movs	r2, #4
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	e00a      	b.n	800077a <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_DIAGNOSTIC)
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b06      	cmp	r3, #6
 800076a:	d103      	bne.n	8000774 <HAL_SPI_TxRxCpltCallback+0x44>
		EncoderState = ENCODER_BUSY_DIAGNOSTIC;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 800076e:	2207      	movs	r2, #7
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e002      	b.n	800077a <HAL_SPI_TxRxCpltCallback+0x4a>
	else
		EncoderState = ENCODER_CLEAR_ERRORS;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <HAL_SPI_TxRxCpltCallback+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]

	EncoderRoutine();																// process data which we have just read
 800077a:	f7ff ff3d 	bl	80005f8 <EncoderRoutine>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000003c 	.word	0x2000003c

0800078c <EnableAlarmLED>:

void EnableAlarmLED(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <EnableAlarmLED+0x14>)
 8000798:	f003 ff70 	bl	800467c <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	48000800 	.word	0x48000800

080007a4 <DisableAlarmLED>:

void DisableAlarmLED(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <DisableAlarmLED+0x14>)
 80007b0:	f003 ff64 	bl	800467c <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	48000800 	.word	0x48000800

080007bc <ModbusRTURoutine>:
 * 43.5 us data is sent, 8 bytes
 */


void ModbusRTURoutine(uint8_t *pBUFFER, uint8_t Length)
{
 80007bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007c0:	b08f      	sub	sp, #60	; 0x3c
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
 80007ca:	466b      	mov	r3, sp
 80007cc:	461e      	mov	r6, r3
	//Length = BufferSize - hdma_usart1_rx.Instance->CNDTR;
	/*
	 * create temporary variables for ModBus parcing
	 */
	uint16_t CRCCalc = 0;							// CRC which will be calculated
 80007ce:	2300      	movs	r3, #0
 80007d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t CRCValue = 0;							// CRC which was sent by Master
 80007d2:	2300      	movs	r3, #0
 80007d4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t ModbusFunction = 0;						// Master modbus function (what action slave should do)
 80007d6:	2300      	movs	r3, #0
 80007d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t RequestedAddress = 0;					// started address which Master wants to read
 80007dc:	2300      	movs	r3, #0
 80007de:	843b      	strh	r3, [r7, #32]
	uint16_t AmountofRead = 0;						// amount of registers which master wants to read
 80007e0:	2300      	movs	r3, #0
 80007e2:	83fb      	strh	r3, [r7, #30]
	uint16_t AmountofWrite = 0;						// amount of registers which master wants to write
 80007e4:	2300      	movs	r3, #0
 80007e6:	83bb      	strh	r3, [r7, #28]
	uint8_t ByteCount = 0;							// amount of BYTEs which will be sent in response
 80007e8:	2300      	movs	r3, #0
 80007ea:	76fb      	strb	r3, [r7, #27]
	uint16_t CRCforResponse	= 0;					// CRC will be calculated for response data
 80007ec:	2300      	movs	r3, #0
 80007ee:	833b      	strh	r3, [r7, #24]
	uint8_t temp[Length];							// temporary array which we are gonna use to process incoming data
 80007f0:	78f9      	ldrb	r1, [r7, #3]
 80007f2:	460b      	mov	r3, r1
 80007f4:	3b01      	subs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	b2cb      	uxtb	r3, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	4698      	mov	r8, r3
 80007fe:	4691      	mov	r9, r2
 8000800:	f04f 0200 	mov.w	r2, #0
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800080c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000810:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000814:	b2cb      	uxtb	r3, r1
 8000816:	2200      	movs	r2, #0
 8000818:	461c      	mov	r4, r3
 800081a:	4615      	mov	r5, r2
 800081c:	f04f 0200 	mov.w	r2, #0
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	00eb      	lsls	r3, r5, #3
 8000826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800082a:	00e2      	lsls	r2, r4, #3
 800082c:	460b      	mov	r3, r1
 800082e:	3307      	adds	r3, #7
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	ebad 0d03 	sub.w	sp, sp, r3
 8000838:	466b      	mov	r3, sp
 800083a:	3300      	adds	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
	uint16_t *ptemp16bitJCUConfig = pJCUConfig;		// temporary pointer to shift between data which should be read or written pJCUConfig
 800083e:	4b9c      	ldr	r3, [pc, #624]	; (8000ab0 <ModbusRTURoutine+0x2f4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *ptemp16bitJCUState = pJCUState;		// temporary pointer to shift between data which should be read or written pJCUState
 8000844:	4b9b      	ldr	r3, [pc, #620]	; (8000ab4 <ModbusRTURoutine+0x2f8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	633b      	str	r3, [r7, #48]	; 0x30

	// putting all data to the temp array
	for (uint8_t i = 0; i < Length; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000850:	e00d      	b.n	800086e <ModbusRTURoutine+0xb2>
	{
		temp [i] = pBUFFER[i];
 8000852:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	441a      	add	r2, r3
 800085a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800085e:	7811      	ldrb	r1, [r2, #0]
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < Length; i++)
 8000864:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000868:	3301      	adds	r3, #1
 800086a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800086e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	429a      	cmp	r2, r3
 8000876:	d3ec      	bcc.n	8000852 <ModbusRTURoutine+0x96>
	}

	// comparing received and calculated CRCs

	CRCValue = temp[Length-1];
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	3b01      	subs	r3, #1
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue <<= 8;
 8000882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue = CRCValue + temp[Length-2];
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	3b02      	subs	r3, #2
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	5cd3      	ldrb	r3, [r2, r3]
 8000890:	b29a      	uxth	r2, r3
 8000892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000894:	4413      	add	r3, r2
 8000896:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCCalc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&temp, (Length-2));
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	3b02      	subs	r3, #2
 800089c:	461a      	mov	r2, r3
 800089e:	6939      	ldr	r1, [r7, #16]
 80008a0:	4885      	ldr	r0, [pc, #532]	; (8000ab8 <ModbusRTURoutine+0x2fc>)
 80008a2:	f003 f971 	bl	8003b88 <HAL_CRC_Calculate>
 80008a6:	4603      	mov	r3, r0
 80008a8:	84fb      	strh	r3, [r7, #38]	; 0x26

	// If data was not corrupted (CRC is ok)
	//if (1)
	if (CRCCalc == CRCValue)
 80008aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008ae:	429a      	cmp	r2, r3
 80008b0:	f040 830c 	bne.w	8000ecc <ModbusRTURoutine+0x710>
	{
		// Check if the message for us
		if (temp[0] == SLAVE_ID)
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f040 82f6 	bne.w	8000eac <ModbusRTURoutine+0x6f0>
		{
			// this packet for us, let's read it
			// Defining the modbus function
			ModbusFunction = temp[1];
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			switch (ModbusFunction)
 80008c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008cc:	3b01      	subs	r3, #1
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	f200 82e8 	bhi.w	8000ea4 <ModbusRTURoutine+0x6e8>
 80008d4:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <ModbusRTURoutine+0x120>)
 80008d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008da:	bf00      	nop
 80008dc:	0800091d 	.word	0x0800091d
 80008e0:	08000ea5 	.word	0x08000ea5
 80008e4:	08000a33 	.word	0x08000a33
 80008e8:	08000b83 	.word	0x08000b83
 80008ec:	08000ee3 	.word	0x08000ee3
 80008f0:	08000cb5 	.word	0x08000cb5
 80008f4:	08000ea5 	.word	0x08000ea5
 80008f8:	08000ea5 	.word	0x08000ea5
 80008fc:	08000ea5 	.word	0x08000ea5
 8000900:	08000ea5 	.word	0x08000ea5
 8000904:	08000ea5 	.word	0x08000ea5
 8000908:	08000ea5 	.word	0x08000ea5
 800090c:	08000ea5 	.word	0x08000ea5
 8000910:	08000ea5 	.word	0x08000ea5
 8000914:	08000ea5 	.word	0x08000ea5
 8000918:	08000d65 	.word	0x08000d65
			{
				case READ_COILS:
					// this part is reading JCUState.ControlRegister bit by bit. Detailed description of each bit(coils) in Motor_Driver.h

					// Defining the first address of coil Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	b29b      	uxth	r3, r3
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	b29a      	uxth	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	b29b      	uxth	r3, r3
 800092c:	4413      	add	r3, r2
 800092e:	843b      	strh	r3, [r7, #32]

					// Defining how many coil master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	b29b      	uxth	r3, r3
 8000936:	021b      	lsls	r3, r3, #8
 8000938:	b29a      	uxth	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	795b      	ldrb	r3, [r3, #5]
 800093e:	b29b      	uxth	r3, r3
 8000940:	4413      	add	r3, r2
 8000942:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000944:	8bfb      	ldrh	r3, [r7, #30]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the coil is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ENABLE_MOTOR_Pos) && (RequestedAddress <= SOFTWARE_RESET_Pos))
 800094c:	8c3b      	ldrh	r3, [r7, #32]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d06b      	beq.n	8000a2a <ModbusRTURoutine+0x26e>
 8000952:	8c3b      	ldrh	r3, [r7, #32]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d868      	bhi.n	8000a2a <ModbusRTURoutine+0x26e>
							&& (((RequestedAddress - ENABLE_MOTOR_Pos) + AmountofRead) <= TOTAL_COILS))
 8000958:	8c3a      	ldrh	r2, [r7, #32]
 800095a:	8bfb      	ldrh	r3, [r7, #30]
 800095c:	4413      	add	r3, r2
 800095e:	3b01      	subs	r3, #1
 8000960:	2b10      	cmp	r3, #16
 8000962:	d862      	bhi.n	8000a2a <ModbusRTURoutine+0x26e>
					{
						TxData[0] = SLAVE_ID;
 8000964:	2201      	movs	r2, #1
 8000966:	4b55      	ldr	r3, [pc, #340]	; (8000abc <ModbusRTURoutine+0x300>)
 8000968:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 800096a:	4a54      	ldr	r2, [pc, #336]	; (8000abc <ModbusRTURoutine+0x300>)
 800096c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000970:	7053      	strb	r3, [r2, #1]
						//TxData[2] = ByteCount;
						uint16_t tempvalue = JCUConfig.ControlRegister;
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <ModbusRTURoutine+0x304>)
 8000974:	88db      	ldrh	r3, [r3, #6]
 8000976:	817b      	strh	r3, [r7, #10]
						if (RequestedAddress < 8)
 8000978:	8c3b      	ldrh	r3, [r7, #32]
 800097a:	2b07      	cmp	r3, #7
 800097c:	d819      	bhi.n	80009b2 <ModbusRTURoutine+0x1f6>
						{

							tempvalue <<= 8 + (8 - RequestedAddress); 	// move one byte, and other bits from byte which we do not need
 800097e:	897a      	ldrh	r2, [r7, #10]
 8000980:	8c3b      	ldrh	r3, [r7, #32]
 8000982:	f1c3 0310 	rsb	r3, r3, #16
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	817b      	strh	r3, [r7, #10]
							tempvalue >>= 8 + (8 - RequestedAddress);	// fill emptiness with zeros on the left
 800098c:	897a      	ldrh	r2, [r7, #10]
 800098e:	8c3b      	ldrh	r3, [r7, #32]
 8000990:	f1c3 0310 	rsb	r3, r3, #16
 8000994:	fa42 f303 	asr.w	r3, r2, r3
 8000998:	817b      	strh	r3, [r7, #10]
							TxData[4] = tempvalue;
 800099a:	897b      	ldrh	r3, [r7, #10]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b47      	ldr	r3, [pc, #284]	; (8000abc <ModbusRTURoutine+0x300>)
 80009a0:	711a      	strb	r2, [r3, #4]
							tempvalue >>= 8;
 80009a2:	897b      	ldrh	r3, [r7, #10]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	817b      	strh	r3, [r7, #10]
							TxData[3] = tempvalue;
 80009a8:	897b      	ldrh	r3, [r7, #10]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b43      	ldr	r3, [pc, #268]	; (8000abc <ModbusRTURoutine+0x300>)
 80009ae:	70da      	strb	r2, [r3, #3]
 80009b0:	e00a      	b.n	80009c8 <ModbusRTURoutine+0x20c>
						}
						else
						{
							TxData[4] = tempvalue;
 80009b2:	897b      	ldrh	r3, [r7, #10]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <ModbusRTURoutine+0x300>)
 80009b8:	711a      	strb	r2, [r3, #4]
							tempvalue >>= 8;
 80009ba:	897b      	ldrh	r3, [r7, #10]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	817b      	strh	r3, [r7, #10]
							TxData[3] = tempvalue;
 80009c0:	897b      	ldrh	r3, [r7, #10]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <ModbusRTURoutine+0x300>)
 80009c6:	70da      	strb	r2, [r3, #3]
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 80009c8:	7efb      	ldrb	r3, [r7, #27]
 80009ca:	3303      	adds	r3, #3
 80009cc:	461a      	mov	r2, r3
 80009ce:	493b      	ldr	r1, [pc, #236]	; (8000abc <ModbusRTURoutine+0x300>)
 80009d0:	4839      	ldr	r0, [pc, #228]	; (8000ab8 <ModbusRTURoutine+0x2fc>)
 80009d2:	f003 f8d9 	bl	8003b88 <HAL_CRC_Calculate>
 80009d6:	4603      	mov	r3, r0
 80009d8:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 80009da:	7efb      	ldrb	r3, [r7, #27]
 80009dc:	3303      	adds	r3, #3
 80009de:	8b3a      	ldrh	r2, [r7, #24]
 80009e0:	b2d1      	uxtb	r1, r2
 80009e2:	4a36      	ldr	r2, [pc, #216]	; (8000abc <ModbusRTURoutine+0x300>)
 80009e4:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 80009e6:	8b3b      	ldrh	r3, [r7, #24]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 80009ec:	7efb      	ldrb	r3, [r7, #27]
 80009ee:	3304      	adds	r3, #4
 80009f0:	8b3a      	ldrh	r2, [r7, #24]
 80009f2:	b2d1      	uxtb	r1, r2
 80009f4:	4a31      	ldr	r2, [pc, #196]	; (8000abc <ModbusRTURoutine+0x300>)
 80009f6:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 80009f8:	bf00      	nop
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <ModbusRTURoutine+0x308>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a08:	d0f7      	beq.n	80009fa <ModbusRTURoutine+0x23e>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	482e      	ldr	r0, [pc, #184]	; (8000ac8 <ModbusRTURoutine+0x30c>)
 8000a10:	f003 fe34 	bl	800467c <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000a14:	7efb      	ldrb	r3, [r7, #27]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3305      	adds	r3, #5
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4927      	ldr	r1, [pc, #156]	; (8000abc <ModbusRTURoutine+0x300>)
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <ModbusRTURoutine+0x308>)
 8000a22:	f007 f96b 	bl	8007cfc <HAL_UART_Transmit_DMA>
					{
 8000a26:	bf00      	nop
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}



					break;
 8000a28:	e25c      	b.n	8000ee4 <ModbusRTURoutine+0x728>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fa6c 	bl	8000f08 <ModbusExceptionHandler>
					break;
 8000a30:	e258      	b.n	8000ee4 <ModbusRTURoutine+0x728>

				case READ_AOHR:
					// Read JCU parameters which Master has set (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	78db      	ldrb	r3, [r3, #3]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000a46:	8c3a      	ldrh	r2, [r7, #32]
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <ModbusRTURoutine+0x310>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a50:	4413      	add	r3, r2
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c

					// Defining how many Holding registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000a68:	8bfb      	ldrh	r3, [r7, #30]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000a70:	8c3b      	ldrh	r3, [r7, #32]
 8000a72:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d97f      	bls.n	8000b7a <ModbusRTURoutine+0x3be>
 8000a7a:	8c3b      	ldrh	r3, [r7, #32]
 8000a7c:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d87a      	bhi.n	8000b7a <ModbusRTURoutine+0x3be>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofRead) <= TOTAL_AOHR))
 8000a84:	8c3b      	ldrh	r3, [r7, #32]
 8000a86:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000a8a:	3b41      	subs	r3, #65	; 0x41
 8000a8c:	8bfa      	ldrh	r2, [r7, #30]
 8000a8e:	4413      	add	r3, r2
 8000a90:	2b16      	cmp	r3, #22
 8000a92:	dc72      	bgt.n	8000b7a <ModbusRTURoutine+0x3be>
					{
						TxData[0] = SLAVE_ID;
 8000a94:	2201      	movs	r2, #1
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <ModbusRTURoutine+0x300>)
 8000a98:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <ModbusRTURoutine+0x300>)
 8000a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aa0:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <ModbusRTURoutine+0x300>)
 8000aa4:	7efb      	ldrb	r3, [r7, #27]
 8000aa6:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<ByteCount; i++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000aae:	e02f      	b.n	8000b10 <ModbusRTURoutine+0x354>
 8000ab0:	2000000c 	.word	0x2000000c
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	20000144 	.word	0x20000144
 8000abc:	200004f0 	.word	0x200004f0
 8000ac0:	20000050 	.word	0x20000050
 8000ac4:	20000264 	.word	0x20000264
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	7fff63bf 	.word	0x7fff63bf
						{
							uint16_t tempvalue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	81bb      	strh	r3, [r7, #12]
							tempvalue = *ptemp16bitJCUConfig;
 8000ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 4] = tempvalue;
 8000ada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ade:	3302      	adds	r3, #2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	89ba      	ldrh	r2, [r7, #12]
 8000ae4:	b2d1      	uxtb	r1, r2
 8000ae6:	4a98      	ldr	r2, [pc, #608]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000ae8:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000aea:	89bb      	ldrh	r3, [r7, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 3] = tempvalue;
 8000af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	3303      	adds	r3, #3
 8000af8:	89ba      	ldrh	r2, [r7, #12]
 8000afa:	b2d1      	uxtb	r1, r2
 8000afc:	4a92      	ldr	r2, [pc, #584]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000afe:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUConfig++;
 8000b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b02:	3302      	adds	r3, #2
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i++)
 8000b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000b10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b14:	7efb      	ldrb	r3, [r7, #27]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d3da      	bcc.n	8000ad0 <ModbusRTURoutine+0x314>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	3303      	adds	r3, #3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4989      	ldr	r1, [pc, #548]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000b22:	488a      	ldr	r0, [pc, #552]	; (8000d4c <ModbusRTURoutine+0x590>)
 8000b24:	f003 f830 	bl	8003b88 <HAL_CRC_Calculate>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000b2c:	7efb      	ldrb	r3, [r7, #27]
 8000b2e:	3303      	adds	r3, #3
 8000b30:	8b3a      	ldrh	r2, [r7, #24]
 8000b32:	b2d1      	uxtb	r1, r2
 8000b34:	4a84      	ldr	r2, [pc, #528]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000b36:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000b38:	8b3b      	ldrh	r3, [r7, #24]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000b3e:	7efb      	ldrb	r3, [r7, #27]
 8000b40:	3304      	adds	r3, #4
 8000b42:	8b3a      	ldrh	r2, [r7, #24]
 8000b44:	b2d1      	uxtb	r1, r2
 8000b46:	4a80      	ldr	r2, [pc, #512]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000b48:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000b4a:	bf00      	nop
 8000b4c:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <ModbusRTURoutine+0x594>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b5a:	d0f7      	beq.n	8000b4c <ModbusRTURoutine+0x390>
						{
							// wait until the line is available
						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2108      	movs	r1, #8
 8000b60:	487c      	ldr	r0, [pc, #496]	; (8000d54 <ModbusRTURoutine+0x598>)
 8000b62:	f003 fd8b 	bl	800467c <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000b66:	7efb      	ldrb	r3, [r7, #27]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3305      	adds	r3, #5
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4975      	ldr	r1, [pc, #468]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000b72:	4877      	ldr	r0, [pc, #476]	; (8000d50 <ModbusRTURoutine+0x594>)
 8000b74:	f007 f8c2 	bl	8007cfc <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 8000b78:	e1b4      	b.n	8000ee4 <ModbusRTURoutine+0x728>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f000 f9c4 	bl	8000f08 <ModbusExceptionHandler>
					break;
 8000b80:	e1b0      	b.n	8000ee4 <ModbusRTURoutine+0x728>

				case READ_AIR:
					// Read JCU parameters (errors/Angle/speed/torque/temperature)

					// Defining the first address of input registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	789b      	ldrb	r3, [r3, #2]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	78db      	ldrb	r3, [r3, #3]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					ptemp16bitJCUState += RequestedAddress - ADDRESS_JCU_ERRORS;
 8000b96:	8c3a      	ldrh	r2, [r7, #32]
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <ModbusRTURoutine+0x59c>)
 8000b9a:	4413      	add	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba0:	4413      	add	r3, r2
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30

					// Defining how many input registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000bb8:	8bfb      	ldrh	r3, [r7, #30]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the input Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_JCU_ERRORS) && (RequestedAddress <= ADDRESS_JCU_TEMP))
 8000bc0:	8c3b      	ldrh	r3, [r7, #32]
 8000bc2:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d970      	bls.n	8000cac <ModbusRTURoutine+0x4f0>
 8000bca:	8c3b      	ldrh	r3, [r7, #32]
 8000bcc:	f247 5235 	movw	r2, #30005	; 0x7535
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d86b      	bhi.n	8000cac <ModbusRTURoutine+0x4f0>
							&& (((RequestedAddress - ADDRESS_JCU_ERRORS) + AmountofRead) <= TOTAL_AIR))
 8000bd4:	8c3b      	ldrh	r3, [r7, #32]
 8000bd6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000bda:	3b31      	subs	r3, #49	; 0x31
 8000bdc:	8bfa      	ldrh	r2, [r7, #30]
 8000bde:	4413      	add	r3, r2
 8000be0:	2b05      	cmp	r3, #5
 8000be2:	dc63      	bgt.n	8000cac <ModbusRTURoutine+0x4f0>
					{
						TxData[0] = SLAVE_ID;
 8000be4:	2201      	movs	r2, #1
 8000be6:	4b58      	ldr	r3, [pc, #352]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000be8:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000bea:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bf0:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000bf2:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000bf4:	7efb      	ldrb	r3, [r7, #27]
 8000bf6:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<AmountofRead; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000bfe:	e01f      	b.n	8000c40 <ModbusRTURoutine+0x484>
						{
							uint16_t tempvalue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	81fb      	strh	r3, [r7, #14]
							tempvalue = *ptemp16bitJCUState;
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 4] = tempvalue;
 8000c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c0e:	3302      	adds	r3, #2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	89fa      	ldrh	r2, [r7, #14]
 8000c14:	b2d1      	uxtb	r1, r2
 8000c16:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000c18:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 3] = tempvalue;
 8000c20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	3303      	adds	r3, #3
 8000c28:	89fa      	ldrh	r2, [r7, #14]
 8000c2a:	b2d1      	uxtb	r1, r2
 8000c2c:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000c2e:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUState++;
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	3302      	adds	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
						for (uint8_t i=0; i<AmountofRead; i++)
 8000c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	8bfa      	ldrh	r2, [r7, #30]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8d9      	bhi.n	8000c00 <ModbusRTURoutine+0x444>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000c4c:	7efb      	ldrb	r3, [r7, #27]
 8000c4e:	3303      	adds	r3, #3
 8000c50:	461a      	mov	r2, r3
 8000c52:	493d      	ldr	r1, [pc, #244]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000c54:	483d      	ldr	r0, [pc, #244]	; (8000d4c <ModbusRTURoutine+0x590>)
 8000c56:	f002 ff97 	bl	8003b88 <HAL_CRC_Calculate>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000c5e:	7efb      	ldrb	r3, [r7, #27]
 8000c60:	3303      	adds	r3, #3
 8000c62:	8b3a      	ldrh	r2, [r7, #24]
 8000c64:	b2d1      	uxtb	r1, r2
 8000c66:	4a38      	ldr	r2, [pc, #224]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000c68:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000c6a:	8b3b      	ldrh	r3, [r7, #24]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000c70:	7efb      	ldrb	r3, [r7, #27]
 8000c72:	3304      	adds	r3, #4
 8000c74:	8b3a      	ldrh	r2, [r7, #24]
 8000c76:	b2d1      	uxtb	r1, r2
 8000c78:	4a33      	ldr	r2, [pc, #204]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000c7a:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000c7c:	bf00      	nop
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <ModbusRTURoutine+0x594>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8c:	d0f7      	beq.n	8000c7e <ModbusRTURoutine+0x4c2>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2108      	movs	r1, #8
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <ModbusRTURoutine+0x598>)
 8000c94:	f003 fcf2 	bl	800467c <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000c98:	7efb      	ldrb	r3, [r7, #27]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3305      	adds	r3, #5
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4929      	ldr	r1, [pc, #164]	; (8000d48 <ModbusRTURoutine+0x58c>)
 8000ca4:	482a      	ldr	r0, [pc, #168]	; (8000d50 <ModbusRTURoutine+0x594>)
 8000ca6:	f007 f829 	bl	8007cfc <HAL_UART_Transmit_DMA>
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}

					break;
 8000caa:	e11b      	b.n	8000ee4 <ModbusRTURoutine+0x728>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 f92b 	bl	8000f08 <ModbusExceptionHandler>
					break;
 8000cb2:	e117      	b.n	8000ee4 <ModbusRTURoutine+0x728>
					break;

				case WRITE_SINGLE_AOHR:
					// Write Single parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					RequestedAddress = (temp[2] << 8) + temp[3];
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000cc8:	8c3a      	ldrh	r2, [r7, #32]
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <ModbusRTURoutine+0x5a0>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cd2:	4413      	add	r3, r2
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

					/*
					 * Check if there is no such error:
					 * 1. the address of the holding Register is correct
					 */
					if ((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000cd6:	8c3b      	ldrh	r3, [r7, #32]
 8000cd8:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d92d      	bls.n	8000d3c <ModbusRTURoutine+0x580>
 8000ce0:	8c3b      	ldrh	r3, [r7, #32]
 8000ce2:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d828      	bhi.n	8000d3c <ModbusRTURoutine+0x580>
					{
						*ptemp16bitJCUConfig = (temp[4] << 8) + temp[5];
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	791b      	ldrb	r3, [r3, #4]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	795b      	ldrb	r3, [r3, #5]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	801a      	strh	r2, [r3, #0]

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2108      	movs	r1, #8
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <ModbusRTURoutine+0x598>)
 8000d08:	f003 fcb8 	bl	800467c <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000d0c:	bf00      	nop
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <ModbusRTURoutine+0x594>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1c:	d0f7      	beq.n	8000d0e <ModbusRTURoutine+0x552>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, RxData, Length);
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	490e      	ldr	r1, [pc, #56]	; (8000d60 <ModbusRTURoutine+0x5a4>)
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <ModbusRTURoutine+0x594>)
 8000d28:	f006 ffe8 	bl	8007cfc <HAL_UART_Transmit_DMA>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000d2c:	8c3b      	ldrh	r3, [r7, #32]
 8000d2e:	f649 4244 	movw	r2, #40004	; 0x9c44
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <ModbusRTURoutine+0x588>
						{
							CheckControlRegister();
 8000d36:	f000 f973 	bl	8001020 <CheckControlRegister>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000d3a:	e003      	b.n	8000d44 <ModbusRTURoutine+0x588>
					}
					// if there are errors in request:
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 f8e3 	bl	8000f08 <ModbusExceptionHandler>
					}
					break;
 8000d42:	e0cf      	b.n	8000ee4 <ModbusRTURoutine+0x728>
 8000d44:	e0ce      	b.n	8000ee4 <ModbusRTURoutine+0x728>
 8000d46:	bf00      	nop
 8000d48:	200004f0 	.word	0x200004f0
 8000d4c:	20000144 	.word	0x20000144
 8000d50:	20000264 	.word	0x20000264
 8000d54:	48000400 	.word	0x48000400
 8000d58:	7fff8acf 	.word	0x7fff8acf
 8000d5c:	7fff63bf 	.word	0x7fff63bf
 8000d60:	2000048c 	.word	0x2000048c

				case WRITE_MULTIPLE_AOHR:
					// Write multiple parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to write (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	789b      	ldrb	r3, [r3, #2]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	78db      	ldrb	r3, [r3, #3]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000d78:	8c3a      	ldrh	r2, [r7, #32]
 8000d7a:	4b5d      	ldr	r3, [pc, #372]	; (8000ef0 <ModbusRTURoutine+0x734>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d82:	4413      	add	r3, r2
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
					// Defining how many Holding registers master wants to read
					AmountofWrite = (temp[4] << 8) + temp[5];
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	795b      	ldrb	r3, [r3, #5]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4413      	add	r3, r2
 8000d98:	83bb      	strh	r3, [r7, #28]
					ByteCount = temp[6];
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	76fb      	strb	r3, [r7, #27]
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to write does not exceed amount possible infromation
					 * 3. Check if master quantity of Bytes in message is equal (quantity of register) * 2
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000da0:	8c3b      	ldrh	r3, [r7, #32]
 8000da2:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d978      	bls.n	8000e9c <ModbusRTURoutine+0x6e0>
 8000daa:	8c3b      	ldrh	r3, [r7, #32]
 8000dac:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d873      	bhi.n	8000e9c <ModbusRTURoutine+0x6e0>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofWrite) <= TOTAL_AOHR)
 8000db4:	8c3b      	ldrh	r3, [r7, #32]
 8000db6:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000dba:	3b41      	subs	r3, #65	; 0x41
 8000dbc:	8bba      	ldrh	r2, [r7, #28]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2b16      	cmp	r3, #22
 8000dc2:	dc6b      	bgt.n	8000e9c <ModbusRTURoutine+0x6e0>
							&& (ByteCount == AmountofWrite*2))
 8000dc4:	7efa      	ldrb	r2, [r7, #27]
 8000dc6:	8bbb      	ldrh	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d166      	bne.n	8000e9c <ModbusRTURoutine+0x6e0>
					{
						//uint8_t *ptemp8bit = (uint8_t*) ptemp16bitJCUState;			// for more convenient shifting of bytes during writing, we are creating 8 bit pointer

						for (uint8_t i=0; i<ByteCount; i+=2)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000dd4:	e019      	b.n	8000e0a <ModbusRTURoutine+0x64e>
						{
							*ptemp16bitJCUConfig = (temp[i+7] << 8) + temp[i+8];
 8000dd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dda:	3307      	adds	r3, #7
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	021b      	lsls	r3, r3, #8
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dea:	3308      	adds	r3, #8
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	5ccb      	ldrb	r3, [r1, r3]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df8:	801a      	strh	r2, [r3, #0]
							ptemp16bitJCUConfig++;
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i+=2)
 8000e00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e04:	3302      	adds	r3, #2
 8000e06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000e0a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000e0e:	7efb      	ldrb	r3, [r7, #27]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3e0      	bcc.n	8000dd6 <ModbusRTURoutine+0x61a>
						}

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						for (uint8_t i = 0; i < 6; i++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e1a:	e00c      	b.n	8000e36 <ModbusRTURoutine+0x67a>
						{
							TxData[i] = temp[i];
 8000e1c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000e20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e24:	6939      	ldr	r1, [r7, #16]
 8000e26:	5c89      	ldrb	r1, [r1, r2]
 8000e28:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <ModbusRTURoutine+0x738>)
 8000e2a:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < 6; i++)
 8000e2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e30:	3301      	adds	r3, #1
 8000e32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e36:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	d9ee      	bls.n	8000e1c <ModbusRTURoutine+0x660>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+2));
 8000e3e:	7efb      	ldrb	r3, [r7, #27]
 8000e40:	3302      	adds	r3, #2
 8000e42:	461a      	mov	r2, r3
 8000e44:	492b      	ldr	r1, [pc, #172]	; (8000ef4 <ModbusRTURoutine+0x738>)
 8000e46:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <ModbusRTURoutine+0x73c>)
 8000e48:	f002 fe9e 	bl	8003b88 <HAL_CRC_Calculate>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+2] = CRCforResponse;
 8000e50:	7efb      	ldrb	r3, [r7, #27]
 8000e52:	3302      	adds	r3, #2
 8000e54:	8b3a      	ldrh	r2, [r7, #24]
 8000e56:	b2d1      	uxtb	r1, r2
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <ModbusRTURoutine+0x738>)
 8000e5a:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000e5c:	8b3b      	ldrh	r3, [r7, #24]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000e62:	7efb      	ldrb	r3, [r7, #27]
 8000e64:	3303      	adds	r3, #3
 8000e66:	8b3a      	ldrh	r2, [r7, #24]
 8000e68:	b2d1      	uxtb	r1, r2
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <ModbusRTURoutine+0x738>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2108      	movs	r1, #8
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <ModbusRTURoutine+0x740>)
 8000e74:	f003 fc02 	bl	800467c <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000e78:	bf00      	nop
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <ModbusRTURoutine+0x744>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e88:	d0f7      	beq.n	8000e7a <ModbusRTURoutine+0x6be>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, TxData, WRITE_MULTIPLE_AOHR_BYTES_RESPONSE);
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	4919      	ldr	r1, [pc, #100]	; (8000ef4 <ModbusRTURoutine+0x738>)
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <ModbusRTURoutine+0x744>)
 8000e90:	f006 ff34 	bl	8007cfc <HAL_UART_Transmit_DMA>
						CheckControlRegister();												// could be improved if we can check, was this register updated by master or not
 8000e94:	f000 f8c4 	bl	8001020 <CheckControlRegister>
					{
 8000e98:	bf00      	nop
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000e9a:	e023      	b.n	8000ee4 <ModbusRTURoutine+0x728>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f000 f833 	bl	8000f08 <ModbusExceptionHandler>
					break;
 8000ea2:	e01f      	b.n	8000ee4 <ModbusRTURoutine+0x728>

				default:
					// Modbus Exception 0x01 - Illegal Function
					ModbusExceptionHandler(MODBUS_ILLEGAL_FUNCTION);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 f82f 	bl	8000f08 <ModbusExceptionHandler>
					break;
 8000eaa:	e01b      	b.n	8000ee4 <ModbusRTURoutine+0x728>
			}

		}
		else if(temp[0] == SLAVE_ID_BROADCAST)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d016      	beq.n	8000ee4 <ModbusRTURoutine+0x728>
		}
		else
		{
			// do nothing
			// wait new packet
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <ModbusRTURoutine+0x740>)
 8000ebc:	f003 fbde 	bl	800467c <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000ec0:	2264      	movs	r2, #100	; 0x64
 8000ec2:	4910      	ldr	r1, [pc, #64]	; (8000f04 <ModbusRTURoutine+0x748>)
 8000ec4:	480e      	ldr	r0, [pc, #56]	; (8000f00 <ModbusRTURoutine+0x744>)
 8000ec6:	f006 ffa9 	bl	8007e1c <HAL_UART_Receive_DMA>
 8000eca:	e00b      	b.n	8000ee4 <ModbusRTURoutine+0x728>
	}
	else
	{
		// do nothing
		// wait new packet
		HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2108      	movs	r1, #8
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <ModbusRTURoutine+0x740>)
 8000ed2:	f003 fbd3 	bl	800467c <HAL_GPIO_WritePin>
		HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000ed6:	2264      	movs	r2, #100	; 0x64
 8000ed8:	490a      	ldr	r1, [pc, #40]	; (8000f04 <ModbusRTURoutine+0x748>)
 8000eda:	4809      	ldr	r0, [pc, #36]	; (8000f00 <ModbusRTURoutine+0x744>)
 8000edc:	f006 ff9e 	bl	8007e1c <HAL_UART_Receive_DMA>
 8000ee0:	e000      	b.n	8000ee4 <ModbusRTURoutine+0x728>
					break;
 8000ee2:	bf00      	nop
 8000ee4:	46b5      	mov	sp, r6
	}



}
 8000ee6:	bf00      	nop
 8000ee8:	373c      	adds	r7, #60	; 0x3c
 8000eea:	46bd      	mov	sp, r7
 8000eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ef0:	7fff63bf 	.word	0x7fff63bf
 8000ef4:	200004f0 	.word	0x200004f0
 8000ef8:	20000144 	.word	0x20000144
 8000efc:	48000400 	.word	0x48000400
 8000f00:	20000264 	.word	0x20000264
 8000f04:	2000048c 	.word	0x2000048c

08000f08 <ModbusExceptionHandler>:

void ModbusExceptionHandler(uint8_t ExceptionCode)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	}
	else if (ExceptionCode == MODBUS_ILLEGAL_DATA_ADDRESS)
	{

	}
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <UpdatePWM>:
uint32_t EncoderCounter = 0;
float PosError;
float prevPosError;

void UpdatePWM(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <UpdatePWM+0x14>)
 8000f2a:	f003 fbbf 	bl	80046ac <HAL_GPIO_TogglePin>
			PID = MIN_DUTY_CYCLE;
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000 - PWMValue);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMValue);
	*/
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	48000800 	.word	0x48000800

08000f38 <RunMotor>:


void RunMotor(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	/*
	 * We calling this function with 40 kHz
	 * due to dummy cycles, we read encoder data and analog data with 10 kHz each
	 */
	if (FeedbackState == READ_ENCODER)
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <RunMotor+0x80>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <RunMotor+0x18>
	{
		EncoderRoutine();
 8000f44:	f7ff fb58 	bl	80005f8 <EncoderRoutine>
		FeedbackState = WAIT_ENCODER;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <RunMotor+0x80>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e02a      	b.n	8000fa6 <RunMotor+0x6e>
	}
	else if(FeedbackState == WAIT_ENCODER)
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <RunMotor+0x80>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d103      	bne.n	8000f60 <RunMotor+0x28>
	{
		//dummy step
		FeedbackState = READ_ANALOG;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <RunMotor+0x80>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e022      	b.n	8000fa6 <RunMotor+0x6e>
	}
	else if (FeedbackState == READ_ANALOG)
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <RunMotor+0x80>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d108      	bne.n	8000f7a <RunMotor+0x42>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultDMA, 3);
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4914      	ldr	r1, [pc, #80]	; (8000fbc <RunMotor+0x84>)
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <RunMotor+0x88>)
 8000f6e:	f001 fd37 	bl	80029e0 <HAL_ADC_Start_DMA>
		FeedbackState = WAIT_ANALOG;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <RunMotor+0x80>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e015      	b.n	8000fa6 <RunMotor+0x6e>
	}
	else if(FeedbackState == WAIT_ANALOG)
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <RunMotor+0x80>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d111      	bne.n	8000fa6 <RunMotor+0x6e>
	{
		//dummy step
		FeedbackState = READ_ENCODER;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <RunMotor+0x80>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		JCUState.Speed = EncoderCounter - PreviousEncoderCount;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <RunMotor+0x8c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <RunMotor+0x90>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <RunMotor+0x94>)
 8000f9c:	809a      	strh	r2, [r3, #4]
		PreviousEncoderCount = EncoderCounter;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <RunMotor+0x8c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <RunMotor+0x90>)
 8000fa4:	6013      	str	r3, [r2, #0]
	}

	if (MotorState == MOTOR_RUN)
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <RunMotor+0x98>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d101      	bne.n	8000fb2 <RunMotor+0x7a>
	{
		UpdatePWM();
 8000fae:	f7ff ffb7 	bl	8000f20 <UpdatePWM>
	}

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000004c 	.word	0x2000004c
 8000fbc:	20000088 	.word	0x20000088
 8000fc0:	20000098 	.word	0x20000098
 8000fc4:	20000094 	.word	0x20000094
 8000fc8:	20000090 	.word	0x20000090
 8000fcc:	2000007c 	.word	0x2000007c
 8000fd0:	2000004b 	.word	0x2000004b

08000fd4 <HAL_TIM_IC_CaptureCallback>:

// Count increment encoder ticks
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	EncoderCounter = __HAL_TIM_GET_COUNTER(htim);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000094 	.word	0x20000094

08000ff8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	RunMotor();
 8001000:	f7ff ff9a 	bl	8000f38 <RunMotor>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <CheckControlRegister>:


void CheckControlRegister(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// Check bits in status register ONLY which could be written by Master.
	if 	(CHECK_BIT(JCUConfig.ControlRegister, ENABLE_MOTOR_Pos))
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <CheckControlRegister+0x94>)
 8001026:	88db      	ldrh	r3, [r3, #6]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <CheckControlRegister+0x24>
	{
		if (MotorState == MOTOR_DISABLED)			// enable motor if it is not enabled
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <CheckControlRegister+0x98>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10e      	bne.n	8001056 <CheckControlRegister+0x36>
		{
			MotorState = MOTOR_ENABLED;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <CheckControlRegister+0x98>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
			EnableMotor();
 800103e:	f000 f83f 	bl	80010c0 <EnableMotor>
 8001042:	e008      	b.n	8001056 <CheckControlRegister+0x36>
		}
	}
	else
	{
		if (MotorState != MOTOR_DISABLED)
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <CheckControlRegister+0x98>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <CheckControlRegister+0x36>
		{
			MotorState = MOTOR_DISABLED;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <CheckControlRegister+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
			DisableMotor();
 8001052:	f000 f85d 	bl	8001110 <DisableMotor>
		}
	}


	if (CHECK_BIT(JCUConfig.ControlRegister, SET_BRAKE_Pos))
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <CheckControlRegister+0x94>)
 8001058:	88db      	ldrh	r3, [r3, #6]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
	{
		// should  i reset brake??
	}


	if (CHECK_BIT(JCUConfig.ControlRegister, GO_TO_TARGET_POSITION_Pos))
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <CheckControlRegister+0x94>)
 8001062:	88db      	ldrh	r3, [r3, #6]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <CheckControlRegister+0x5a>
	{
		if (MotorState == MOTOR_ENABLED)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <CheckControlRegister+0x98>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d102      	bne.n	800107a <CheckControlRegister+0x5a>
		{
			MotorState = MOTOR_RUN;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <CheckControlRegister+0x98>)
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
	else
	{
		// decide what to do here
	}

	if (CHECK_BIT(JCUConfig.ControlRegister, STOP_MOTOR_Pos))
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <CheckControlRegister+0x94>)
 800107c:	88db      	ldrh	r3, [r3, #6]
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	2b00      	cmp	r3, #0
 8001084:	d013      	beq.n	80010ae <CheckControlRegister+0x8e>
	{
		JCUConfig.ControlRegister &=~ GO_TO_TARGET_POSITION;				// not go to target position anymore
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <CheckControlRegister+0x94>)
 8001088:	88db      	ldrh	r3, [r3, #6]
 800108a:	f023 0310 	bic.w	r3, r3, #16
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <CheckControlRegister+0x94>)
 8001092:	80da      	strh	r2, [r3, #6]
		// 1. Terminate PID
		MotorState = MOTOR_ENABLED;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <CheckControlRegister+0x98>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
		// 2. set PWM 50%
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <CheckControlRegister+0x9c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <CheckControlRegister+0x9c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000050 	.word	0x20000050
 80010b8:	2000004b 	.word	0x2000004b
 80010bc:	200001cc 	.word	0x200001cc

080010c0 <EnableMotor>:

void EnableMotor(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim1);
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <EnableMotor+0x48>)
 80010c6:	f005 f9ab 	bl	8006420 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80010ca:	2100      	movs	r1, #0
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <EnableMotor+0x48>)
 80010ce:	f005 fa81 	bl	80065d4 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80010d2:	2100      	movs	r1, #0
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <EnableMotor+0x48>)
 80010d6:	f006 fb2b 	bl	8007730 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80010da:	2104      	movs	r1, #4
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <EnableMotor+0x48>)
 80010de:	f005 fa79 	bl	80065d4 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80010e2:	2104      	movs	r1, #4
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <EnableMotor+0x48>)
 80010e6:	f006 fb23 	bl	8007730 <HAL_TIMEx_PWMN_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <EnableMotor+0x48>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <EnableMotor+0x48>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010fc:	639a      	str	r2, [r3, #56]	; 0x38
	MotorState = MOTOR_ENABLED;
 80010fe:	4b03      	ldr	r3, [pc, #12]	; (800110c <EnableMotor+0x4c>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001cc 	.word	0x200001cc
 800110c:	2000004b 	.word	0x2000004b

08001110 <DisableMotor>:

void DisableMotor(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <DisableMotor+0x34>)
 8001116:	f005 f9d7 	bl	80064c8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <DisableMotor+0x34>)
 800111e:	f005 fb85 	bl	800682c <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001122:	2100      	movs	r1, #0
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <DisableMotor+0x34>)
 8001126:	f006 fbd9 	bl	80078dc <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 800112a:	2104      	movs	r1, #4
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <DisableMotor+0x34>)
 800112e:	f005 fb7d 	bl	800682c <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001132:	2104      	movs	r1, #4
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <DisableMotor+0x34>)
 8001136:	f006 fbd1 	bl	80078dc <HAL_TIMEx_PWMN_Stop_IT>
	MotorState = MOTOR_DISABLED;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <DisableMotor+0x38>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001cc 	.word	0x200001cc
 8001148:	2000004b 	.word	0x2000004b

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f001 f8af 	bl	80022b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f84a 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 fb44 	bl	80017e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fabe 	bl	80016dc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001160:	f000 fb02 	bl	8001768 <MX_DMA_Init>
  MX_ADC1_Init();
 8001164:	f000 f894 	bl	8001290 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001168:	f000 f982 	bl	8001470 <MX_TIM1_Init>
  MX_SPI1_Init();
 800116c:	f000 f942 	bl	80013f4 <MX_SPI1_Init>
  MX_CRC_Init();
 8001170:	f000 f912 	bl	8001398 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001174:	f000 fa6c 	bl	8001650 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001178:	f000 fa16 	bl	80015a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // disable interrupt of DMA - half of reveive
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <main+0x84>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <main+0x84>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <main+0x88>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <main+0x88>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0204 	bic.w	r2, r2, #4
 800119a:	601a      	str	r2, [r3, #0]
  hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <main+0x84>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2264      	movs	r2, #100	; 0x64
 80011a2:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 80011a4:	2264      	movs	r2, #100	; 0x64
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <main+0x8c>)
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <main+0x90>)
 80011aa:	f006 fe37 	bl	8007e1c <HAL_UART_Receive_DMA>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80011ae:	213c      	movs	r1, #60	; 0x3c
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <main+0x94>)
 80011b2:	f005 fcb5 	bl	8006b20 <HAL_TIM_Encoder_Start_IT>
  // HAL_TIM_Encoder_Start_DMA

  /*
   * Test part
   */
  JCUConfig.KpPossitionLoop = 0.3;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <main+0x98>)
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <main+0x9c>)
 80011ba:	615a      	str	r2, [r3, #20]
  JCUConfig.TargetAngel = 11000;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <main+0x98>)
 80011be:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80011c2:	809a      	strh	r2, [r3, #4]
  JCUConfig.ControlRegister = 0x12;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <main+0x98>)
 80011c6:	2212      	movs	r2, #18
 80011c8:	80da      	strh	r2, [r3, #6]
  CheckControlRegister();
 80011ca:	f7ff ff29 	bl	8001020 <CheckControlRegister>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x82>
 80011d0:	2000036c 	.word	0x2000036c
 80011d4:	200000fc 	.word	0x200000fc
 80011d8:	2000048c 	.word	0x2000048c
 80011dc:	20000264 	.word	0x20000264
 80011e0:	20000218 	.word	0x20000218
 80011e4:	20000050 	.word	0x20000050
 80011e8:	3e99999a 	.word	0x3e99999a

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2244      	movs	r2, #68	; 0x44
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 f830 	bl	8009260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001212:	f003 fa73 	bl	80046fc <HAL_PWREx_ControlVoltageScaling>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800121c:	f000 fbd4 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800123a:	230a      	movs	r3, #10
 800123c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800123e:	2307      	movs	r3, #7
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001246:	2302      	movs	r3, #2
 8001248:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4618      	mov	r0, r3
 8001250:	f003 faaa 	bl	80047a8 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800125a:	f000 fbb5 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2303      	movs	r3, #3
 8001264:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f003 feb6 	bl	8004fe8 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001282:	f000 fba1 	bl	80019c8 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3758      	adds	r7, #88	; 0x58
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012a8:	4a37      	ldr	r2, [pc, #220]	; (8001388 <MX_ADC1_Init+0xf8>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ac:	4b35      	ldr	r3, [pc, #212]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012c6:	2208      	movs	r2, #8
 80012c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012d8:	2203      	movs	r2, #3
 80012da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_ADC1_Init+0xf4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_ADC1_Init+0xf4>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001306:	481f      	ldr	r0, [pc, #124]	; (8001384 <MX_ADC1_Init+0xf4>)
 8001308:	f001 fa22 	bl	8002750 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001312:	f000 fb59 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_ADC1_Init+0xfc>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800131e:	2305      	movs	r3, #5
 8001320:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001322:	237f      	movs	r3, #127	; 0x7f
 8001324:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001326:	2304      	movs	r3, #4
 8001328:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_ADC1_Init+0xf4>)
 8001334:	f001 fdaa 	bl	8002e8c <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 fb43 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_ADC1_Init+0x100>)
 8001344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001346:	230c      	movs	r3, #12
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_ADC1_Init+0xf4>)
 8001350:	f001 fd9c 	bl	8002e8c <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800135a:	f000 fb35 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <MX_ADC1_Init+0x104>)
 8001360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001362:	2312      	movs	r3, #18
 8001364:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_ADC1_Init+0xf4>)
 800136c:	f001 fd8e 	bl	8002e8c <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001376:	f000 fb27 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000098 	.word	0x20000098
 8001388:	50040000 	.word	0x50040000
 800138c:	2e300800 	.word	0x2e300800
 8001390:	21800100 	.word	0x21800100
 8001394:	43210000 	.word	0x43210000

08001398 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	hcrc.Instance = CRC;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_CRC_Init+0x54>)
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <MX_CRC_Init+0x58>)
 80013a0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_CRC_Init+0x54>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_CRC_Init+0x54>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_CRC_Init+0x54>)
 80013b0:	2220      	movs	r2, #32
 80013b2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_CRC_Init+0x54>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	619a      	str	r2, [r3, #24]
	hcrc.Init.GeneratingPolynomial = 0x8005;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_CRC_Init+0x54>)
 80013bc:	f248 0205 	movw	r2, #32773	; 0x8005
 80013c0:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_CRC_Init+0x54>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0xFFFF;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_CRC_Init+0x54>)
 80013ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ce:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_CRC_Init+0x54>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_CRC_Init+0x54>)
 80013d8:	f002 fb72 	bl	8003ac0 <HAL_CRC_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_CRC_Init+0x4e>
	{
	Error_Handler();
 80013e2:	f000 faf1 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
	#endif
  /* USER CODE END CRC_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000144 	.word	0x20000144
 80013f0:	40023000 	.word	0x40023000

080013f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_SPI1_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <MX_SPI1_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_SPI1_Init+0x74>)
 8001400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_SPI1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_SPI1_Init+0x74>)
 800140e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001412:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_SPI1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_SPI1_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_SPI1_Init+0x74>)
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001426:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_SPI1_Init+0x74>)
 800142a:	2218      	movs	r2, #24
 800142c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_SPI1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_SPI1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_SPI1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_SPI1_Init+0x74>)
 8001442:	2207      	movs	r2, #7
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_SPI1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_SPI1_Init+0x74>)
 8001454:	f004 fab6 	bl	80059c4 <HAL_SPI_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 fab3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000168 	.word	0x20000168
 800146c:	40013000 	.word	0x40013000

08001470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b096      	sub	sp, #88	; 0x58
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	222c      	movs	r2, #44	; 0x2c
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f007 fedf 	bl	8009260 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014a4:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <MX_TIM1_Init+0x134>)
 80014a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014b0:	2220      	movs	r2, #32
 80014b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ce:	4834      	ldr	r0, [pc, #208]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014d0:	f005 f829 	bl	8006526 <HAL_TIM_PWM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014da:	f000 fa75 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ee:	4619      	mov	r1, r3
 80014f0:	482b      	ldr	r0, [pc, #172]	; (80015a0 <MX_TIM1_Init+0x130>)
 80014f2:	f006 fa93 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014fc:	f000 fa64 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	481e      	ldr	r0, [pc, #120]	; (80015a0 <MX_TIM1_Init+0x130>)
 8001526:	f005 fcc9 	bl	8006ebc <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001530:	f000 fa4a 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4818      	ldr	r0, [pc, #96]	; (80015a0 <MX_TIM1_Init+0x130>)
 800153e:	f005 fcbd 	bl	8006ebc <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001548:	f000 fa3e 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001558:	230a      	movs	r3, #10
 800155a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001564:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800156e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM1_Init+0x130>)
 8001582:	f006 fab1 	bl	8007ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800158c:	f000 fa1c 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM1_Init+0x130>)
 8001592:	f000 fbd3 	bl	8001d3c <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3758      	adds	r7, #88	; 0x58
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001cc 	.word	0x200001cc
 80015a4:	40012c00 	.word	0x40012c00

080015a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 fe52 	bl	8009260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_TIM2_Init+0xa4>)
 80015c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_TIM2_Init+0xa4>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM2_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_TIM2_Init+0xa4>)
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM2_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_TIM2_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <MX_TIM2_Init+0xa4>)
 800161a:	f005 f9db 	bl	80069d4 <HAL_TIM_Encoder_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001624:	f000 f9d0 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_TIM2_Init+0xa4>)
 8001636:	f006 f9f1 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001640:	f000 f9c2 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000218 	.word	0x20000218

08001650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <MX_USART1_UART_Init+0x84>)
 8001658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3000000;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 800165c:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <MX_USART1_UART_Init+0x88>)
 800165e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001674:	220c      	movs	r2, #12
 8001676:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001680:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001684:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001692:	480f      	ldr	r0, [pc, #60]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 8001694:	f006 fae3 	bl	8007c5e <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800169e:	f000 f993 	bl	80019c8 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart1.Instance->RTOR = MODBUS_TIMEOUT;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2214      	movs	r2, #20
 80016a8:	615a      	str	r2, [r3, #20]
  huart1.Instance->CR1 |= USART_CR1_RTOIE;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016b8:	601a      	str	r2, [r3, #0]
  huart1.Instance->CR2 |= USART_CR2_RTOEN;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <MX_USART1_UART_Init+0x80>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016c8:	605a      	str	r2, [r3, #4]



  /* USER CODE END USART1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000264 	.word	0x20000264
 80016d4:	40013800 	.word	0x40013800
 80016d8:	002dc6c0 	.word	0x002dc6c0

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_USART2_UART_Init+0x80>)
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <MX_USART2_UART_Init+0x84>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_USART2_UART_Init+0x80>)
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <MX_USART2_UART_Init+0x88>)
 80016ea:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_USART2_UART_Init+0x80>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_USART2_UART_Init+0x80>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_USART2_UART_Init+0x80>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001700:	220c      	movs	r2, #12
 8001702:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_USART2_UART_Init+0x80>)
 800170c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x80>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001720:	f006 fa9d 	bl	8007c5e <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 f94d 	bl	80019c8 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart2.Instance->RTOR = MODBUS_TIMEOUT;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2214      	movs	r2, #20
 8001734:	615a      	str	r2, [r3, #20]
  huart2.Instance->CR1 |= USART_CR1_RTOIE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_USART2_UART_Init+0x80>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001744:	601a      	str	r2, [r3, #0]
  huart2.Instance->CR2 |= USART_CR2_RTOEN;
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x80>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <MX_USART2_UART_Init+0x80>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001754:	605a      	str	r2, [r3, #4]

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002e8 	.word	0x200002e8
 8001760:	40004400 	.word	0x40004400
 8001764:	001e8480 	.word	0x001e8480

08001768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_DMA_Init+0x78>)
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <MX_DMA_Init+0x78>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6493      	str	r3, [r2, #72]	; 0x48
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_DMA_Init+0x78>)
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	200b      	movs	r0, #11
 800178c:	f002 f961 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001790:	200b      	movs	r0, #11
 8001792:	f002 f97a 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	200e      	movs	r0, #14
 800179c:	f002 f959 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80017a0:	200e      	movs	r0, #14
 80017a2:	f002 f972 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200f      	movs	r0, #15
 80017ac:	f002 f951 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017b0:	200f      	movs	r0, #15
 80017b2:	f002 f96a 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2010      	movs	r0, #16
 80017bc:	f002 f949 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017c0:	2010      	movs	r0, #16
 80017c2:	f002 f962 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2011      	movs	r0, #17
 80017cc:	f002 f941 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017d0:	2011      	movs	r0, #17
 80017d2:	f002 f95a 	bl	8003a8a <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <MX_GPIO_Init+0xe0>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a31      	ldr	r2, [pc, #196]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <MX_GPIO_Init+0xe0>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <MX_GPIO_Init+0xe0>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001848:	481f      	ldr	r0, [pc, #124]	; (80018c8 <MX_GPIO_Init+0xe4>)
 800184a:	f002 ff17 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2110      	movs	r1, #16
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f002 ff11 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_FC_Pin|LED_WHITE_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2118      	movs	r1, #24
 800185e:	481b      	ldr	r0, [pc, #108]	; (80018cc <MX_GPIO_Init+0xe8>)
 8001860:	f002 ff0c 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8001864:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4619      	mov	r1, r3
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <MX_GPIO_Init+0xe4>)
 800187e:	f002 fd93 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001882:	2310      	movs	r3, #16
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f002 fd84 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_FC_Pin LED_WHITE_Pin */
  GPIO_InitStruct.Pin = RS485_FC_Pin|LED_WHITE_Pin;
 80018a0:	2318      	movs	r3, #24
 80018a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_GPIO_Init+0xe8>)
 80018b8:	f002 fd76 	bl	80043a8 <HAL_GPIO_Init>

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000400 	.word	0x48000400

080018d0 <EndofBlock>:




void EndofBlock(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	// Check if it is timeout, and no new byte is coming
	if (huart1.Instance->ISR & USART_ISR_RTOF)
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <EndofBlock+0x6c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d026      	beq.n	8001932 <EndofBlock+0x62>
	{
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		uint8_t Length = BUFFSIZE - hdma_usart1_rx.Instance->CNDTR;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <EndofBlock+0x70>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80018f0:	71fb      	strb	r3, [r7, #7]
		//__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_RTOF);
		SET_BIT(huart1.Instance->ICR, USART_ICR_RTOCF);
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <EndofBlock+0x6c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <EndofBlock+0x6c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001900:	621a      	str	r2, [r3, #32]
		//HAL_UART_Abort(&huart1);

		// Check if we received something, but not some glitch on the line
		if (Length>0)
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00a      	beq.n	800191e <EndofBlock+0x4e>
		{
			HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2110      	movs	r1, #16
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <EndofBlock+0x74>)
 800190e:	f002 feb5 	bl	800467c <HAL_GPIO_WritePin>
			ModbusRTURoutine(RxData, Length);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4619      	mov	r1, r3
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <EndofBlock+0x78>)
 8001918:	f7fe ff50 	bl	80007bc <ModbusRTURoutine>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
		}

	}
}
 800191c:	e009      	b.n	8001932 <EndofBlock+0x62>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2108      	movs	r1, #8
 8001922:	4808      	ldr	r0, [pc, #32]	; (8001944 <EndofBlock+0x74>)
 8001924:	f002 feaa 	bl	800467c <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001928:	2264      	movs	r2, #100	; 0x64
 800192a:	4907      	ldr	r1, [pc, #28]	; (8001948 <EndofBlock+0x78>)
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <EndofBlock+0x6c>)
 800192e:	f006 fa75 	bl	8007e1c <HAL_UART_Receive_DMA>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000264 	.word	0x20000264
 8001940:	2000036c 	.word	0x2000036c
 8001944:	48000400 	.word	0x48000400
 8001948:	2000048c 	.word	0x2000048c

0800194c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2110      	movs	r1, #16
 800196c:	4812      	ldr	r0, [pc, #72]	; (80019b8 <HAL_UART_TxCpltCallback+0x58>)
 800196e:	f002 fe85 	bl	800467c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	2108      	movs	r1, #8
 8001976:	4810      	ldr	r0, [pc, #64]	; (80019b8 <HAL_UART_TxCpltCallback+0x58>)
 8001978:	f002 fe80 	bl	800467c <HAL_GPIO_WritePin>
	// disable DMA for reseting DMA's counter, after enable again
	__HAL_DMA_DISABLE(&hdma_usart1_rx);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_UART_TxCpltCallback+0x5c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_UART_TxCpltCallback+0x5c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_UART_TxCpltCallback+0x5c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2264      	movs	r2, #100	; 0x64
 8001992:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_UART_TxCpltCallback+0x5c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_UART_TxCpltCallback+0x5c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 80019a4:	2264      	movs	r2, #100	; 0x64
 80019a6:	4906      	ldr	r1, [pc, #24]	; (80019c0 <HAL_UART_TxCpltCallback+0x60>)
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HAL_UART_TxCpltCallback+0x64>)
 80019aa:	f006 fa37 	bl	8007e1c <HAL_UART_Receive_DMA>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	48000400 	.word	0x48000400
 80019bc:	2000036c 	.word	0x2000036c
 80019c0:	2000048c 	.word	0x2000048c
 80019c4:	20000264 	.word	0x20000264

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>
	...

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x44>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x44>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6613      	str	r3, [r2, #96]	; 0x60
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x44>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x44>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x44>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x44>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a0      	sub	sp, #128	; 0x80
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	2254      	movs	r2, #84	; 0x54
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f007 fc0f 	bl	8009260 <memset>
  if(hadc->Instance==ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a4b      	ldr	r2, [pc, #300]	; (8001b74 <HAL_ADC_MspInit+0x158>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	f040 808f 	bne.w	8001b6c <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a58:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8001a62:	230a      	movs	r3, #10
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a66:	2307      	movs	r3, #7
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fcb9 	bl	80053f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a88:	f7ff ff9e 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_ADC_MspInit+0x15c>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Current_Pin|Potentiometer_Pin;
 8001ad4:	2348      	movs	r3, #72	; 0x48
 8001ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ad8:	230b      	movs	r3, #11
 8001ada:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f002 fc5d 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Temperature_Pin;
 8001aee:	2302      	movs	r3, #2
 8001af0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001af2:	230b      	movs	r3, #11
 8001af4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(Temperature_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001afe:	4619      	mov	r1, r3
 8001b00:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_ADC_MspInit+0x160>)
 8001b02:	f002 fc51 	bl	80043a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_ADC_MspInit+0x168>)
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b40:	480f      	ldr	r0, [pc, #60]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b42:	f002 f9bb 	bl	8003ebc <HAL_DMA_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001b4c:	f7ff ff3c 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b54:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_ADC_MspInit+0x164>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2012      	movs	r0, #18
 8001b62:	f001 ff76 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b66:	2012      	movs	r0, #18
 8001b68:	f001 ff8f 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3780      	adds	r7, #128	; 0x80
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	50040000 	.word	0x50040000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000400 	.word	0x48000400
 8001b80:	200000fc 	.word	0x200000fc
 8001b84:	40020008 	.word	0x40020008

08001b88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_CRC_MspInit+0x38>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10b      	bne.n	8001bb2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_CRC_MspInit+0x3c>)
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_CRC_MspInit+0x3c>)
 8001ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_CRC_MspInit+0x3c>)
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023000 	.word	0x40023000
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_SPI_MspInit+0x90>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d131      	bne.n	8001c4e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_SPI_MspInit+0x94>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_SPI_MspInit+0x94>)
 8001bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_SPI_MspInit+0x94>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_SPI_MspInit+0x94>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_SPI_MspInit+0x94>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_SPI_MspInit+0x94>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8001c1a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f002 fbb5 	bl	80043a8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2023      	movs	r0, #35	; 0x23
 8001c44:	f001 ff05 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c48:	2023      	movs	r0, #35	; 0x23
 8001c4a:	f001 ff1e 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_TIM_PWM_MspInit+0x44>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d113      	bne.n	8001c9a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x48>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x48>)
 8001c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x48>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2019      	movs	r0, #25
 8001c90:	f001 fedf 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c94:	2019      	movs	r0, #25
 8001c96:	f001 fef8 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000

08001cac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ccc:	d130      	bne.n	8001d30 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1c:	f002 fb44 	bl	80043a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	201c      	movs	r0, #28
 8001d26:	f001 fe94 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f001 fead 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000

08001d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_TIM_MspPostInit+0xa0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d139      	bne.n	8001dd2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_TIM_MspPostInit+0xa4>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_TIM_MspPostInit+0xa4>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_TIM_MspPostInit+0xa4>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_TIM_MspPostInit+0xa4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_TIM_MspPostInit+0xa4>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_TIM_MspPostInit+0xa4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d8e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dae:	f002 fafb 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db2:	2301      	movs	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_TIM_MspPostInit+0xa8>)
 8001dce:	f002 faeb 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48000400 	.word	0x48000400

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0a0      	sub	sp, #128	; 0x80
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	2254      	movs	r2, #84	; 0x54
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f007 fa29 	bl	8009260 <memset>
  if(huart->Instance==USART1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4aa1      	ldr	r2, [pc, #644]	; (8002098 <HAL_UART_MspInit+0x2b0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f040 8091 	bne.w	8001f3c <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e22:	f107 0318 	add.w	r3, r7, #24
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fae4 	bl	80053f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e32:	f7ff fdc9 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e36:	4b99      	ldr	r3, [pc, #612]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	4a98      	ldr	r2, [pc, #608]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6613      	str	r3, [r2, #96]	; 0x60
 8001e42:	4b96      	ldr	r3, [pc, #600]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b93      	ldr	r3, [pc, #588]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a92      	ldr	r2, [pc, #584]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b90      	ldr	r3, [pc, #576]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e66:	23c0      	movs	r3, #192	; 0xc0
 8001e68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e76:	2307      	movs	r3, #7
 8001e78:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4887      	ldr	r0, [pc, #540]	; (80020a0 <HAL_UART_MspInit+0x2b8>)
 8001e82:	f002 fa91 	bl	80043a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e86:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001e88:	4a87      	ldr	r2, [pc, #540]	; (80020a8 <HAL_UART_MspInit+0x2c0>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001e8c:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e92:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b82      	ldr	r3, [pc, #520]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea4:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001eb0:	4b7c      	ldr	r3, [pc, #496]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ebc:	4879      	ldr	r0, [pc, #484]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001ebe:	f001 fffd 	bl	8003ebc <HAL_DMA_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001ec8:	f7ff fd7e 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001ed0:	671a      	str	r2, [r3, #112]	; 0x70
 8001ed2:	4a74      	ldr	r2, [pc, #464]	; (80020a4 <HAL_UART_MspInit+0x2bc>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ed8:	4b74      	ldr	r3, [pc, #464]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_UART_MspInit+0x2c8>)
 8001edc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001ede:	4b73      	ldr	r3, [pc, #460]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee4:	4b71      	ldr	r3, [pc, #452]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	4b70      	ldr	r3, [pc, #448]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef0:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef6:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001efc:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f08:	4b68      	ldr	r3, [pc, #416]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f0e:	4867      	ldr	r0, [pc, #412]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001f10:	f001 ffd4 	bl	8003ebc <HAL_DMA_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8001f1a:	f7ff fd55 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a62      	ldr	r2, [pc, #392]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001f22:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f24:	4a61      	ldr	r2, [pc, #388]	; (80020ac <HAL_UART_MspInit+0x2c4>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2025      	movs	r0, #37	; 0x25
 8001f30:	f001 fd8f 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f34:	2025      	movs	r0, #37	; 0x25
 8001f36:	f001 fda8 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f3a:	e0a8      	b.n	800208e <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_UART_MspInit+0x2cc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f040 80a3 	bne.w	800208e <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fa4d 	bl	80053f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8001f60:	f7ff fd32 	bl	80019c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a4c      	ldr	r2, [pc, #304]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	4a46      	ldr	r2, [pc, #280]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f88:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_UART_MspInit+0x2b4>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f94:	2304      	movs	r3, #4
 8001f96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f002 f9f9 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd6:	f002 f9e7 	bl	80043a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001fda:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_UART_MspInit+0x2d4>)
 8001fde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002010:	4829      	ldr	r0, [pc, #164]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8002012:	f001 ff53 	bl	8003ebc <HAL_DMA_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_MspInit+0x238>
      Error_Handler();
 800201c:	f7ff fcd4 	bl	80019c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8002024:	671a      	str	r2, [r3, #112]	; 0x70
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_UART_MspInit+0x2d0>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 800202e:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_UART_MspInit+0x2dc>)
 8002030:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002034:	2202      	movs	r2, #2
 8002036:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 800203a:	2210      	movs	r2, #16
 800203c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002062:	4817      	ldr	r0, [pc, #92]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002064:	f001 ff2a 	bl	8003ebc <HAL_DMA_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0x28a>
      Error_Handler();
 800206e:	f7ff fcab 	bl	80019c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 8002076:	66da      	str	r2, [r3, #108]	; 0x6c
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <HAL_UART_MspInit+0x2d8>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2026      	movs	r0, #38	; 0x26
 8002084:	f001 fce5 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002088:	2026      	movs	r0, #38	; 0x26
 800208a:	f001 fcfe 	bl	8003a8a <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3780      	adds	r7, #128	; 0x80
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40013800 	.word	0x40013800
 800209c:	40021000 	.word	0x40021000
 80020a0:	48000400 	.word	0x48000400
 80020a4:	2000036c 	.word	0x2000036c
 80020a8:	40020058 	.word	0x40020058
 80020ac:	200003b4 	.word	0x200003b4
 80020b0:	40020044 	.word	0x40020044
 80020b4:	40004400 	.word	0x40004400
 80020b8:	200003fc 	.word	0x200003fc
 80020bc:	4002006c 	.word	0x4002006c
 80020c0:	20000444 	.word	0x20000444
 80020c4:	40020080 	.word	0x40020080

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 f922 	bl	800235c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <DMA1_Channel1_IRQHandler+0x10>)
 8002122:	f002 f862 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200000fc 	.word	0x200000fc

08002130 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA1_Channel4_IRQHandler+0x10>)
 8002136:	f002 f858 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200003b4 	.word	0x200003b4

08002144 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA1_Channel5_IRQHandler+0x10>)
 800214a:	f002 f84e 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000036c 	.word	0x2000036c

08002158 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <DMA1_Channel6_IRQHandler+0x10>)
 800215e:	f002 f844 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200003fc 	.word	0x200003fc

0800216c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA1_Channel7_IRQHandler+0x10>)
 8002172:	f002 f83a 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000444 	.word	0x20000444

08002180 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <ADC1_IRQHandler+0x10>)
 8002186:	f000 fcaf 	bl	8002ae8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000098 	.word	0x20000098

08002194 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800219a:	f004 fd6f 	bl	8006c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200001cc 	.word	0x200001cc

080021a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM2_IRQHandler+0x10>)
 80021ae:	f004 fd65 	bl	8006c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000218 	.word	0x20000218

080021bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <SPI1_IRQHandler+0x10>)
 80021c2:	f003 fd53 	bl	8005c6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000168 	.word	0x20000168

080021d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	EndofBlock();
 80021d4:	f7ff fb7c 	bl	80018d0 <EndofBlock>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <USART1_IRQHandler+0x14>)
 80021da:	f005 fe75 	bl	8007ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000264 	.word	0x20000264

080021e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <USART2_IRQHandler+0x10>)
 80021ee:	f005 fe6b 	bl	8007ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200002e8 	.word	0x200002e8

080021fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <SystemInit+0x5c>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a14      	ldr	r2, [pc, #80]	; (8002258 <SystemInit+0x5c>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <SystemInit+0x60>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <SystemInit+0x60>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <SystemInit+0x60>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <SystemInit+0x60>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a0d      	ldr	r2, [pc, #52]	; (800225c <SystemInit+0x60>)
 8002228:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800222c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002230:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <SystemInit+0x60>)
 8002234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002238:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <SystemInit+0x60>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <SystemInit+0x60>)
 8002240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <SystemInit+0x60>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00
 800225c:	40021000 	.word	0x40021000

08002260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002264:	f7ff ffca 	bl	80021fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002268:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800226a:	e003      	b.n	8002274 <LoopCopyDataInit>

0800226c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800226e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002270:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002272:	3104      	adds	r1, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002274:	480a      	ldr	r0, [pc, #40]	; (80022a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002278:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800227a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800227c:	d3f6      	bcc.n	800226c <CopyDataInit>
	ldr	r2, =_sbss
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002280:	e002      	b.n	8002288 <LoopFillZerobss>

08002282 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002282:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002284:	f842 3b04 	str.w	r3, [r2], #4

08002288 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <LoopForever+0x16>)
	cmp	r2, r3
 800228a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800228c:	d3f9      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228e:	f006 ffc3 	bl	8009218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002292:	f7fe ff5b 	bl	800114c <main>

08002296 <LoopForever>:

LoopForever:
    b LoopForever
 8002296:	e7fe      	b.n	8002296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002298:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 800229c:	080092e0 	.word	0x080092e0
	ldr	r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022a4:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 80022a8:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 80022ac:	20000558 	.word	0x20000558

080022b0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <CAN1_RX0_IRQHandler>

080022b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f001 fbbd 	bl	8003a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f80e 	bl	80022e4 <HAL_InitTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	e001      	b.n	80022d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d4:	f7ff fb7e 	bl	80019d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d8:	79fb      	ldrb	r3, [r7, #7]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_InitTick+0x6c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d023      	beq.n	8002340 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_InitTick+0x70>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_InitTick+0x6c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fbc9 	bl	8003aa6 <HAL_SYSTICK_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d809      	bhi.n	8002334 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f001 fb93 	bl	8003a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_InitTick+0x74>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e007      	b.n	8002344 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e004      	b.n	8002344 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e001      	b.n	8002344 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000001c 	.word	0x2000001c
 8002354:	20000014 	.word	0x20000014
 8002358:	20000018 	.word	0x20000018

0800235c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x20>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x24>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_IncTick+0x24>)
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000001c 	.word	0x2000001c
 8002380:	20000554 	.word	0x20000554

08002384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_GetTick+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000554 	.word	0x20000554

0800239c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	609a      	str	r2, [r3, #8]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3360      	adds	r3, #96	; 0x60
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <LL_ADC_SetOffset+0x44>)
 8002426:	4013      	ands	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	4313      	orrs	r3, r2
 8002434:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	03fff000 	.word	0x03fff000

0800244c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3360      	adds	r3, #96	; 0x60
 800245a:	461a      	mov	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3360      	adds	r3, #96	; 0x60
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3330      	adds	r3, #48	; 0x30
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	4413      	add	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	211f      	movs	r1, #31
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	f003 011f 	and.w	r1, r3, #31
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	431a      	orrs	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3314      	adds	r3, #20
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0e5b      	lsrs	r3, r3, #25
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	4413      	add	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	0d1b      	lsrs	r3, r3, #20
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2107      	movs	r1, #7
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	0d1b      	lsrs	r3, r3, #20
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	431a      	orrs	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	43db      	mvns	r3, r3
 80025c2:	401a      	ands	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0318 	and.w	r3, r3, #24
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80025cc:	40d9      	lsrs	r1, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	400b      	ands	r3, r1
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	0007ffff 	.word	0x0007ffff

080025f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6093      	str	r3, [r2, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002650:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <LL_ADC_IsEnabled+0x18>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <LL_ADC_IsEnabled+0x1a>
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d101      	bne.n	800271a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b08      	cmp	r3, #8
 800273a:	d101      	bne.n	8002740 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e12c      	b.n	80029c4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff f94f 	bl	8001a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff3f 	bl	8002614 <LL_ADC_IsDeepPowerDownEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff25 	bl	80025f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff5a 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d115      	bne.n	80027e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff3e 	bl	800263c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c0:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_ADC_Init+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	4a82      	ldr	r2, [pc, #520]	; (80029d0 <HAL_ADC_Init+0x280>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027d4:	e002      	b.n	80027dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f9      	bne.n	80027d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff3c 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f043 0210 	orr.w	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff75 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002818:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80c5 	bne.w	80029b2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80c1 	bne.w	80029b2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002838:	f043 0202 	orr.w	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff35 	bl	80026b4 <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002850:	4860      	ldr	r0, [pc, #384]	; (80029d4 <HAL_ADC_Init+0x284>)
 8002852:	f7ff ff2f 	bl	80026b4 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4619      	mov	r1, r3
 8002862:	485d      	ldr	r0, [pc, #372]	; (80029d8 <HAL_ADC_Init+0x288>)
 8002864:	f7ff fd9a 	bl	800239c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7e5b      	ldrb	r3, [r3, #25]
 800286c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002872:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002878:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800287e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002886:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d106      	bne.n	80028a4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	3b01      	subs	r3, #1
 800289c:	045b      	lsls	r3, r3, #17
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	4b45      	ldr	r3, [pc, #276]	; (80029dc <HAL_ADC_Init+0x28c>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff12 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 80028de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff1f 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 80028ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d13a      	bne.n	800296e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002904:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002914:	f023 0302 	bic.w	r3, r3, #2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	430b      	orrs	r3, r1
 8002920:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002928:	2b01      	cmp	r3, #1
 800292a:	d118      	bne.n	800295e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800294e:	430a      	orrs	r2, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	e007      	b.n	800296e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10c      	bne.n	8002990 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f023 010f 	bic.w	r1, r3, #15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	1e5a      	subs	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
 800298e:	e007      	b.n	80029a0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 020f 	bic.w	r2, r2, #15
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	f023 0303 	bic.w	r3, r3, #3
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
 80029b0:	e007      	b.n	80029c2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000014 	.word	0x20000014
 80029d0:	053e2d63 	.word	0x053e2d63
 80029d4:	50040000 	.word	0x50040000
 80029d8:	50040300 	.word	0x50040300
 80029dc:	fff0c007 	.word	0xfff0c007

080029e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fe86 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d167      	bne.n	8002acc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Start_DMA+0x2a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e063      	b.n	8002ad2 <HAL_ADC_Start_DMA+0xf2>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fe1a 	bl	800364c <ADC_Enable>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d14f      	bne.n	8002ac2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f023 0206 	bic.w	r2, r3, #6
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4e:	e002      	b.n	8002a56 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <HAL_ADC_Start_DMA+0xfc>)
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_ADC_Start_DMA+0x100>)
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_ADC_Start_DMA+0x104>)
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	221c      	movs	r2, #28
 8002a74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0210 	orr.w	r2, r2, #16
 8002a8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3340      	adds	r3, #64	; 0x40
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f001 fabd 	bl	800402c <HAL_DMA_Start_IT>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe0d 	bl	80026da <LL_ADC_REG_StartConversion>
 8002ac0:	e006      	b.n	8002ad0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002aca:	e001      	b.n	8002ad0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	08003711 	.word	0x08003711
 8002ae0:	080037e9 	.word	0x080037e9
 8002ae4:	08003805 	.word	0x08003805

08002ae8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d017      	beq.n	8002b3e <HAL_ADC_IRQHandler+0x56>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fea9 	bl	8003888 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x6a>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05e      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d059      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fc93 	bl	80024ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03e      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d135      	bne.n	8002c0c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d12e      	bne.n	8002c0c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fda5 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11a      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 020c 	bic.w	r2, r2, #12
 8002bcc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d112      	bne.n	8002c0c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bf2:	e00b      	b.n	8002c0c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0210 	orr.w	r2, r3, #16
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe f9fd 	bl	800100c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	220c      	movs	r2, #12
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_ADC_IRQHandler+0x146>
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d072      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06d      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fc64 	bl	800252c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c64:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc1f 	bl	80024ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c70:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d047      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_ADC_IRQHandler+0x1b2>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03f      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d13a      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d133      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12e      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd36 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11a      	bne.n	8002cf8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d112      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
 8002cf6:	e00b      	b.n	8002d10 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	f043 0201 	orr.w	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fd91 	bl	8003838 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2260      	movs	r2, #96	; 0x60
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d011      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x264>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f890 	bl	8002e64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d012      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x294>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fd77 	bl	8003860 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_ADC_IRQHandler+0x2c4>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fd69 	bl	8003874 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02a      	beq.n	8002e0c <HAL_ADC_IRQHandler+0x324>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d025      	beq.n	8002e0c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e008      	b.n	8002de0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d10e      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f043 0202 	orr.w	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f83a 	bl	8002e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d018      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x360>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f043 0208 	orr.w	r2, r3, #8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e40:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fd02 	bl	800384c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e48:	bf00      	nop
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0b6      	sub	sp, #216	; 0xd8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x22>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e3b9      	b.n	8003622 <HAL_ADC_ConfigChannel+0x796>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fc21 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 839e 	bne.w	8003604 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d824      	bhi.n	8002f1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	3b02      	subs	r3, #2
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d81b      	bhi.n	8002f12 <HAL_ADC_ConfigChannel+0x86>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_ADC_ConfigChannel+0x54>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002ef9 	.word	0x08002ef9
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002f09 	.word	0x08002f09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	605a      	str	r2, [r3, #4]
          break;
 8002ef6:	e011      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2212      	movs	r2, #18
 8002efc:	605a      	str	r2, [r3, #4]
          break;
 8002efe:	e00d      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2218      	movs	r2, #24
 8002f04:	605a      	str	r2, [r3, #4]
          break;
 8002f06:	e009      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f0e:	605a      	str	r2, [r3, #4]
          break;
 8002f10:	e004      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2206      	movs	r2, #6
 8002f16:	605a      	str	r2, [r3, #4]
          break;
 8002f18:	e000      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f7ff fad3 	bl	80024d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fbe5 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002f38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fbf1 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 8002f46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 81a6 	bne.w	80032a0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 81a1 	bne.w	80032a0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7ff faf1 	bl	8002552 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00a      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fa2:	f7ff fa2f 	bl	8002404 <LL_ADC_SetOffset>
 8002fa6:	e17b      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fa4c 	bl	800244c <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x148>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fa41 	bl	800244c <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	e01e      	b.n	8003012 <HAL_ADC_ConfigChannel+0x186>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fa36 	bl	800244c <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e004      	b.n	8003010 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_ADC_ConfigChannel+0x19e>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	e018      	b.n	800305c <HAL_ADC_ConfigChannel+0x1d0>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800303e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e004      	b.n	800305c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fa05 	bl	8002478 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f9e9 	bl	800244c <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_ADC_ConfigChannel+0x20e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f9de 	bl	800244c <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	e01e      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x24c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f9d3 	bl	800244c <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e004      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80030cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x264>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	e018      	b.n	8003122 <HAL_ADC_ConfigChannel+0x296>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800310c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e004      	b.n	8003122 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f9a2 	bl	8002478 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f986 	bl	800244c <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x2d4>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f97b 	bl	800244c <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	e01e      	b.n	800319e <HAL_ADC_ConfigChannel+0x312>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f970 	bl	800244c <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800317e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e004      	b.n	800319c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x32a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	e016      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x358>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e004      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80031da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d106      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2102      	movs	r1, #2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f941 	bl	8002478 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2103      	movs	r1, #3
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f925 	bl	800244c <LL_ADC_GetOffsetChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x396>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2103      	movs	r1, #3
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f91a 	bl	800244c <LL_ADC_GetOffsetChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	e017      	b.n	8003252 <HAL_ADC_ConfigChannel+0x3c6>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2103      	movs	r1, #3
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f90f 	bl	800244c <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800323a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_ADC_ConfigChannel+0x3de>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	e011      	b.n	800328e <HAL_ADC_ConfigChannel+0x402>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e003      	b.n	800328e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	2103      	movs	r1, #3
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f8ec 	bl	8002478 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fa05 	bl	80026b4 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f040 813f 	bne.w	8003530 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	f7ff f972 	bl	80025a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <HAL_ADC_ConfigChannel+0x678>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	f040 8130 	bne.w	8003530 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x46c>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	3301      	adds	r3, #1
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e019      	b.n	800332c <HAL_ADC_ConfigChannel+0x4a0>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003308:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e003      	b.n	800331c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2b09      	cmp	r3, #9
 8003324:	bf94      	ite	ls
 8003326:	2301      	movls	r3, #1
 8003328:	2300      	movhi	r3, #0
 800332a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332c:	2b00      	cmp	r3, #0
 800332e:	d079      	beq.n	8003424 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <HAL_ADC_ConfigChannel+0x4c0>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	069b      	lsls	r3, r3, #26
 8003346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800334a:	e015      	b.n	8003378 <HAL_ADC_ConfigChannel+0x4ec>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800335a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e003      	b.n	8003370 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3301      	adds	r3, #1
 8003372:	069b      	lsls	r3, r3, #26
 8003374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x50c>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	e017      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x53c>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e003      	b.n	80033bc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80033b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	ea42 0103 	orr.w	r1, r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x562>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	3301      	adds	r3, #1
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	051b      	lsls	r3, r3, #20
 80033ec:	e018      	b.n	8003420 <HAL_ADC_ConfigChannel+0x594>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e003      	b.n	8003412 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003420:	430b      	orrs	r3, r1
 8003422:	e080      	b.n	8003526 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x5b4>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	3301      	adds	r3, #1
 8003438:	069b      	lsls	r3, r3, #26
 800343a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800343e:	e015      	b.n	800346c <HAL_ADC_ConfigChannel+0x5e0>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003458:	2320      	movs	r3, #32
 800345a:	e003      	b.n	8003464 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3301      	adds	r3, #1
 8003466:	069b      	lsls	r3, r3, #26
 8003468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_ADC_ConfigChannel+0x600>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	3301      	adds	r3, #1
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	e017      	b.n	80034bc <HAL_ADC_ConfigChannel+0x630>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	61fb      	str	r3, [r7, #28]
  return result;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	ea42 0103 	orr.w	r1, r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x65c>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0e9b      	lsrs	r3, r3, #26
 80034d2:	3301      	adds	r3, #1
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	3b1e      	subs	r3, #30
 80034e0:	051b      	lsls	r3, r3, #20
 80034e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e6:	e01d      	b.n	8003524 <HAL_ADC_ConfigChannel+0x698>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	613b      	str	r3, [r7, #16]
  return result;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e005      	b.n	8003510 <HAL_ADC_ConfigChannel+0x684>
 8003504:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3301      	adds	r3, #1
 8003512:	f003 021f 	and.w	r2, r3, #31
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	3b1e      	subs	r3, #30
 800351e:	051b      	lsls	r3, r3, #20
 8003520:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003524:	430b      	orrs	r3, r1
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	4619      	mov	r1, r3
 800352c:	f7ff f811 	bl	8002552 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b3d      	ldr	r3, [pc, #244]	; (800362c <HAL_ADC_ConfigChannel+0x7a0>)
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d06c      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800353c:	483c      	ldr	r0, [pc, #240]	; (8003630 <HAL_ADC_ConfigChannel+0x7a4>)
 800353e:	f7fe ff53 	bl	80023e8 <LL_ADC_GetCommonPathInternalCh>
 8003542:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3a      	ldr	r2, [pc, #232]	; (8003634 <HAL_ADC_ConfigChannel+0x7a8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d127      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d121      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a35      	ldr	r2, [pc, #212]	; (8003638 <HAL_ADC_ConfigChannel+0x7ac>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d157      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800356e:	4619      	mov	r1, r3
 8003570:	482f      	ldr	r0, [pc, #188]	; (8003630 <HAL_ADC_ConfigChannel+0x7a4>)
 8003572:	f7fe ff26 	bl	80023c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_ADC_ConfigChannel+0x7b0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	099b      	lsrs	r3, r3, #6
 800357c:	4a30      	ldr	r2, [pc, #192]	; (8003640 <HAL_ADC_ConfigChannel+0x7b4>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003590:	e002      	b.n	8003598 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f9      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800359e:	e03a      	b.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_ADC_ConfigChannel+0x7b8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d113      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x746>
 80035aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_ADC_ConfigChannel+0x7ac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d12a      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c8:	4619      	mov	r1, r3
 80035ca:	4819      	ldr	r0, [pc, #100]	; (8003630 <HAL_ADC_ConfigChannel+0x7a4>)
 80035cc:	f7fe fef9 	bl	80023c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d0:	e021      	b.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_ADC_ConfigChannel+0x7bc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d11c      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_ADC_ConfigChannel+0x7ac>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035fa:	4619      	mov	r1, r3
 80035fc:	480c      	ldr	r0, [pc, #48]	; (8003630 <HAL_ADC_ConfigChannel+0x7a4>)
 80035fe:	f7fe fee0 	bl	80023c2 <LL_ADC_SetCommonPathInternalCh>
 8003602:	e008      	b.n	8003616 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800361e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003622:	4618      	mov	r0, r3
 8003624:	37d8      	adds	r7, #216	; 0xd8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	80080000 	.word	0x80080000
 8003630:	50040300 	.word	0x50040300
 8003634:	c7520000 	.word	0xc7520000
 8003638:	50040000 	.word	0x50040000
 800363c:	20000014 	.word	0x20000014
 8003640:	053e2d63 	.word	0x053e2d63
 8003644:	cb840000 	.word	0xcb840000
 8003648:	80000001 	.word	0x80000001

0800364c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f82b 	bl	80026b4 <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d14d      	bne.n	8003700 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	4b28      	ldr	r3, [pc, #160]	; (800370c <ADC_Enable+0xc0>)
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e039      	b.n	8003702 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fffa 	bl	800268c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003698:	f7fe fe74 	bl	8002384 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800369e:	e028      	b.n	80036f2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f805 	bl	80026b4 <LL_ADC_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe ffe9 	bl	800268c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ba:	f7fe fe63 	bl	8002384 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d914      	bls.n	80036f2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d00d      	beq.n	80036f2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d1cf      	bne.n	80036a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	8000003f 	.word	0x8000003f

08003710 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003726:	2b00      	cmp	r3, #0
 8003728:	d14b      	bne.n	80037c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d021      	beq.n	8003788 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe feb0 	bl	80024ae <LL_ADC_REG_IsTriggerSourceSWStart>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d032      	beq.n	80037ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d12b      	bne.n	80037ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11f      	bne.n	80037ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
 8003786:	e018      	b.n	80037ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d111      	bne.n	80037ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7fd fc26 	bl	800100c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037c0:	e00e      	b.n	80037e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff fb52 	bl	8002e78 <HAL_ADC_ErrorCallback>
}
 80037d4:	e004      	b.n	80037e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fb2a 	bl	8002e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff fb24 	bl	8002e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60d3      	str	r3, [r2, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__NVIC_GetPriorityGrouping+0x18>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 0307 	and.w	r3, r3, #7
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	db0b      	blt.n	800392a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <__NVIC_EnableIRQ+0x38>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	2b00      	cmp	r3, #0
 800394e:	db0a      	blt.n	8003966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <__NVIC_SetPriority+0x4c>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	0112      	lsls	r2, r2, #4
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	440b      	add	r3, r1
 8003960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003964:	e00a      	b.n	800397c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4908      	ldr	r1, [pc, #32]	; (800398c <__NVIC_SetPriority+0x50>)
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3b04      	subs	r3, #4
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	440b      	add	r3, r1
 800397a:	761a      	strb	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f1c3 0307 	rsb	r3, r3, #7
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf28      	it	cs
 80039ae:	2304      	movcs	r3, #4
 80039b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d902      	bls.n	80039c0 <NVIC_EncodePriority+0x30>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3b03      	subs	r3, #3
 80039be:	e000      	b.n	80039c2 <NVIC_EncodePriority+0x32>
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	401a      	ands	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d8:	f04f 31ff 	mov.w	r1, #4294967295
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	4313      	orrs	r3, r2
         );
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a08:	d301      	bcc.n	8003a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00f      	b.n	8003a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <SysTick_Config+0x40>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a16:	210f      	movs	r1, #15
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f7ff ff8e 	bl	800393c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <SysTick_Config+0x40>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a26:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <SysTick_Config+0x40>)
 8003a28:	2207      	movs	r2, #7
 8003a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	e000e010 	.word	0xe000e010

08003a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff29 	bl	800389c <__NVIC_SetPriorityGrouping>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a64:	f7ff ff3e 	bl	80038e4 <__NVIC_GetPriorityGrouping>
 8003a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	6978      	ldr	r0, [r7, #20]
 8003a70:	f7ff ff8e 	bl	8003990 <NVIC_EncodePriority>
 8003a74:	4602      	mov	r2, r0
 8003a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff5d 	bl	800393c <__NVIC_SetPriority>
}
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff31 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ffa2 	bl	80039f8 <SysTick_Config>
 8003ab4:	4603      	mov	r3, r0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e054      	b.n	8003b7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7f5b      	ldrb	r3, [r3, #29]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f850 	bl	8001b88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <HAL_CRC_Init+0xc4>)
 8003afc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0218 	bic.w	r2, r2, #24
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	e00c      	b.n	8003b2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f948 	bl	8003db0 <HAL_CRCEx_Polynomial_Set>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e028      	b.n	8003b7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	795b      	ldrb	r3, [r3, #5]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	e004      	b.n	8003b48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6912      	ldr	r2, [r2, #16]
 8003b46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	04c11db7 	.word	0x04c11db7

08003b88 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d006      	beq.n	8003bc4 <HAL_CRC_Calculate+0x3c>
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d829      	bhi.n	8003c0e <HAL_CRC_Calculate+0x86>
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d019      	beq.n	8003bf2 <HAL_CRC_Calculate+0x6a>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d01e      	beq.n	8003c00 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003bc2:	e024      	b.n	8003c0e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e00a      	b.n	8003be0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3f0      	bcc.n	8003bca <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	613b      	str	r3, [r7, #16]
      break;
 8003bf0:	e00e      	b.n	8003c10 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f812 	bl	8003c20 <CRC_Handle_8>
 8003bfc:	6138      	str	r0, [r7, #16]
      break;
 8003bfe:	e007      	b.n	8003c10 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f899 	bl	8003d3c <CRC_Handle_16>
 8003c0a:	6138      	str	r0, [r7, #16]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_CRC_Calculate+0x88>
      break;
 8003c0e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003c16:	693b      	ldr	r3, [r7, #16]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e023      	b.n	8003c7a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4413      	add	r3, r2
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3301      	adds	r3, #1
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	440b      	add	r3, r1
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c4c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	440b      	add	r3, r1
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003c5c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	3303      	adds	r3, #3
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	440b      	add	r3, r1
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003c70:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3d6      	bcc.n	8003c32 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04d      	beq.n	8003d2a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d116      	bne.n	8003ce0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4413      	add	r3, r2
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b21a      	sxth	r2, r3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	440b      	add	r3, r1
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b21b      	sxth	r3, r3
 8003cd2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	8b7a      	ldrh	r2, [r7, #26]
 8003cde:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d11f      	bne.n	8003d2a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	b21a      	sxth	r2, r3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	440b      	add	r3, r1
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	8b7a      	ldrh	r2, [r7, #26]
 8003d16:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	4413      	add	r3, r2
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3724      	adds	r7, #36	; 0x24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e013      	b.n	8003d76 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	440b      	add	r3, r1
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	4619      	mov	r1, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3301      	adds	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3e6      	bcc.n	8003d4e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4413      	add	r3, r2
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003dc0:	231f      	movs	r3, #31
 8003dc2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003dc4:	bf00      	nop
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	613a      	str	r2, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_CRCEx_Polynomial_Set+0x34>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b18      	cmp	r3, #24
 8003de8:	d846      	bhi.n	8003e78 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e7f 	.word	0x08003e7f
 8003df4:	08003e79 	.word	0x08003e79
 8003df8:	08003e79 	.word	0x08003e79
 8003dfc:	08003e79 	.word	0x08003e79
 8003e00:	08003e79 	.word	0x08003e79
 8003e04:	08003e79 	.word	0x08003e79
 8003e08:	08003e79 	.word	0x08003e79
 8003e0c:	08003e79 	.word	0x08003e79
 8003e10:	08003e6d 	.word	0x08003e6d
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003e79 	.word	0x08003e79
 8003e1c:	08003e79 	.word	0x08003e79
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e55 	.word	0x08003e55
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d913      	bls.n	8003e82 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e5e:	e010      	b.n	8003e82 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b07      	cmp	r3, #7
 8003e64:	d90f      	bls.n	8003e86 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e6a:	e00c      	b.n	8003e86 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	d90b      	bls.n	8003e8a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e76:	e008      	b.n	8003e8a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7c:	e006      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e004      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e8a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 0118 	bic.w	r1, r3, #24
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e098      	b.n	8004000 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b4d      	ldr	r3, [pc, #308]	; (800400c <HAL_DMA_Init+0x150>)
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d80f      	bhi.n	8003efa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	; (8004010 <HAL_DMA_Init+0x154>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4a4b      	ldr	r2, [pc, #300]	; (8004014 <HAL_DMA_Init+0x158>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	009a      	lsls	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_DMA_Init+0x15c>)
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef8:	e00e      	b.n	8003f18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_DMA_Init+0x160>)
 8003f02:	4413      	add	r3, r2
 8003f04:	4a43      	ldr	r2, [pc, #268]	; (8004014 <HAL_DMA_Init+0x158>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	009a      	lsls	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a42      	ldr	r2, [pc, #264]	; (8004020 <HAL_DMA_Init+0x164>)
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f72:	d039      	beq.n	8003fe8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	4a27      	ldr	r2, [pc, #156]	; (8004018 <HAL_DMA_Init+0x15c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d11a      	bne.n	8003fb4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f7e:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_DMA_Init+0x168>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 031c 	and.w	r3, r3, #28
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	4924      	ldr	r1, [pc, #144]	; (8004024 <HAL_DMA_Init+0x168>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_DMA_Init+0x168>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f003 031c 	and.w	r3, r3, #28
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	491d      	ldr	r1, [pc, #116]	; (8004024 <HAL_DMA_Init+0x168>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
 8003fb2:	e019      	b.n	8003fe8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <HAL_DMA_Init+0x16c>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	f003 031c 	and.w	r3, r3, #28
 8003fc0:	210f      	movs	r1, #15
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	4917      	ldr	r1, [pc, #92]	; (8004028 <HAL_DMA_Init+0x16c>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_DMA_Init+0x16c>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 031c 	and.w	r3, r3, #28
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	4911      	ldr	r1, [pc, #68]	; (8004028 <HAL_DMA_Init+0x16c>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40020407 	.word	0x40020407
 8004010:	bffdfff8 	.word	0xbffdfff8
 8004014:	cccccccd 	.word	0xcccccccd
 8004018:	40020000 	.word	0x40020000
 800401c:	bffdfbf8 	.word	0xbffdfbf8
 8004020:	40020400 	.word	0x40020400
 8004024:	400200a8 	.word	0x400200a8
 8004028:	400204a8 	.word	0x400204a8

0800402c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_DMA_Start_IT+0x20>
 8004048:	2302      	movs	r3, #2
 800404a:	e04b      	b.n	80040e4 <HAL_DMA_Start_IT+0xb8>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d13a      	bne.n	80040d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f95f 	bl	8004348 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 020e 	orr.w	r2, r2, #14
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00f      	b.n	80040c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 020a 	orr.w	r2, r2, #10
 80040c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e005      	b.n	80040e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040de:	2302      	movs	r3, #2
 80040e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d008      	beq.n	8004116 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2204      	movs	r2, #4
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e022      	b.n	800415c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 020e 	bic.w	r2, r2, #14
 8004124:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f003 021c 	and.w	r2, r3, #28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f202 	lsl.w	r2, r1, r2
 8004148:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d005      	beq.n	800418c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e029      	b.n	80041e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 020e 	bic.w	r2, r2, #14
 800419a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 021c 	and.w	r2, r3, #28
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2101      	movs	r1, #1
 80041ba:	fa01 f202 	lsl.w	r2, r1, r2
 80041be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
    }
  }
  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f003 031c 	and.w	r3, r3, #28
 800420a:	2204      	movs	r2, #4
 800420c:	409a      	lsls	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d026      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7a>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d021      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0204 	bic.w	r2, r2, #4
 800423c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f003 021c 	and.w	r2, r3, #28
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2104      	movs	r1, #4
 800424c:	fa01 f202 	lsl.w	r2, r1, r2
 8004250:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d071      	beq.n	800433e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004262:	e06c      	b.n	800433e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	f003 031c 	and.w	r3, r3, #28
 800426c:	2202      	movs	r2, #2
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <HAL_DMA_IRQHandler+0xec>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d029      	beq.n	80042d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 020a 	bic.w	r2, r2, #10
 800429e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f003 021c 	and.w	r2, r3, #28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2102      	movs	r1, #2
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d038      	beq.n	800433e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80042d4:	e033      	b.n	800433e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f003 031c 	and.w	r3, r3, #28
 80042de:	2208      	movs	r2, #8
 80042e0:	409a      	lsls	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02a      	beq.n	8004340 <HAL_DMA_IRQHandler+0x156>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d025      	beq.n	8004340 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 020e 	bic.w	r2, r2, #14
 8004302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f003 021c 	and.w	r2, r3, #28
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2101      	movs	r1, #1
 8004312:	fa01 f202 	lsl.w	r2, r1, r2
 8004316:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800433e:	bf00      	nop
 8004340:	bf00      	nop
}
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f003 021c 	and.w	r2, r3, #28
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b10      	cmp	r3, #16
 8004378:	d108      	bne.n	800438c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800438a:	e007      	b.n	800439c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b6:	e148      	b.n	800464a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2101      	movs	r1, #1
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 813a 	beq.w	8004644 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d005      	beq.n	80043e8 <HAL_GPIO_Init+0x40>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d130      	bne.n	800444a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	2203      	movs	r2, #3
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800441e:	2201      	movs	r2, #1
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 0201 	and.w	r2, r3, #1
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b03      	cmp	r3, #3
 8004454:	d017      	beq.n	8004486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d123      	bne.n	80044da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	08da      	lsrs	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3208      	adds	r2, #8
 800449a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	220f      	movs	r2, #15
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	08da      	lsrs	r2, r3, #3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3208      	adds	r2, #8
 80044d4:	6939      	ldr	r1, [r7, #16]
 80044d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	2203      	movs	r2, #3
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8094 	beq.w	8004644 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451c:	4b52      	ldr	r3, [pc, #328]	; (8004668 <HAL_GPIO_Init+0x2c0>)
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	4a51      	ldr	r2, [pc, #324]	; (8004668 <HAL_GPIO_Init+0x2c0>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6613      	str	r3, [r2, #96]	; 0x60
 8004528:	4b4f      	ldr	r3, [pc, #316]	; (8004668 <HAL_GPIO_Init+0x2c0>)
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004534:	4a4d      	ldr	r2, [pc, #308]	; (800466c <HAL_GPIO_Init+0x2c4>)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	220f      	movs	r2, #15
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800455e:	d00d      	beq.n	800457c <HAL_GPIO_Init+0x1d4>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a43      	ldr	r2, [pc, #268]	; (8004670 <HAL_GPIO_Init+0x2c8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <HAL_GPIO_Init+0x1d0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a42      	ldr	r2, [pc, #264]	; (8004674 <HAL_GPIO_Init+0x2cc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_GPIO_Init+0x1cc>
 8004570:	2302      	movs	r3, #2
 8004572:	e004      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 8004574:	2307      	movs	r3, #7
 8004576:	e002      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 800457c:	2300      	movs	r3, #0
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	f002 0203 	and.w	r2, r2, #3
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	4093      	lsls	r3, r2
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800458e:	4937      	ldr	r1, [pc, #220]	; (800466c <HAL_GPIO_Init+0x2c4>)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	3302      	adds	r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045c6:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045f0:	4b21      	ldr	r3, [pc, #132]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004614:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3301      	adds	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	f47f aeaf 	bne.w	80043b8 <HAL_GPIO_Init+0x10>
  }
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40021000 	.word	0x40021000
 800466c:	40010000 	.word	0x40010000
 8004670:	48000400 	.word	0x48000400
 8004674:	48000800 	.word	0x48000800
 8004678:	40010400 	.word	0x40010400

0800467c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800468c:	787b      	ldrb	r3, [r7, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004698:	e002      	b.n	80046a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4013      	ands	r3, r2
 80046c4:	041a      	lsls	r2, r3, #16
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	43d9      	mvns	r1, r3
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	400b      	ands	r3, r1
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	619a      	str	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40007000 	.word	0x40007000

080046fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470a:	d130      	bne.n	800476e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800470c:	4b23      	ldr	r3, [pc, #140]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004718:	d038      	beq.n	800478c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2232      	movs	r2, #50	; 0x32
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0c9b      	lsrs	r3, r3, #18
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004740:	e002      	b.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b01      	subs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004748:	4b14      	ldr	r3, [pc, #80]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d102      	bne.n	800475c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f2      	bne.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004768:	d110      	bne.n	800478c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e00f      	b.n	800478e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d007      	beq.n	800478c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004784:	4a05      	ldr	r2, [pc, #20]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40007000 	.word	0x40007000
 80047a0:	20000014 	.word	0x20000014
 80047a4:	431bde83 	.word	0x431bde83

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f000 bc10 	b.w	8004fdc <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047bc:	4b96      	ldr	r3, [pc, #600]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c6:	4b94      	ldr	r3, [pc, #592]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80e4 	beq.w	80049a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4c>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	f040 808b 	bne.w	8004902 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f040 8087 	bne.w	8004902 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f4:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_OscConfig+0x64>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e3e7      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	4b81      	ldr	r3, [pc, #516]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_RCC_OscConfig+0x7e>
 800481c:	4b7e      	ldr	r3, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004824:	e005      	b.n	8004832 <HAL_RCC_OscConfig+0x8a>
 8004826:	4b7c      	ldr	r3, [pc, #496]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004832:	4293      	cmp	r3, r2
 8004834:	d223      	bcs.n	800487e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fd7a 	bl	8005334 <RCC_SetFlashLatencyFromMSIRange>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e3c8      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	4b73      	ldr	r3, [pc, #460]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a72      	ldr	r2, [pc, #456]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	496d      	ldr	r1, [pc, #436]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004868:	4b6b      	ldr	r3, [pc, #428]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	4968      	ldr	r1, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
 800487c:	e025      	b.n	80048ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487e:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4960      	ldr	r1, [pc, #384]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489c:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	495b      	ldr	r1, [pc, #364]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fd3a 	bl	8005334 <RCC_SetFlashLatencyFromMSIRange>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e388      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ca:	f000 fc6f 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	4950      	ldr	r1, [pc, #320]	; (8004a1c <HAL_RCC_OscConfig+0x274>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a4e      	ldr	r2, [pc, #312]	; (8004a20 <HAL_RCC_OscConfig+0x278>)
 80048e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048ea:	4b4e      	ldr	r3, [pc, #312]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fcf8 	bl	80022e4 <HAL_InitTick>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d052      	beq.n	80049a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	e36c      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d032      	beq.n	8004970 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800490a:	4b43      	ldr	r3, [pc, #268]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004916:	f7fd fd35 	bl	8002384 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800491e:	f7fd fd31 	bl	8002384 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e355      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a35      	ldr	r2, [pc, #212]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b33      	ldr	r3, [pc, #204]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	4930      	ldr	r1, [pc, #192]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800495a:	4b2f      	ldr	r3, [pc, #188]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	492b      	ldr	r1, [pc, #172]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
 800496e:	e01a      	b.n	80049a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a28      	ldr	r2, [pc, #160]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800497c:	f7fd fd02 	bl	8002384 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004984:	f7fd fcfe 	bl	8002384 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e322      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x1dc>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d073      	beq.n	8004a9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_OscConfig+0x21c>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d10e      	bne.n	80049dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d10b      	bne.n	80049dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d063      	beq.n	8004a98 <HAL_RCC_OscConfig+0x2f0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d15f      	bne.n	8004a98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e2ff      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d106      	bne.n	80049f4 <HAL_RCC_OscConfig+0x24c>
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e025      	b.n	8004a40 <HAL_RCC_OscConfig+0x298>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049fc:	d114      	bne.n	8004a28 <HAL_RCC_OscConfig+0x280>
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a05      	ldr	r2, [pc, #20]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a02      	ldr	r2, [pc, #8]	; (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e013      	b.n	8004a40 <HAL_RCC_OscConfig+0x298>
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08009288 	.word	0x08009288
 8004a20:	20000014 	.word	0x20000014
 8004a24:	20000018 	.word	0x20000018
 8004a28:	4ba0      	ldr	r3, [pc, #640]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a9f      	ldr	r2, [pc, #636]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b9d      	ldr	r3, [pc, #628]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a9c      	ldr	r2, [pc, #624]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fc9c 	bl	8002384 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fd fc98 	bl	8002384 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e2bc      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a62:	4b92      	ldr	r3, [pc, #584]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x2a8>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fd fc88 	bl	8002384 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fd fc84 	bl	8002384 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e2a8      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a8a:	4b88      	ldr	r3, [pc, #544]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x2d0>
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d060      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x310>
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d119      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d116      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	4b7c      	ldr	r3, [pc, #496]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x328>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e285      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	4b76      	ldr	r3, [pc, #472]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	4973      	ldr	r1, [pc, #460]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae4:	e040      	b.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d023      	beq.n	8004b36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aee:	4b6f      	ldr	r3, [pc, #444]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6e      	ldr	r2, [pc, #440]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd fc43 	bl	8002384 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fd fc3f 	bl	8002384 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e263      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b14:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b20:	4b62      	ldr	r3, [pc, #392]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	495f      	ldr	r1, [pc, #380]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
 8004b34:	e018      	b.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b5d      	ldr	r3, [pc, #372]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a5c      	ldr	r2, [pc, #368]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd fc1f 	bl	8002384 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4a:	f7fd fc1b 	bl	8002384 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e23f      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b5c:	4b53      	ldr	r3, [pc, #332]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f0      	bne.n	8004b4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d03c      	beq.n	8004bee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01c      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd fbfa 	bl	8002384 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b94:	f7fd fbf6 	bl	8002384 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e21a      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba6:	4b41      	ldr	r3, [pc, #260]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ef      	beq.n	8004b94 <HAL_RCC_OscConfig+0x3ec>
 8004bb4:	e01b      	b.n	8004bee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb6:	4b3d      	ldr	r3, [pc, #244]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bbc:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd fbdd 	bl	8002384 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bce:	f7fd fbd9 	bl	8002384 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1fd      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be0:	4b32      	ldr	r3, [pc, #200]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ef      	bne.n	8004bce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80a6 	beq.w	8004d48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c00:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10d      	bne.n	8004c28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c10:	4a26      	ldr	r2, [pc, #152]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6593      	str	r3, [r2, #88]	; 0x58
 8004c18:	4b24      	ldr	r3, [pc, #144]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d118      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c40:	f7fd fba0 	bl	8002384 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c48:	f7fd fb9c 	bl	8002384 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1c0      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCC_OscConfig+0x4d8>
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7e:	e029      	b.n	8004cd4 <HAL_RCC_OscConfig+0x52c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d115      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x50c>
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	4a03      	ldr	r2, [pc, #12]	; (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca8:	e014      	b.n	8004cd4 <HAL_RCC_OscConfig+0x52c>
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	4b9a      	ldr	r3, [pc, #616]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	4a99      	ldr	r2, [pc, #612]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cc4:	4b96      	ldr	r3, [pc, #600]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	4a95      	ldr	r2, [pc, #596]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fd fb52 	bl	8002384 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fd fb4e 	bl	8002384 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e170      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	4b89      	ldr	r3, [pc, #548]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ed      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x53c>
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fd fb3b 	bl	8002384 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fd fb37 	bl	8002384 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e159      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d28:	4b7d      	ldr	r3, [pc, #500]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ed      	bne.n	8004d12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3c:	4b78      	ldr	r3, [pc, #480]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	4a77      	ldr	r2, [pc, #476]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d03c      	beq.n	8004dce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d5c:	4b70      	ldr	r3, [pc, #448]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d62:	4a6f      	ldr	r2, [pc, #444]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fd fb0a 	bl	8002384 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d74:	f7fd fb06 	bl	8002384 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e12a      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d86:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0ef      	beq.n	8004d74 <HAL_RCC_OscConfig+0x5cc>
 8004d94:	e01b      	b.n	8004dce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d96:	4b62      	ldr	r3, [pc, #392]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d9c:	4a60      	ldr	r2, [pc, #384]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fd faed 	bl	8002384 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dae:	f7fd fae9 	bl	8002384 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e10d      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dc0:	4b57      	ldr	r3, [pc, #348]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ef      	bne.n	8004dae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8101 	beq.w	8004fda <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	f040 80c9 	bne.w	8004f74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004de2:	4b4f      	ldr	r3, [pc, #316]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d12c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	3b01      	subs	r3, #1
 8004e02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d123      	bne.n	8004e50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d11b      	bne.n	8004e50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d113      	bne.n	8004e50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	3b01      	subs	r3, #1
 8004e36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d109      	bne.n	8004e50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d06b      	beq.n	8004f28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d062      	beq.n	8004f1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e56:	4b32      	ldr	r3, [pc, #200]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0ba      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e66:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e72:	f7fd fa87 	bl	8002384 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd fa83 	bl	8002384 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0a7      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	4b21      	ldr	r3, [pc, #132]	; (8004f24 <HAL_RCC_OscConfig+0x77c>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eb2:	0212      	lsls	r2, r2, #8
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eba:	0852      	lsrs	r2, r2, #1
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0552      	lsls	r2, r2, #21
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ec6:	0852      	lsrs	r2, r2, #1
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0652      	lsls	r2, r2, #25
 8004ecc:	4311      	orrs	r1, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ed2:	06d2      	lsls	r2, r2, #27
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	4912      	ldr	r1, [pc, #72]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ef4:	f7fd fa46 	bl	8002384 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fd fa42 	bl	8002384 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e066      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f1a:	e05e      	b.n	8004fda <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e05d      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
 8004f20:	40021000 	.word	0x40021000
 8004f24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f28:	4b2e      	ldr	r3, [pc, #184]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d152      	bne.n	8004fda <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f4c:	f7fd fa1a 	bl	8002384 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd fa16 	bl	8002384 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e03a      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x7ac>
 8004f72:	e032      	b.n	8004fda <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d02d      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f84:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f86:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f92:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004f98:	f023 0303 	bic.w	r3, r3, #3
 8004f9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004fa4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fd f9e9 	bl	8002384 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fd f9e5 	bl	8002384 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e009      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCC_OscConfig+0x83c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x80e>
 8004fd4:	e001      	b.n	8004fda <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0c8      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b66      	ldr	r3, [pc, #408]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d910      	bls.n	800502c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b63      	ldr	r3, [pc, #396]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 0207 	bic.w	r2, r3, #7
 8005012:	4961      	ldr	r1, [pc, #388]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b5f      	ldr	r3, [pc, #380]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b0      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04c      	beq.n	80050d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d107      	bne.n	8005050 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005040:	4b56      	ldr	r3, [pc, #344]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d121      	bne.n	8005090 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e09e      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d107      	bne.n	8005068 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005058:	4b50      	ldr	r3, [pc, #320]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d115      	bne.n	8005090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e092      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d107      	bne.n	8005080 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005070:	4b4a      	ldr	r3, [pc, #296]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e086      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005080:	4b46      	ldr	r3, [pc, #280]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e07e      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005090:	4b42      	ldr	r3, [pc, #264]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 0203 	bic.w	r2, r3, #3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	493f      	ldr	r1, [pc, #252]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fd f96f 	bl	8002384 <HAL_GetTick>
 80050a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050aa:	f7fd f96b 	bl	8002384 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e066      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c0:	4b36      	ldr	r3, [pc, #216]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 020c 	and.w	r2, r3, #12
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d1eb      	bne.n	80050aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050de:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	492c      	ldr	r1, [pc, #176]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f0:	4b29      	ldr	r3, [pc, #164]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d210      	bcs.n	8005120 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b26      	ldr	r3, [pc, #152]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 0207 	bic.w	r2, r3, #7
 8005106:	4924      	ldr	r1, [pc, #144]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <HAL_RCC_ClockConfig+0x1b0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e036      	b.n	800518e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4918      	ldr	r1, [pc, #96]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4910      	ldr	r1, [pc, #64]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800515e:	f000 f825 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8005162:	4602      	mov	r2, r0
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_RCC_ClockConfig+0x1b4>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	490c      	ldr	r1, [pc, #48]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	5ccb      	ldrb	r3, [r1, r3]
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd f8ae 	bl	80022e4 <HAL_InitTick>
 8005188:	4603      	mov	r3, r0
 800518a:	72fb      	strb	r3, [r7, #11]

  return status;
 800518c:	7afb      	ldrb	r3, [r7, #11]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40022000 	.word	0x40022000
 800519c:	40021000 	.word	0x40021000
 80051a0:	08009288 	.word	0x08009288
 80051a4:	20000014 	.word	0x20000014
 80051a8:	20000018 	.word	0x20000018

080051ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	; 0x24
 80051b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ba:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051c4:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x34>
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d121      	bne.n	800521e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d11e      	bne.n	800521e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e0:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051ec:	4b31      	ldr	r3, [pc, #196]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e005      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051fc:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005208:	4a2b      	ldr	r2, [pc, #172]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10d      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800521c:	e00a      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d102      	bne.n	800522a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005224:	4b25      	ldr	r3, [pc, #148]	; (80052bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	e004      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d101      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005230:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d134      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0xa6>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d003      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0xac>
 8005250:	e005      	b.n	800525e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005252:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005254:	617b      	str	r3, [r7, #20]
      break;
 8005256:	e005      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800525a:	617b      	str	r3, [r7, #20]
      break;
 800525c:	e002      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	617b      	str	r3, [r7, #20]
      break;
 8005262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	3301      	adds	r3, #1
 8005270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	fb03 f202 	mul.w	r2, r3, r2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	0e5b      	lsrs	r3, r3, #25
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	3301      	adds	r3, #1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052a4:	69bb      	ldr	r3, [r7, #24]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3724      	adds	r7, #36	; 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	080092a0 	.word	0x080092a0
 80052bc:	00f42400 	.word	0x00f42400
 80052c0:	007a1200 	.word	0x007a1200

080052c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ca:	681b      	ldr	r3, [r3, #0]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000014 	.word	0x20000014

080052dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052e0:	f7ff fff0 	bl	80052c4 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4904      	ldr	r1, [pc, #16]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	08009298 	.word	0x08009298

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800530c:	f7ff ffda 	bl	80052c4 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0adb      	lsrs	r3, r3, #11
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4904      	ldr	r1, [pc, #16]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000
 8005330:	08009298 	.word	0x08009298

08005334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005340:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800534c:	f7ff f9c8 	bl	80046e0 <HAL_PWREx_GetVoltageRange>
 8005350:	6178      	str	r0, [r7, #20]
 8005352:	e014      	b.n	800537e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535e:	6593      	str	r3, [r2, #88]	; 0x58
 8005360:	4b22      	ldr	r3, [pc, #136]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800536c:	f7ff f9b8 	bl	80046e0 <HAL_PWREx_GetVoltageRange>
 8005370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005384:	d10b      	bne.n	800539e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d919      	bls.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2ba0      	cmp	r3, #160	; 0xa0
 8005390:	d902      	bls.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005392:	2302      	movs	r3, #2
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e013      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005398:	2301      	movs	r3, #1
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e010      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d902      	bls.n	80053aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053a4:	2303      	movs	r3, #3
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e00a      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d102      	bne.n	80053b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053b0:	2302      	movs	r3, #2
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	e004      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d101      	bne.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053bc:	2301      	movs	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 0207 	bic.w	r2, r3, #7
 80053c8:	4909      	ldr	r1, [pc, #36]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d001      	beq.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40022000 	.word	0x40022000

080053f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053fc:	2300      	movs	r3, #0
 80053fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005400:	2300      	movs	r3, #0
 8005402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540c:	2b00      	cmp	r3, #0
 800540e:	d031      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005418:	d01a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800541a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800541e:	d814      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005424:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005428:	d10f      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800542a:	4b5d      	ldr	r3, [pc, #372]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4a5c      	ldr	r2, [pc, #368]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005436:	e00c      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f9ce 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	74fb      	strb	r3, [r7, #19]
      break;
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	494e      	ldr	r1, [pc, #312]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 809e 	beq.w	80055be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005486:	4b46      	ldr	r3, [pc, #280]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	4a3f      	ldr	r2, [pc, #252]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6593      	str	r3, [r2, #88]	; 0x58
 80054a8:	4b3d      	ldr	r3, [pc, #244]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b4:	2301      	movs	r3, #1
 80054b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b8:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a39      	ldr	r2, [pc, #228]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c4:	f7fc ff5e 	bl	8002384 <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ca:	e009      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7fc ff5a 	bl	8002384 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d902      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	74fb      	strb	r3, [r7, #19]
        break;
 80054de:	e005      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054e0:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ef      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d15a      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f2:	4b2b      	ldr	r3, [pc, #172]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01e      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	429a      	cmp	r2, r3
 800550c:	d019      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005518:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800551a:	4b21      	ldr	r3, [pc, #132]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800553a:	4a19      	ldr	r2, [pc, #100]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d016      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc ff1a 	bl	8002384 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005552:	e00b      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fc ff16 	bl	8002384 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d902      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	74fb      	strb	r3, [r7, #19]
            break;
 800556a:	e006      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ec      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	4904      	ldr	r1, [pc, #16]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005596:	e009      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
 800559c:	e006      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000
 80055a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ac:	7c7b      	ldrb	r3, [r7, #17]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d105      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b2:	4b8a      	ldr	r3, [pc, #552]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	4a89      	ldr	r2, [pc, #548]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ca:	4b84      	ldr	r3, [pc, #528]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f023 0203 	bic.w	r2, r3, #3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	4980      	ldr	r1, [pc, #512]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ec:	4b7b      	ldr	r3, [pc, #492]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f023 020c 	bic.w	r2, r3, #12
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	4978      	ldr	r1, [pc, #480]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560e:	4b73      	ldr	r3, [pc, #460]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	496f      	ldr	r1, [pc, #444]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005630:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	4967      	ldr	r1, [pc, #412]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005652:	4b62      	ldr	r3, [pc, #392]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	495e      	ldr	r1, [pc, #376]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005674:	4b59      	ldr	r3, [pc, #356]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	4956      	ldr	r1, [pc, #344]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005696:	4b51      	ldr	r3, [pc, #324]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	494d      	ldr	r1, [pc, #308]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d028      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b8:	4b48      	ldr	r3, [pc, #288]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	4945      	ldr	r1, [pc, #276]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d6:	d106      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d8:	4b40      	ldr	r3, [pc, #256]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a3f      	ldr	r2, [pc, #252]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e2:	60d3      	str	r3, [r2, #12]
 80056e4:	e011      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ee:	d10c      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f872 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d028      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	492d      	ldr	r1, [pc, #180]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005734:	d106      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005736:	4b29      	ldr	r3, [pc, #164]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4a28      	ldr	r2, [pc, #160]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800573c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005740:	60d3      	str	r3, [r2, #12]
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800574c:	d10c      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	2101      	movs	r1, #1
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f843 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800575e:	7cfb      	ldrb	r3, [r7, #19]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01c      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005774:	4b19      	ldr	r3, [pc, #100]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005782:	4916      	ldr	r1, [pc, #88]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005792:	d10c      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	2102      	movs	r1, #2
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f820 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c8:	4904      	ldr	r1, [pc, #16]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000

080057e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ee:	4b74      	ldr	r3, [pc, #464]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d018      	beq.n	800582c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057fa:	4b71      	ldr	r3, [pc, #452]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0203 	and.w	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d10d      	bne.n	8005826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
       ||
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005812:	4b6b      	ldr	r3, [pc, #428]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
       ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d047      	beq.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	e044      	b.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d018      	beq.n	8005866 <RCCEx_PLLSAI1_Config+0x86>
 8005834:	2b03      	cmp	r3, #3
 8005836:	d825      	bhi.n	8005884 <RCCEx_PLLSAI1_Config+0xa4>
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <RCCEx_PLLSAI1_Config+0x62>
 800583c:	2b02      	cmp	r3, #2
 800583e:	d009      	beq.n	8005854 <RCCEx_PLLSAI1_Config+0x74>
 8005840:	e020      	b.n	8005884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005842:	4b5f      	ldr	r3, [pc, #380]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11d      	bne.n	800588a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005852:	e01a      	b.n	800588a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585c:	2b00      	cmp	r3, #0
 800585e:	d116      	bne.n	800588e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005864:	e013      	b.n	800588e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005866:	4b56      	ldr	r3, [pc, #344]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005872:	4b53      	ldr	r3, [pc, #332]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005882:	e006      	b.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e004      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005892:	bf00      	nop
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800589a:	4b49      	ldr	r3, [pc, #292]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	430b      	orrs	r3, r1
 80058b0:	4943      	ldr	r1, [pc, #268]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d17c      	bne.n	80059b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3f      	ldr	r2, [pc, #252]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c8:	f7fc fd5c 	bl	8002384 <HAL_GetTick>
 80058cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058ce:	e009      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058d0:	f7fc fd58 	bl	8002384 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	73fb      	strb	r3, [r7, #15]
        break;
 80058e2:	e005      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058e4:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ef      	bne.n	80058d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d15f      	bne.n	80059b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d110      	bne.n	800591e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	0211      	lsls	r1, r2, #8
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	06d2      	lsls	r2, r2, #27
 8005914:	430a      	orrs	r2, r1
 8005916:	492a      	ldr	r1, [pc, #168]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005918:	4313      	orrs	r3, r2
 800591a:	610b      	str	r3, [r1, #16]
 800591c:	e027      	b.n	800596e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d112      	bne.n	800594a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800592c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6892      	ldr	r2, [r2, #8]
 8005934:	0211      	lsls	r1, r2, #8
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6912      	ldr	r2, [r2, #16]
 800593a:	0852      	lsrs	r2, r2, #1
 800593c:	3a01      	subs	r2, #1
 800593e:	0552      	lsls	r2, r2, #21
 8005940:	430a      	orrs	r2, r1
 8005942:	491f      	ldr	r1, [pc, #124]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005944:	4313      	orrs	r3, r2
 8005946:	610b      	str	r3, [r1, #16]
 8005948:	e011      	b.n	800596e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005952:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6892      	ldr	r2, [r2, #8]
 800595a:	0211      	lsls	r1, r2, #8
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6952      	ldr	r2, [r2, #20]
 8005960:	0852      	lsrs	r2, r2, #1
 8005962:	3a01      	subs	r2, #1
 8005964:	0652      	lsls	r2, r2, #25
 8005966:	430a      	orrs	r2, r1
 8005968:	4915      	ldr	r1, [pc, #84]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005974:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005978:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fc fd03 	bl	8002384 <HAL_GetTick>
 800597e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005980:	e009      	b.n	8005996 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005982:	f7fc fcff 	bl	8002384 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d902      	bls.n	8005996 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	73fb      	strb	r3, [r7, #15]
          break;
 8005994:	e005      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ef      	beq.n	8005982 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	4903      	ldr	r1, [pc, #12]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000

080059c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e095      	b.n	8005b02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e6:	d009      	beq.n	80059fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	61da      	str	r2, [r3, #28]
 80059ee:	e005      	b.n	80059fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc f8d6 	bl	8001bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a3c:	d902      	bls.n	8005a44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e002      	b.n	8005a4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a52:	d007      	beq.n	8005a64 <HAL_SPI_Init+0xa0>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a5c:	d002      	beq.n	8005a64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	ea42 0103 	orr.w	r1, r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	f003 0204 	and.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ae0:	ea42 0103 	orr.w	r1, r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_SPI_TransmitReceive_IT+0x20>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e091      	b.n	8005c50 <HAL_SPI_TransmitReceive_IT+0x144>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b42:	7dbb      	ldrb	r3, [r7, #22]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d00d      	beq.n	8005b64 <HAL_SPI_TransmitReceive_IT+0x58>
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4e:	d106      	bne.n	8005b5e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <HAL_SPI_TransmitReceive_IT+0x52>
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b62:	e070      	b.n	8005c46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005b70:	887b      	ldrh	r3, [r7, #2]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b7a:	e064      	b.n	8005c46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d003      	beq.n	8005b90 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2205      	movs	r2, #5
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	887a      	ldrh	r2, [r7, #2]
 8005ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	887a      	ldrh	r2, [r7, #2]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	887a      	ldrh	r2, [r7, #2]
 8005bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	887a      	ldrh	r2, [r7, #2]
 8005bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc6:	d906      	bls.n	8005bd6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <HAL_SPI_TransmitReceive_IT+0x150>)
 8005bcc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005bd2:	651a      	str	r2, [r3, #80]	; 0x50
 8005bd4:	e005      	b.n	8005be2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005bda:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005be0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bea:	d802      	bhi.n	8005bf2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005bec:	887b      	ldrh	r3, [r7, #2]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d908      	bls.n	8005c04 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e007      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005c22:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d008      	beq.n	8005c44 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e000      	b.n	8005c46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005c44:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	0800600f 	.word	0x0800600f
 8005c60:	08006075 	.word	0x08006075
 8005c64:	08005ebf 	.word	0x08005ebf
 8005c68:	08005f7d 	.word	0x08005f7d

08005c6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	099b      	lsrs	r3, r3, #6
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10f      	bne.n	8005cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
    return;
 8005cae:	e0d7      	b.n	8005e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <HAL_SPI_IRQHandler+0x66>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	09db      	lsrs	r3, r3, #7
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
    return;
 8005cd0:	e0c6      	b.n	8005e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_SPI_IRQHandler+0x8c>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80b4 	beq.w	8005e60 <HAL_SPI_IRQHandler+0x1f4>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80ad 	beq.w	8005e60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	099b      	lsrs	r3, r3, #6
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d023      	beq.n	8005d5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d011      	beq.n	8005d42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d22:	f043 0204 	orr.w	r2, r3, #4
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	e00b      	b.n	8005d5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	693b      	ldr	r3, [r7, #16]
        return;
 8005d58:	e082      	b.n	8005e60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d014      	beq.n	8005d90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6a:	f043 0201 	orr.w	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00c      	beq.n	8005db6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	f043 0208 	orr.w	r2, r3, #8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d04f      	beq.n	8005e5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dcc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <HAL_SPI_IRQHandler+0x17e>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d034      	beq.n	8005e54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0203 	bic.w	r2, r2, #3
 8005df8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_SPI_IRQHandler+0x1fc>)
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe f9aa 	bl	8004168 <HAL_DMA_Abort_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <HAL_SPI_IRQHandler+0x1fc>)
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe f994 	bl	8004168 <HAL_DMA_Abort_IT>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005e52:	e003      	b.n	8005e5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f813 	bl	8005e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e5a:	e000      	b.n	8005e5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e5c:	bf00      	nop
    return;
 8005e5e:	bf00      	nop
  }
}
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	08005e95 	.word	0x08005e95

08005e6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ffe5 	bl	8005e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d923      	bls.n	8005f1a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	b292      	uxth	r2, r2
 8005ede:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	1c9a      	adds	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b02      	subs	r3, #2
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d11f      	bne.n	8005f48 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f16:	605a      	str	r2, [r3, #4]
 8005f18:	e016      	b.n	8005f48 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f103 020c 	add.w	r2, r3, #12
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	7812      	ldrb	r2, [r2, #0]
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10f      	bne.n	8005f74 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f62:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa14 	bl	800639c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d912      	bls.n	8005fb4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b02      	subs	r3, #2
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fb2:	e012      	b.n	8005fda <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d110      	bne.n	8006006 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f9cb 	bl	800639c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	b292      	uxth	r2, r2
 8006022:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10f      	bne.n	800606c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f998 	bl	800639c <SPI_CloseRxTx_ISR>
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	881a      	ldrh	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	1c9a      	adds	r2, r3, #2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d110      	bne.n	80060cc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f968 	bl	800639c <SPI_CloseRxTx_ISR>
    }
  }
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060e4:	f7fc f94e 	bl	8002384 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	4413      	add	r3, r2
 80060f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060f4:	f7fc f946 	bl	8002384 <HAL_GetTick>
 80060f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060fa:	4b39      	ldr	r3, [pc, #228]	; (80061e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	015b      	lsls	r3, r3, #5
 8006100:	0d1b      	lsrs	r3, r3, #20
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	fb02 f303 	mul.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610a:	e054      	b.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d050      	beq.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006114:	f7fc f936 	bl	8002384 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	429a      	cmp	r2, r3
 8006122:	d902      	bls.n	800612a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d13d      	bne.n	80061a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006142:	d111      	bne.n	8006168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614c:	d004      	beq.n	8006158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006156:	d107      	bne.n	8006168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006170:	d10f      	bne.n	8006192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e017      	b.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4013      	ands	r3, r2
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d19b      	bne.n	800610c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000014 	.word	0x20000014

080061e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	; 0x28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061f6:	f7fc f8c5 	bl	8002384 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4413      	add	r3, r2
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006206:	f7fc f8bd 	bl	8002384 <HAL_GetTick>
 800620a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006214:	4b3d      	ldr	r3, [pc, #244]	; (800630c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	00da      	lsls	r2, r3, #3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	0d1b      	lsrs	r3, r3, #20
 8006224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800622c:	e060      	b.n	80062f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006234:	d107      	bne.n	8006246 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006244:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d050      	beq.n	80062f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800624e:	f7fc f899 	bl	8002384 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	429a      	cmp	r2, r3
 800625c:	d902      	bls.n	8006264 <SPI_WaitFifoStateUntilTimeout+0x80>
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d13d      	bne.n	80062e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627c:	d111      	bne.n	80062a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006286:	d004      	beq.n	8006292 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006290:	d107      	bne.n	80062a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062aa:	d10f      	bne.n	80062cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e010      	b.n	8006302 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4013      	ands	r3, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d196      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000014 	.word	0x20000014

08006310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2200      	movs	r2, #0
 8006324:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff ff5b 	bl	80061e4 <SPI_WaitFifoStateUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e027      	b.n	8006394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2200      	movs	r2, #0
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7ff fec0 	bl	80060d4 <SPI_WaitFlagStateUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e014      	b.n	8006394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2200      	movs	r2, #0
 8006372:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff ff34 	bl	80061e4 <SPI_WaitFifoStateUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	f043 0220 	orr.w	r2, r3, #32
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e000      	b.n	8006394 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063a4:	f7fb ffee 	bl	8002384 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0220 	bic.w	r2, r2, #32
 80063b8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	2164      	movs	r1, #100	; 0x64
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ffa6 	bl	8006310 <SPI_EndRxTxTransaction>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d115      	bne.n	800640a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d107      	bne.n	80063fa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fd3a 	bl	8005e6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80063f8:	e00e      	b.n	8006418 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fa f994 	bl	8000730 <HAL_SPI_TxRxCpltCallback>
}
 8006408:	e006      	b.n	8006418 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd34 	bl	8005e80 <HAL_SPI_ErrorCallback>
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	d001      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e03b      	b.n	80064b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <HAL_TIM_Base_Start_IT+0x9c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_TIM_Base_Start_IT+0x4e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006462:	d004      	beq.n	800646e <HAL_TIM_Base_Start_IT+0x4e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d115      	bne.n	800649a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006476:	4013      	ands	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b06      	cmp	r3, #6
 800647e:	d015      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x8c>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d011      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006498:	e008      	b.n	80064ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e000      	b.n	80064ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40014000 	.word	0x40014000
 80064c4:	00010007 	.word	0x00010007

080064c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6a1a      	ldr	r2, [r3, #32]
 80064e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <HAL_TIM_Base_Stop_IT+0x48>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	f240 4344 	movw	r3, #1092	; 0x444
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_Base_Stop_IT+0x48>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e049      	b.n	80065cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fb fb87 	bl	8001c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f000 fddb 	bl	8007120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_TIM_PWM_Start_IT+0x28>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e03c      	b.n	8006676 <HAL_TIM_PWM_Start_IT+0xa2>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d109      	bne.n	8006616 <HAL_TIM_PWM_Start_IT+0x42>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e02f      	b.n	8006676 <HAL_TIM_PWM_Start_IT+0xa2>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d109      	bne.n	8006630 <HAL_TIM_PWM_Start_IT+0x5c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e022      	b.n	8006676 <HAL_TIM_PWM_Start_IT+0xa2>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b0c      	cmp	r3, #12
 8006634:	d109      	bne.n	800664a <HAL_TIM_PWM_Start_IT+0x76>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	bf14      	ite	ne
 8006642:	2301      	movne	r3, #1
 8006644:	2300      	moveq	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	e015      	b.n	8006676 <HAL_TIM_PWM_Start_IT+0xa2>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b10      	cmp	r3, #16
 800664e:	d109      	bne.n	8006664 <HAL_TIM_PWM_Start_IT+0x90>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	bf14      	ite	ne
 800665c:	2301      	movne	r3, #1
 800665e:	2300      	moveq	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	e008      	b.n	8006676 <HAL_TIM_PWM_Start_IT+0xa2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	bf14      	ite	ne
 8006670:	2301      	movne	r3, #1
 8006672:	2300      	moveq	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e0c9      	b.n	8006812 <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Start_IT+0xba>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800668c:	e023      	b.n	80066d6 <HAL_TIM_PWM_Start_IT+0x102>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b04      	cmp	r3, #4
 8006692:	d104      	bne.n	800669e <HAL_TIM_PWM_Start_IT+0xca>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800669c:	e01b      	b.n	80066d6 <HAL_TIM_PWM_Start_IT+0x102>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d104      	bne.n	80066ae <HAL_TIM_PWM_Start_IT+0xda>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ac:	e013      	b.n	80066d6 <HAL_TIM_PWM_Start_IT+0x102>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b0c      	cmp	r3, #12
 80066b2:	d104      	bne.n	80066be <HAL_TIM_PWM_Start_IT+0xea>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066bc:	e00b      	b.n	80066d6 <HAL_TIM_PWM_Start_IT+0x102>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d104      	bne.n	80066ce <HAL_TIM_PWM_Start_IT+0xfa>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066cc:	e003      	b.n	80066d6 <HAL_TIM_PWM_Start_IT+0x102>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	d841      	bhi.n	8006760 <HAL_TIM_PWM_Start_IT+0x18c>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_TIM_PWM_Start_IT+0x110>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006761 	.word	0x08006761
 80066ec:	08006761 	.word	0x08006761
 80066f0:	08006761 	.word	0x08006761
 80066f4:	0800672b 	.word	0x0800672b
 80066f8:	08006761 	.word	0x08006761
 80066fc:	08006761 	.word	0x08006761
 8006700:	08006761 	.word	0x08006761
 8006704:	0800673d 	.word	0x0800673d
 8006708:	08006761 	.word	0x08006761
 800670c:	08006761 	.word	0x08006761
 8006710:	08006761 	.word	0x08006761
 8006714:	0800674f 	.word	0x0800674f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0202 	orr.w	r2, r2, #2
 8006726:	60da      	str	r2, [r3, #12]
      break;
 8006728:	e01d      	b.n	8006766 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0204 	orr.w	r2, r2, #4
 8006738:	60da      	str	r2, [r3, #12]
      break;
 800673a:	e014      	b.n	8006766 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0208 	orr.w	r2, r2, #8
 800674a:	60da      	str	r2, [r3, #12]
      break;
 800674c:	e00b      	b.n	8006766 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0210 	orr.w	r2, r2, #16
 800675c:	60da      	str	r2, [r3, #12]
      break;
 800675e:	e002      	b.n	8006766 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
      break;
 8006764:	bf00      	nop
  }

  if (status == HAL_OK)
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d151      	bne.n	8006810 <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 ffb5 	bl	80076e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a27      	ldr	r2, [pc, #156]	; (800681c <HAL_TIM_PWM_Start_IT+0x248>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_TIM_PWM_Start_IT+0x1c4>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a25      	ldr	r2, [pc, #148]	; (8006820 <HAL_TIM_PWM_Start_IT+0x24c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIM_PWM_Start_IT+0x1c4>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a24      	ldr	r2, [pc, #144]	; (8006824 <HAL_TIM_PWM_Start_IT+0x250>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d101      	bne.n	800679c <HAL_TIM_PWM_Start_IT+0x1c8>
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <HAL_TIM_PWM_Start_IT+0x1ca>
 800679c:	2300      	movs	r3, #0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a19      	ldr	r2, [pc, #100]	; (800681c <HAL_TIM_PWM_Start_IT+0x248>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <HAL_TIM_PWM_Start_IT+0x1fc>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_PWM_Start_IT+0x1fc>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <HAL_TIM_PWM_Start_IT+0x24c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d115      	bne.n	80067fc <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <HAL_TIM_PWM_Start_IT+0x254>)
 80067d8:	4013      	ands	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d015      	beq.n	800680e <HAL_TIM_PWM_Start_IT+0x23a>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d011      	beq.n	800680e <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fa:	e008      	b.n	800680e <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e000      	b.n	8006810 <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	00010007 	.word	0x00010007

0800682c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b0c      	cmp	r3, #12
 800683e:	d841      	bhi.n	80068c4 <HAL_TIM_PWM_Stop_IT+0x98>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800687d 	.word	0x0800687d
 800684c:	080068c5 	.word	0x080068c5
 8006850:	080068c5 	.word	0x080068c5
 8006854:	080068c5 	.word	0x080068c5
 8006858:	0800688f 	.word	0x0800688f
 800685c:	080068c5 	.word	0x080068c5
 8006860:	080068c5 	.word	0x080068c5
 8006864:	080068c5 	.word	0x080068c5
 8006868:	080068a1 	.word	0x080068a1
 800686c:	080068c5 	.word	0x080068c5
 8006870:	080068c5 	.word	0x080068c5
 8006874:	080068c5 	.word	0x080068c5
 8006878:	080068b3 	.word	0x080068b3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0202 	bic.w	r2, r2, #2
 800688a:	60da      	str	r2, [r3, #12]
      break;
 800688c:	e01d      	b.n	80068ca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0204 	bic.w	r2, r2, #4
 800689c:	60da      	str	r2, [r3, #12]
      break;
 800689e:	e014      	b.n	80068ca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0208 	bic.w	r2, r2, #8
 80068ae:	60da      	str	r2, [r3, #12]
      break;
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0210 	bic.w	r2, r2, #16
 80068c0:	60da      	str	r2, [r3, #12]
      break;
 80068c2:	e002      	b.n	80068ca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d176      	bne.n	80069be <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2200      	movs	r2, #0
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 ff03 	bl	80076e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a39      	ldr	r2, [pc, #228]	; (80069c8 <HAL_TIM_PWM_Stop_IT+0x19c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_TIM_PWM_Stop_IT+0xd0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a37      	ldr	r2, [pc, #220]	; (80069cc <HAL_TIM_PWM_Stop_IT+0x1a0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_TIM_PWM_Stop_IT+0xd0>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a36      	ldr	r2, [pc, #216]	; (80069d0 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d101      	bne.n	8006900 <HAL_TIM_PWM_Stop_IT+0xd4>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006900:	2300      	movs	r3, #0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d017      	beq.n	8006936 <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <HAL_TIM_PWM_Stop_IT+0x10a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	f240 4344 	movw	r3, #1092	; 0x444
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <HAL_TIM_PWM_Stop_IT+0x10a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10f      	bne.n	8006966 <HAL_TIM_PWM_Stop_IT+0x13a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a1a      	ldr	r2, [r3, #32]
 800694c:	f240 4344 	movw	r3, #1092	; 0x444
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d107      	bne.n	8006966 <HAL_TIM_PWM_Stop_IT+0x13a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Stop_IT+0x14a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006974:	e023      	b.n	80069be <HAL_TIM_PWM_Stop_IT+0x192>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b04      	cmp	r3, #4
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Stop_IT+0x15a>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006984:	e01b      	b.n	80069be <HAL_TIM_PWM_Stop_IT+0x192>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Stop_IT+0x16a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	e013      	b.n	80069be <HAL_TIM_PWM_Stop_IT+0x192>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_PWM_Stop_IT+0x17a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069a4:	e00b      	b.n	80069be <HAL_TIM_PWM_Stop_IT+0x192>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Stop_IT+0x18a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b4:	e003      	b.n	80069be <HAL_TIM_PWM_Stop_IT+0x192>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400

080069d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e097      	b.n	8006b18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fb f955 	bl	8001cac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006a18:	f023 0307 	bic.w	r3, r3, #7
 8006a1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f000 fb79 	bl	8007120 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	4313      	orrs	r3, r2
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a74:	f023 030c 	bic.w	r3, r3, #12
 8006a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	4313      	orrs	r3, r2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	011a      	lsls	r2, r3, #4
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	031b      	lsls	r3, r3, #12
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d110      	bne.n	8006b72 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d102      	bne.n	8006b5c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b56:	7b7b      	ldrb	r3, [r7, #13]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d001      	beq.n	8006b60 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e089      	b.n	8006c74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b70:	e031      	b.n	8006bd6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d110      	bne.n	8006b9a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d102      	bne.n	8006b84 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b7e:	7b3b      	ldrb	r3, [r7, #12]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d001      	beq.n	8006b88 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e075      	b.n	8006c74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b98:	e01d      	b.n	8006bd6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d108      	bne.n	8006bb2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba6:	7b7b      	ldrb	r3, [r7, #13]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d102      	bne.n	8006bb2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bac:	7b3b      	ldrb	r3, [r7, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d001      	beq.n	8006bb6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e05e      	b.n	8006c74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d010      	beq.n	8006c04 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006be2:	e01f      	b.n	8006c24 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2201      	movs	r2, #1
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fd79 	bl	80076e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0202 	orr.w	r2, r2, #2
 8006c00:	60da      	str	r2, [r3, #12]
      break;
 8006c02:	e02e      	b.n	8006c62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	2104      	movs	r1, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fd69 	bl	80076e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0204 	orr.w	r2, r2, #4
 8006c20:	60da      	str	r2, [r3, #12]
      break;
 8006c22:	e01e      	b.n	8006c62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fd59 	bl	80076e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2201      	movs	r2, #1
 8006c38:	2104      	movs	r1, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fd52 	bl	80076e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0202 	orr.w	r2, r2, #2
 8006c4e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0204 	orr.w	r2, r2, #4
 8006c5e:	60da      	str	r2, [r3, #12]
      break;
 8006c60:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d122      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d11b      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0202 	mvn.w	r2, #2
 8006ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fa f988 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006cc4:	e005      	b.n	8006cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa0c 	bl	80070e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fa13 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d122      	bne.n	8006d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d11b      	bne.n	8006d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0204 	mvn.w	r2, #4
 8006cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fa f95e 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006d18:	e005      	b.n	8006d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9e2 	bl	80070e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9e9 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d122      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d11b      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0208 	mvn.w	r2, #8
 8006d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2204      	movs	r2, #4
 8006d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fa f934 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9b8 	bl	80070e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f9bf 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d122      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d11b      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0210 	mvn.w	r2, #16
 8006da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2208      	movs	r2, #8
 8006daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fa f90a 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f98e 	bl	80070e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f995 	bl	80070f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0201 	mvn.w	r2, #1
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fa f8fc 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d10e      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e18:	2b80      	cmp	r3, #128	; 0x80
 8006e1a:	d107      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fee0 	bl	8007bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d10e      	bne.n	8006e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	2b80      	cmp	r3, #128	; 0x80
 8006e48:	d107      	bne.n	8006e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fed3 	bl	8007c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e64:	2b40      	cmp	r3, #64	; 0x40
 8006e66:	d10e      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d107      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f943 	bl	800710c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d10e      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d107      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f06f 0220 	mvn.w	r2, #32
 8006eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fe93 	bl	8007bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e0ff      	b.n	80070da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b14      	cmp	r3, #20
 8006ee6:	f200 80f0 	bhi.w	80070ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f45 	.word	0x08006f45
 8006ef4:	080070cb 	.word	0x080070cb
 8006ef8:	080070cb 	.word	0x080070cb
 8006efc:	080070cb 	.word	0x080070cb
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	080070cb 	.word	0x080070cb
 8006f08:	080070cb 	.word	0x080070cb
 8006f0c:	080070cb 	.word	0x080070cb
 8006f10:	08006fc7 	.word	0x08006fc7
 8006f14:	080070cb 	.word	0x080070cb
 8006f18:	080070cb 	.word	0x080070cb
 8006f1c:	080070cb 	.word	0x080070cb
 8006f20:	08007007 	.word	0x08007007
 8006f24:	080070cb 	.word	0x080070cb
 8006f28:	080070cb 	.word	0x080070cb
 8006f2c:	080070cb 	.word	0x080070cb
 8006f30:	08007049 	.word	0x08007049
 8006f34:	080070cb 	.word	0x080070cb
 8006f38:	080070cb 	.word	0x080070cb
 8006f3c:	080070cb 	.word	0x080070cb
 8006f40:	08007089 	.word	0x08007089
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f94c 	bl	80071e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699a      	ldr	r2, [r3, #24]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0208 	orr.w	r2, r2, #8
 8006f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0204 	bic.w	r2, r2, #4
 8006f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6999      	ldr	r1, [r3, #24]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	619a      	str	r2, [r3, #24]
      break;
 8006f82:	e0a5      	b.n	80070d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f9a8 	bl	80072e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6999      	ldr	r1, [r3, #24]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	021a      	lsls	r2, r3, #8
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	619a      	str	r2, [r3, #24]
      break;
 8006fc4:	e084      	b.n	80070d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fa01 	bl	80073d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0208 	orr.w	r2, r2, #8
 8006fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0204 	bic.w	r2, r2, #4
 8006ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69d9      	ldr	r1, [r3, #28]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	61da      	str	r2, [r3, #28]
      break;
 8007004:	e064      	b.n	80070d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fa59 	bl	80074c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69d9      	ldr	r1, [r3, #28]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	021a      	lsls	r2, r3, #8
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	61da      	str	r2, [r3, #28]
      break;
 8007046:	e043      	b.n	80070d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fa96 	bl	8007580 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0208 	orr.w	r2, r2, #8
 8007062:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0204 	bic.w	r2, r2, #4
 8007072:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007086:	e023      	b.n	80070d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 face 	bl	8007630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	021a      	lsls	r2, r3, #8
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070c8:	e002      	b.n	80070d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
      break;
 80070ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop

080070e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <TIM_Base_SetConfig+0xbc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_Base_SetConfig+0x20>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713e:	d108      	bne.n	8007152 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <TIM_Base_SetConfig+0xbc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_Base_SetConfig+0x52>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d007      	beq.n	8007172 <TIM_Base_SetConfig+0x52>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <TIM_Base_SetConfig+0xc0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_Base_SetConfig+0x52>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <TIM_Base_SetConfig+0xc4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d108      	bne.n	8007184 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <TIM_Base_SetConfig+0xbc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_Base_SetConfig+0xa0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a0b      	ldr	r2, [pc, #44]	; (80071e0 <TIM_Base_SetConfig+0xc0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_Base_SetConfig+0xa0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a0a      	ldr	r2, [pc, #40]	; (80071e4 <TIM_Base_SetConfig+0xc4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d103      	bne.n	80071c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	615a      	str	r2, [r3, #20]
}
 80071ce:	bf00      	nop
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40012c00 	.word	0x40012c00
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400

080071e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0201 	bic.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 0302 	bic.w	r3, r3, #2
 8007234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <TIM_OC1_SetConfig+0xec>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_OC1_SetConfig+0x70>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a23      	ldr	r2, [pc, #140]	; (80072d8 <TIM_OC1_SetConfig+0xf0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC1_SetConfig+0x70>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a22      	ldr	r2, [pc, #136]	; (80072dc <TIM_OC1_SetConfig+0xf4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10c      	bne.n	8007272 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0308 	bic.w	r3, r3, #8
 800725e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a17      	ldr	r2, [pc, #92]	; (80072d4 <TIM_OC1_SetConfig+0xec>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_OC1_SetConfig+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <TIM_OC1_SetConfig+0xf0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC1_SetConfig+0xa2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a15      	ldr	r2, [pc, #84]	; (80072dc <TIM_OC1_SetConfig+0xf4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d111      	bne.n	80072ae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	621a      	str	r2, [r3, #32]
}
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400

080072e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0210 	bic.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0320 	bic.w	r3, r3, #32
 800732e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a22      	ldr	r2, [pc, #136]	; (80073c8 <TIM_OC2_SetConfig+0xe8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d10d      	bne.n	8007360 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <TIM_OC2_SetConfig+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d007      	beq.n	8007378 <TIM_OC2_SetConfig+0x98>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <TIM_OC2_SetConfig+0xec>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_OC2_SetConfig+0x98>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <TIM_OC2_SetConfig+0xf0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d113      	bne.n	80073a0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800737e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400

080073d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a21      	ldr	r2, [pc, #132]	; (80074b8 <TIM_OC3_SetConfig+0xe4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d10d      	bne.n	8007452 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800743c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <TIM_OC3_SetConfig+0xe4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <TIM_OC3_SetConfig+0x96>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a17      	ldr	r2, [pc, #92]	; (80074bc <TIM_OC3_SetConfig+0xe8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d003      	beq.n	800746a <TIM_OC3_SetConfig+0x96>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a16      	ldr	r2, [pc, #88]	; (80074c0 <TIM_OC3_SetConfig+0xec>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d113      	bne.n	8007492 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	621a      	str	r2, [r3, #32]
}
 80074ac:	bf00      	nop
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40014000 	.word	0x40014000
 80074c0:	40014400 	.word	0x40014400

080074c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	031b      	lsls	r3, r3, #12
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a14      	ldr	r2, [pc, #80]	; (8007574 <TIM_OC4_SetConfig+0xb0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_OC4_SetConfig+0x74>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a13      	ldr	r2, [pc, #76]	; (8007578 <TIM_OC4_SetConfig+0xb4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_OC4_SetConfig+0x74>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <TIM_OC4_SetConfig+0xb8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d109      	bne.n	800754c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800753e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40014000 	.word	0x40014000
 800757c:	40014400 	.word	0x40014400

08007580 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a13      	ldr	r2, [pc, #76]	; (8007624 <TIM_OC5_SetConfig+0xa4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_OC5_SetConfig+0x6a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a12      	ldr	r2, [pc, #72]	; (8007628 <TIM_OC5_SetConfig+0xa8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_OC5_SetConfig+0x6a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a11      	ldr	r2, [pc, #68]	; (800762c <TIM_OC5_SetConfig+0xac>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d109      	bne.n	80075fe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	621a      	str	r2, [r3, #32]
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40014000 	.word	0x40014000
 800762c:	40014400 	.word	0x40014400

08007630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800765e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	051b      	lsls	r3, r3, #20
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <TIM_OC6_SetConfig+0xa8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_OC6_SetConfig+0x6c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a13      	ldr	r2, [pc, #76]	; (80076dc <TIM_OC6_SetConfig+0xac>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC6_SetConfig+0x6c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <TIM_OC6_SetConfig+0xb0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d109      	bne.n	80076b0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	029b      	lsls	r3, r3, #10
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40012c00 	.word	0x40012c00
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40014400 	.word	0x40014400

080076e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	2201      	movs	r2, #1
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6a1a      	ldr	r2, [r3, #32]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	43db      	mvns	r3, r3
 8007706:	401a      	ands	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a1a      	ldr	r2, [r3, #32]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	431a      	orrs	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d109      	bne.n	8007758 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	e022      	b.n	800779e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d109      	bne.n	8007772 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b01      	cmp	r3, #1
 8007768:	bf14      	ite	ne
 800776a:	2301      	movne	r3, #1
 800776c:	2300      	moveq	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	e015      	b.n	800779e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d109      	bne.n	800778c <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	bf14      	ite	ne
 8007784:	2301      	movne	r3, #1
 8007786:	2300      	moveq	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	e008      	b.n	800779e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	bf14      	ite	ne
 8007798:	2301      	movne	r3, #1
 800779a:	2300      	moveq	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e090      	b.n	80078c8 <HAL_TIMEx_PWMN_Start_IT+0x198>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <HAL_TIMEx_PWMN_Start_IT+0x86>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b4:	e013      	b.n	80077de <HAL_TIMEx_PWMN_Start_IT+0xae>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d104      	bne.n	80077c6 <HAL_TIMEx_PWMN_Start_IT+0x96>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c4:	e00b      	b.n	80077de <HAL_TIMEx_PWMN_Start_IT+0xae>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d104      	bne.n	80077d6 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077d4:	e003      	b.n	80077de <HAL_TIMEx_PWMN_Start_IT+0xae>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d01b      	beq.n	800781c <HAL_TIMEx_PWMN_Start_IT+0xec>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d821      	bhi.n	800782e <HAL_TIMEx_PWMN_Start_IT+0xfe>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d009      	beq.n	800780a <HAL_TIMEx_PWMN_Start_IT+0xda>
 80077f6:	e01a      	b.n	800782e <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0202 	orr.w	r2, r2, #2
 8007806:	60da      	str	r2, [r3, #12]
      break;
 8007808:	e014      	b.n	8007834 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0204 	orr.w	r2, r2, #4
 8007818:	60da      	str	r2, [r3, #12]
      break;
 800781a:	e00b      	b.n	8007834 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0208 	orr.w	r2, r2, #8
 800782a:	60da      	str	r2, [r3, #12]
      break;
 800782c:	e002      	b.n	8007834 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	73fb      	strb	r3, [r7, #15]
      break;
 8007832:	bf00      	nop
  }

  if (status == HAL_OK)
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d145      	bne.n	80078c6 <HAL_TIMEx_PWMN_Start_IT+0x196>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007848:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2204      	movs	r2, #4
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f9de 	bl	8007c14 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <HAL_TIMEx_PWMN_Start_IT+0x1a0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d009      	beq.n	8007886 <HAL_TIMEx_PWMN_Start_IT+0x156>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d004      	beq.n	8007886 <HAL_TIMEx_PWMN_Start_IT+0x156>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a14      	ldr	r2, [pc, #80]	; (80078d4 <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d115      	bne.n	80078b2 <HAL_TIMEx_PWMN_Start_IT+0x182>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b06      	cmp	r3, #6
 8007896:	d015      	beq.n	80078c4 <HAL_TIMEx_PWMN_Start_IT+0x194>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789e:	d011      	beq.n	80078c4 <HAL_TIMEx_PWMN_Start_IT+0x194>
      {
        __HAL_TIM_ENABLE(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0201 	orr.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b0:	e008      	b.n	80078c4 <HAL_TIMEx_PWMN_Start_IT+0x194>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e000      	b.n	80078c6 <HAL_TIMEx_PWMN_Start_IT+0x196>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	40012c00 	.word	0x40012c00
 80078d4:	40014000 	.word	0x40014000
 80078d8:	00010007 	.word	0x00010007

080078dc <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d01b      	beq.n	8007928 <HAL_TIMEx_PWMN_Stop_IT+0x4c>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d821      	bhi.n	800793a <HAL_TIMEx_PWMN_Stop_IT+0x5e>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <HAL_TIMEx_PWMN_Stop_IT+0x28>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d009      	beq.n	8007916 <HAL_TIMEx_PWMN_Stop_IT+0x3a>
 8007902:	e01a      	b.n	800793a <HAL_TIMEx_PWMN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0202 	bic.w	r2, r2, #2
 8007912:	60da      	str	r2, [r3, #12]
      break;
 8007914:	e014      	b.n	8007940 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0204 	bic.w	r2, r2, #4
 8007924:	60da      	str	r2, [r3, #12]
      break;
 8007926:	e00b      	b.n	8007940 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0208 	bic.w	r2, r2, #8
 8007936:	60da      	str	r2, [r3, #12]
      break;
 8007938:	e002      	b.n	8007940 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	73fb      	strb	r3, [r7, #15]
      break;
 800793e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d164      	bne.n	8007a10 <HAL_TIMEx_PWMN_Stop_IT+0x134>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f960 	bl	8007c14 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	f240 4344 	movw	r3, #1092	; 0x444
 8007962:	4013      	ands	r3, r2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d107      	bne.n	8007978 <HAL_TIMEx_PWMN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007976:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a1a      	ldr	r2, [r3, #32]
 800797e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10f      	bne.n	80079a8 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	f240 4344 	movw	r3, #1092	; 0x444
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a1a      	ldr	r2, [r3, #32]
 80079ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10f      	bne.n	80079d8 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	f240 4344 	movw	r3, #1092	; 0x444
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d107      	bne.n	80079d8 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <HAL_TIMEx_PWMN_Stop_IT+0x10c>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e6:	e013      	b.n	8007a10 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d104      	bne.n	80079f8 <HAL_TIMEx_PWMN_Stop_IT+0x11c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079f6:	e00b      	b.n	8007a10 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d104      	bne.n	8007a08 <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a06:	e003      	b.n	8007a10 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e04f      	b.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d108      	bne.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a14      	ldr	r2, [pc, #80]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d009      	beq.n	8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d004      	beq.n	8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a10      	ldr	r2, [pc, #64]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	40012c00 	.word	0x40012c00
 8007ae4:	40014000 	.word	0x40014000

08007ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d101      	bne.n	8007b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e060      	b.n	8007bc6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a14      	ldr	r2, [pc, #80]	; (8007bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d115      	bne.n	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	051b      	lsls	r3, r3, #20
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00

08007bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	2204      	movs	r2, #4
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	43db      	mvns	r3, r3
 8007c36:	401a      	ands	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e040      	b.n	8007cf2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fa f8b1 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	; 0x24
 8007c8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc1f 	bl	80084e0 <UART_SetConfig>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e022      	b.n	8007cf2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fe3f 	bl	8008938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0201 	orr.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fec6 	bl	8008a7c <UART_CheckIdleState>
 8007cf0:	4603      	mov	r3, r0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d178      	bne.n	8007e04 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_UART_Transmit_DMA+0x22>
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e071      	b.n	8007e06 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_UART_Transmit_DMA+0x34>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e06a      	b.n	8007e06 <HAL_UART_Transmit_DMA+0x10a>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	88fa      	ldrh	r2, [r7, #6]
 8007d42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	88fa      	ldrh	r2, [r7, #6]
 8007d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2221      	movs	r2, #33	; 0x21
 8007d5a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d02b      	beq.n	8007dbc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d68:	4a29      	ldr	r2, [pc, #164]	; (8007e10 <HAL_UART_Transmit_DMA+0x114>)
 8007d6a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d70:	4a28      	ldr	r2, [pc, #160]	; (8007e14 <HAL_UART_Transmit_DMA+0x118>)
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d78:	4a27      	ldr	r2, [pc, #156]	; (8007e18 <HAL_UART_Transmit_DMA+0x11c>)
 8007d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d80:	2200      	movs	r2, #0
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3328      	adds	r3, #40	; 0x28
 8007d94:	461a      	mov	r2, r3
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	f7fc f948 	bl	800402c <HAL_DMA_Start_IT>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00c      	beq.n	8007dbc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2210      	movs	r2, #16
 8007da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e024      	b.n	8007e06 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2240      	movs	r2, #64	; 0x40
 8007dc2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	613b      	str	r3, [r7, #16]
   return(result);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dec:	623a      	str	r2, [r7, #32]
 8007dee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	69f9      	ldr	r1, [r7, #28]
 8007df2:	6a3a      	ldr	r2, [r7, #32]
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e5      	bne.n	8007dcc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e000      	b.n	8007e06 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007e04:	2302      	movs	r3, #2
  }
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3728      	adds	r7, #40	; 0x28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	08008ef7 	.word	0x08008ef7
 8007e14:	08008f91 	.word	0x08008f91
 8007e18:	08009109 	.word	0x08009109

08007e1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d142      	bne.n	8007eb8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_UART_Receive_DMA+0x22>
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e03b      	b.n	8007eba <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Receive_DMA+0x34>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e034      	b.n	8007eba <HAL_UART_Receive_DMA+0x9e>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a18      	ldr	r2, [pc, #96]	; (8007ec4 <HAL_UART_Receive_DMA+0xa8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d01f      	beq.n	8007ea8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d018      	beq.n	8007ea8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	613b      	str	r3, [r7, #16]
   return(result);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	623b      	str	r3, [r7, #32]
 8007e96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	69f9      	ldr	r1, [r7, #28]
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e6      	bne.n	8007e76 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fef2 	bl	8008c98 <UART_Start_Receive_DMA>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	e000      	b.n	8007eba <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
  }
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3728      	adds	r7, #40	; 0x28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	40008000 	.word	0x40008000

08007ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0ba      	sub	sp, #232	; 0xe8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007eee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ef2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d115      	bne.n	8007f30 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d009      	beq.n	8007f30 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 82a6 	beq.w	8008472 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
      }
      return;
 8007f2e:	e2a0      	b.n	8008472 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8117 	beq.w	8008168 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f4a:	4b85      	ldr	r3, [pc, #532]	; (8008160 <HAL_UART_IRQHandler+0x298>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 810a 	beq.w	8008168 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d011      	beq.n	8007f84 <HAL_UART_IRQHandler+0xbc>
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2201      	movs	r2, #1
 8007f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7a:	f043 0201 	orr.w	r2, r3, #1
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d011      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xec>
 8007f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007faa:	f043 0204 	orr.w	r2, r3, #4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d011      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x11c>
 8007fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fda:	f043 0202 	orr.w	r2, r3, #2
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d017      	beq.n	8008020 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d105      	bne.n	8008008 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008000:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2208      	movs	r2, #8
 800800e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008016:	f043 0208 	orr.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <HAL_UART_IRQHandler+0x18a>
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 820c 	beq.w	8008476 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800806a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d005      	beq.n	80080aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800809e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d04f      	beq.n	800814a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fec0 	bl	8008e30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d141      	bne.n	8008142 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1d9      	bne.n	80080be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	2b00      	cmp	r3, #0
 8008110:	d013      	beq.n	800813a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	4a13      	ldr	r2, [pc, #76]	; (8008164 <HAL_UART_IRQHandler+0x29c>)
 8008118:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc f822 	bl	8004168 <HAL_DMA_Abort_IT>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d017      	beq.n	800815a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	e00f      	b.n	800815a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7f9 fc06 	bl	800194c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008140:	e00b      	b.n	800815a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7f9 fc02 	bl	800194c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008148:	e007      	b.n	800815a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7f9 fbfe 	bl	800194c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008158:	e18d      	b.n	8008476 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815a:	bf00      	nop
    return;
 800815c:	e18b      	b.n	8008476 <HAL_UART_IRQHandler+0x5ae>
 800815e:	bf00      	nop
 8008160:	04000120 	.word	0x04000120
 8008164:	08009185 	.word	0x08009185

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816c:	2b01      	cmp	r3, #1
 800816e:	f040 8146 	bne.w	80083fe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 813f 	beq.w	80083fe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8138 	beq.w	80083fe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2210      	movs	r2, #16
 8008194:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	f040 80b4 	bne.w	800830e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 815f 	beq.w	800847a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081c6:	429a      	cmp	r2, r3
 80081c8:	f080 8157 	bcs.w	800847a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 8085 	bne.w	80082f2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008212:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008216:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800821e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800822a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1da      	bne.n	80081e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3308      	adds	r3, #8
 8008252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008256:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800825a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800825e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e1      	bne.n	8008232 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3308      	adds	r3, #8
 8008274:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800827e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008292:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008294:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008298:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e3      	bne.n	800826e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c2:	f023 0310 	bic.w	r3, r3, #16
 80082c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80082d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e4      	bne.n	80082b2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fb fefd 	bl	80040ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082fe:	b29b      	uxth	r3, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	b29b      	uxth	r3, r3
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f8de 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800830c:	e0b5      	b.n	800847a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800831a:	b29b      	uxth	r3, r3
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 80a7 	beq.w	800847e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80a2 	beq.w	800847e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800834e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800835c:	647b      	str	r3, [r7, #68]	; 0x44
 800835e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800836a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e4      	bne.n	800833a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	623b      	str	r3, [r7, #32]
   return(result);
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	f023 0301 	bic.w	r3, r3, #1
 8008386:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008394:	633a      	str	r2, [r7, #48]	; 0x30
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e3      	bne.n	8008370 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0310 	bic.w	r3, r3, #16
 80083ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	69b9      	ldr	r1, [r7, #24]
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	617b      	str	r3, [r7, #20]
   return(result);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e4      	bne.n	80083ba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f866 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083fc:	e03f      	b.n	800847e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00e      	beq.n	8008428 <HAL_UART_IRQHandler+0x560>
 800840a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800840e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800841e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 feef 	bl	8009204 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008426:	e02d      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00e      	beq.n	8008452 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01c      	beq.n	8008482 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	4798      	blx	r3
    }
    return;
 8008450:	e017      	b.n	8008482 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d012      	beq.n	8008484 <HAL_UART_IRQHandler+0x5bc>
 800845e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fea0 	bl	80091b0 <UART_EndTransmit_IT>
    return;
 8008470:	e008      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008472:	bf00      	nop
 8008474:	e006      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008476:	bf00      	nop
 8008478:	e004      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
      return;
 800847a:	bf00      	nop
 800847c:	e002      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
      return;
 800847e:	bf00      	nop
 8008480:	e000      	b.n	8008484 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008482:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008484:	37e8      	adds	r7, #232	; 0xe8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop

0800848c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e4:	b08a      	sub	sp, #40	; 0x28
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	431a      	orrs	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4bb4      	ldr	r3, [pc, #720]	; (80087e0 <UART_SetConfig+0x300>)
 8008510:	4013      	ands	r3, r2
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008518:	430b      	orrs	r3, r1
 800851a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4aa9      	ldr	r2, [pc, #676]	; (80087e4 <UART_SetConfig+0x304>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008548:	4313      	orrs	r3, r2
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855c:	430a      	orrs	r2, r1
 800855e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4aa0      	ldr	r2, [pc, #640]	; (80087e8 <UART_SetConfig+0x308>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d126      	bne.n	80085b8 <UART_SetConfig+0xd8>
 800856a:	4ba0      	ldr	r3, [pc, #640]	; (80087ec <UART_SetConfig+0x30c>)
 800856c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008570:	f003 0303 	and.w	r3, r3, #3
 8008574:	2b03      	cmp	r3, #3
 8008576:	d81b      	bhi.n	80085b0 <UART_SetConfig+0xd0>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <UART_SetConfig+0xa0>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	08008591 	.word	0x08008591
 8008584:	080085a1 	.word	0x080085a1
 8008588:	08008599 	.word	0x08008599
 800858c:	080085a9 	.word	0x080085a9
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008596:	e080      	b.n	800869a <UART_SetConfig+0x1ba>
 8008598:	2302      	movs	r3, #2
 800859a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859e:	e07c      	b.n	800869a <UART_SetConfig+0x1ba>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a6:	e078      	b.n	800869a <UART_SetConfig+0x1ba>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ae:	e074      	b.n	800869a <UART_SetConfig+0x1ba>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b6:	e070      	b.n	800869a <UART_SetConfig+0x1ba>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a8c      	ldr	r2, [pc, #560]	; (80087f0 <UART_SetConfig+0x310>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d138      	bne.n	8008634 <UART_SetConfig+0x154>
 80085c2:	4b8a      	ldr	r3, [pc, #552]	; (80087ec <UART_SetConfig+0x30c>)
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c8:	f003 030c 	and.w	r3, r3, #12
 80085cc:	2b0c      	cmp	r3, #12
 80085ce:	d82d      	bhi.n	800862c <UART_SetConfig+0x14c>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0xf8>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	0800860d 	.word	0x0800860d
 80085dc:	0800862d 	.word	0x0800862d
 80085e0:	0800862d 	.word	0x0800862d
 80085e4:	0800862d 	.word	0x0800862d
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	0800862d 	.word	0x0800862d
 80085f0:	0800862d 	.word	0x0800862d
 80085f4:	0800862d 	.word	0x0800862d
 80085f8:	08008615 	.word	0x08008615
 80085fc:	0800862d 	.word	0x0800862d
 8008600:	0800862d 	.word	0x0800862d
 8008604:	0800862d 	.word	0x0800862d
 8008608:	08008625 	.word	0x08008625
 800860c:	2300      	movs	r3, #0
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008612:	e042      	b.n	800869a <UART_SetConfig+0x1ba>
 8008614:	2302      	movs	r3, #2
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800861a:	e03e      	b.n	800869a <UART_SetConfig+0x1ba>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008622:	e03a      	b.n	800869a <UART_SetConfig+0x1ba>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800862a:	e036      	b.n	800869a <UART_SetConfig+0x1ba>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008632:	e032      	b.n	800869a <UART_SetConfig+0x1ba>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a6a      	ldr	r2, [pc, #424]	; (80087e4 <UART_SetConfig+0x304>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d12a      	bne.n	8008694 <UART_SetConfig+0x1b4>
 800863e:	4b6b      	ldr	r3, [pc, #428]	; (80087ec <UART_SetConfig+0x30c>)
 8008640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800864c:	d01a      	beq.n	8008684 <UART_SetConfig+0x1a4>
 800864e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008652:	d81b      	bhi.n	800868c <UART_SetConfig+0x1ac>
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008658:	d00c      	beq.n	8008674 <UART_SetConfig+0x194>
 800865a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865e:	d815      	bhi.n	800868c <UART_SetConfig+0x1ac>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <UART_SetConfig+0x18c>
 8008664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008668:	d008      	beq.n	800867c <UART_SetConfig+0x19c>
 800866a:	e00f      	b.n	800868c <UART_SetConfig+0x1ac>
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008672:	e012      	b.n	800869a <UART_SetConfig+0x1ba>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867a:	e00e      	b.n	800869a <UART_SetConfig+0x1ba>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008682:	e00a      	b.n	800869a <UART_SetConfig+0x1ba>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868a:	e006      	b.n	800869a <UART_SetConfig+0x1ba>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008692:	e002      	b.n	800869a <UART_SetConfig+0x1ba>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a51      	ldr	r2, [pc, #324]	; (80087e4 <UART_SetConfig+0x304>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d17a      	bne.n	800879a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d824      	bhi.n	80086f6 <UART_SetConfig+0x216>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x1d4>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086f7 	.word	0x080086f7
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	080086e7 	.word	0x080086e7
 80086c8:	080086f7 	.word	0x080086f7
 80086cc:	080086f7 	.word	0x080086f7
 80086d0:	080086f7 	.word	0x080086f7
 80086d4:	080086ef 	.word	0x080086ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fc fe00 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 80086dc:	61f8      	str	r0, [r7, #28]
        break;
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b44      	ldr	r3, [pc, #272]	; (80087f4 <UART_SetConfig+0x314>)
 80086e2:	61fb      	str	r3, [r7, #28]
        break;
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e6:	f7fc fd61 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 80086ea:	61f8      	str	r0, [r7, #28]
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f2:	61fb      	str	r3, [r7, #28]
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8107 	beq.w	8008918 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	429a      	cmp	r2, r3
 8008718:	d305      	bcc.n	8008726 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	429a      	cmp	r2, r3
 8008724:	d903      	bls.n	800872e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800872c:	e0f4      	b.n	8008918 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	2200      	movs	r2, #0
 8008732:	461c      	mov	r4, r3
 8008734:	4615      	mov	r5, r2
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	022b      	lsls	r3, r5, #8
 8008740:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008744:	0222      	lsls	r2, r4, #8
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	6849      	ldr	r1, [r1, #4]
 800874a:	0849      	lsrs	r1, r1, #1
 800874c:	2000      	movs	r0, #0
 800874e:	4688      	mov	r8, r1
 8008750:	4681      	mov	r9, r0
 8008752:	eb12 0a08 	adds.w	sl, r2, r8
 8008756:	eb43 0b09 	adc.w	fp, r3, r9
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008768:	4650      	mov	r0, sl
 800876a:	4659      	mov	r1, fp
 800876c:	f7f7 fd2e 	bl	80001cc <__aeabi_uldivmod>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4613      	mov	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800877e:	d308      	bcc.n	8008792 <UART_SetConfig+0x2b2>
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008786:	d204      	bcs.n	8008792 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e0c2      	b.n	8008918 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008798:	e0be      	b.n	8008918 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a2:	d16a      	bne.n	800887a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80087a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d834      	bhi.n	8008816 <UART_SetConfig+0x336>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x2d4>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087f9 	.word	0x080087f9
 80087bc:	08008801 	.word	0x08008801
 80087c0:	08008817 	.word	0x08008817
 80087c4:	08008807 	.word	0x08008807
 80087c8:	08008817 	.word	0x08008817
 80087cc:	08008817 	.word	0x08008817
 80087d0:	08008817 	.word	0x08008817
 80087d4:	0800880f 	.word	0x0800880f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d8:	f7fc fd80 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 80087dc:	61f8      	str	r0, [r7, #28]
        break;
 80087de:	e020      	b.n	8008822 <UART_SetConfig+0x342>
 80087e0:	efff69f3 	.word	0xefff69f3
 80087e4:	40008000 	.word	0x40008000
 80087e8:	40013800 	.word	0x40013800
 80087ec:	40021000 	.word	0x40021000
 80087f0:	40004400 	.word	0x40004400
 80087f4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fc fd86 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 80087fc:	61f8      	str	r0, [r7, #28]
        break;
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008800:	4b4c      	ldr	r3, [pc, #304]	; (8008934 <UART_SetConfig+0x454>)
 8008802:	61fb      	str	r3, [r7, #28]
        break;
 8008804:	e00d      	b.n	8008822 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008806:	f7fc fcd1 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 800880a:	61f8      	str	r0, [r7, #28]
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	61fb      	str	r3, [r7, #28]
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d077      	beq.n	8008918 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	005a      	lsls	r2, r3, #1
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	085b      	lsrs	r3, r3, #1
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2b0f      	cmp	r3, #15
 8008842:	d916      	bls.n	8008872 <UART_SetConfig+0x392>
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800884a:	d212      	bcs.n	8008872 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f023 030f 	bic.w	r3, r3, #15
 8008854:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	b29b      	uxth	r3, r3
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	b29a      	uxth	r2, r3
 8008862:	8afb      	ldrh	r3, [r7, #22]
 8008864:	4313      	orrs	r3, r2
 8008866:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	8afa      	ldrh	r2, [r7, #22]
 800886e:	60da      	str	r2, [r3, #12]
 8008870:	e052      	b.n	8008918 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008878:	e04e      	b.n	8008918 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800887a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800887e:	2b08      	cmp	r3, #8
 8008880:	d827      	bhi.n	80088d2 <UART_SetConfig+0x3f2>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0x3a8>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088ad 	.word	0x080088ad
 800888c:	080088b5 	.word	0x080088b5
 8008890:	080088bd 	.word	0x080088bd
 8008894:	080088d3 	.word	0x080088d3
 8008898:	080088c3 	.word	0x080088c3
 800889c:	080088d3 	.word	0x080088d3
 80088a0:	080088d3 	.word	0x080088d3
 80088a4:	080088d3 	.word	0x080088d3
 80088a8:	080088cb 	.word	0x080088cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ac:	f7fc fd16 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 80088b0:	61f8      	str	r0, [r7, #28]
        break;
 80088b2:	e014      	b.n	80088de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b4:	f7fc fd28 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 80088b8:	61f8      	str	r0, [r7, #28]
        break;
 80088ba:	e010      	b.n	80088de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088bc:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <UART_SetConfig+0x454>)
 80088be:	61fb      	str	r3, [r7, #28]
        break;
 80088c0:	e00d      	b.n	80088de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c2:	f7fc fc73 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 80088c6:	61f8      	str	r0, [r7, #28]
        break;
 80088c8:	e009      	b.n	80088de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ce:	61fb      	str	r3, [r7, #28]
        break;
 80088d0:	e005      	b.n	80088de <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088dc:	bf00      	nop
    }

    if (pclk != 0U)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d019      	beq.n	8008918 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	085a      	lsrs	r2, r3, #1
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	2b0f      	cmp	r3, #15
 80088fc:	d909      	bls.n	8008912 <UART_SetConfig+0x432>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008904:	d205      	bcs.n	8008912 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60da      	str	r2, [r3, #12]
 8008910:	e002      	b.n	8008918 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008924:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008928:	4618      	mov	r0, r3
 800892a:	3728      	adds	r7, #40	; 0x28
 800892c:	46bd      	mov	sp, r7
 800892e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008932:	bf00      	nop
 8008934:	00f42400 	.word	0x00f42400

08008938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00a      	beq.n	80089ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01a      	beq.n	8008a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a36:	d10a      	bne.n	8008a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	605a      	str	r2, [r3, #4]
  }
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a8c:	f7f9 fc7a 	bl	8002384 <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d10e      	bne.n	8008abe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f82d 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e023      	b.n	8008b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d10e      	bne.n	8008aea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f817 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e00d      	b.n	8008b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b09c      	sub	sp, #112	; 0x70
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1e:	e0a5      	b.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	f000 80a1 	beq.w	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2a:	f7f9 fc2b 	bl	8002384 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d13e      	bne.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b54:	667b      	str	r3, [r7, #100]	; 0x64
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e6      	bne.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	663b      	str	r3, [r7, #96]	; 0x60
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e067      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d04f      	beq.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bda:	d147      	bne.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008be4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
 8008c06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e6      	bne.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	613b      	str	r3, [r7, #16]
   return(result);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f023 0301 	bic.w	r3, r3, #1
 8008c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3308      	adds	r3, #8
 8008c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c38:	623a      	str	r2, [r7, #32]
 8008c3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	6a3a      	ldr	r2, [r7, #32]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e5      	bne.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2220      	movs	r2, #32
 8008c56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e010      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69da      	ldr	r2, [r3, #28]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	4013      	ands	r3, r2
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2301      	moveq	r3, #1
 8008c7e:	2300      	movne	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	461a      	mov	r2, r3
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f43f af4a 	beq.w	8008b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3770      	adds	r7, #112	; 0x70
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b096      	sub	sp, #88	; 0x58
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	88fa      	ldrh	r2, [r7, #6]
 8008cb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2222      	movs	r2, #34	; 0x22
 8008cc0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d02b      	beq.n	8008d22 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cce:	4a42      	ldr	r2, [pc, #264]	; (8008dd8 <UART_Start_Receive_DMA+0x140>)
 8008cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	4a41      	ldr	r2, [pc, #260]	; (8008ddc <UART_Start_Receive_DMA+0x144>)
 8008cd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <UART_Start_Receive_DMA+0x148>)
 8008ce0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3324      	adds	r3, #36	; 0x24
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	88fb      	ldrh	r3, [r7, #6]
 8008cfe:	f7fb f995 	bl	800402c <HAL_DMA_Start_IT>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00c      	beq.n	8008d22 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e055      	b.n	8008dce <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d46:	657b      	str	r3, [r7, #84]	; 0x54
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d52:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e6      	bne.n	8008d32 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d84:	637a      	str	r2, [r7, #52]	; 0x34
 8008d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	613b      	str	r3, [r7, #16]
   return(result);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008db8:	623a      	str	r2, [r7, #32]
 8008dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	69f9      	ldr	r1, [r7, #28]
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e5      	bne.n	8008d98 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3758      	adds	r7, #88	; 0x58
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	08008fad 	.word	0x08008fad
 8008ddc:	080090d1 	.word	0x080090d1
 8008de0:	08009109 	.word	0x08009109

08008de4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	; 0x24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e00:	61fb      	str	r3, [r7, #28]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6979      	ldr	r1, [r7, #20]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	613b      	str	r3, [r7, #16]
   return(result);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008e24:	bf00      	nop
 8008e26:	3724      	adds	r7, #36	; 0x24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b095      	sub	sp, #84	; 0x54
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e56:	643b      	str	r3, [r7, #64]	; 0x40
 8008e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d118      	bne.n	8008ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f023 0310 	bic.w	r3, r3, #16
 8008eba:	647b      	str	r3, [r7, #68]	; 0x44
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec4:	61bb      	str	r3, [r7, #24]
 8008ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008eea:	bf00      	nop
 8008eec:	3754      	adds	r7, #84	; 0x54
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b090      	sub	sp, #64	; 0x40
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d137      	bne.n	8008f82 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	623b      	str	r3, [r7, #32]
   return(result);
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e5      	bne.n	8008f1a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
 8008f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	617b      	str	r3, [r7, #20]
   return(result);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e6      	bne.n	8008f4e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f80:	e002      	b.n	8008f88 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008f82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f84:	f7f8 fcec 	bl	8001960 <HAL_UART_TxCpltCallback>
}
 8008f88:	bf00      	nop
 8008f8a:	3740      	adds	r7, #64	; 0x40
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff fa74 	bl	800848c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa4:	bf00      	nop
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b09c      	sub	sp, #112	; 0x70
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d170      	bne.n	80090aa <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8008fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ff0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e6      	bne.n	8008fd0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	667b      	str	r3, [r7, #100]	; 0x64
 800901a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009022:	647a      	str	r2, [r7, #68]	; 0x44
 8009024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e5      	bne.n	8009002 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	623b      	str	r3, [r7, #32]
   return(result);
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904c:	663b      	str	r3, [r7, #96]	; 0x60
 800904e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009056:	633a      	str	r2, [r7, #48]	; 0x30
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800905c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e5      	bne.n	8009036 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800906a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906c:	2220      	movs	r2, #32
 800906e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009074:	2b01      	cmp	r3, #1
 8009076:	d118      	bne.n	80090aa <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	60fb      	str	r3, [r7, #12]
   return(result);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f023 0310 	bic.w	r3, r3, #16
 800908c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800908e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009096:	61fb      	str	r3, [r7, #28]
 8009098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	69b9      	ldr	r1, [r7, #24]
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	617b      	str	r3, [r7, #20]
   return(result);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090b8:	4619      	mov	r1, r3
 80090ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090bc:	f7ff fa04 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090c0:	e002      	b.n	80090c8 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80090c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090c4:	f7ff f9ec 	bl	80084a0 <HAL_UART_RxCpltCallback>
}
 80090c8:	bf00      	nop
 80090ca:	3770      	adds	r7, #112	; 0x70
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d109      	bne.n	80090fa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4619      	mov	r1, r3
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff f9e8 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090f8:	e002      	b.n	8009100 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff f9da 	bl	80084b4 <HAL_UART_RxHalfCpltCallback>
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009114:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800911a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009120:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912c:	2b80      	cmp	r3, #128	; 0x80
 800912e:	d109      	bne.n	8009144 <UART_DMAError+0x3c>
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b21      	cmp	r3, #33	; 0x21
 8009134:	d106      	bne.n	8009144 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2200      	movs	r2, #0
 800913a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800913e:	6978      	ldr	r0, [r7, #20]
 8009140:	f7ff fe50 	bl	8008de4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d109      	bne.n	8009166 <UART_DMAError+0x5e>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b22      	cmp	r3, #34	; 0x22
 8009156:	d106      	bne.n	8009166 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2200      	movs	r2, #0
 800915c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009160:	6978      	ldr	r0, [r7, #20]
 8009162:	f7ff fe65 	bl	8008e30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800916c:	f043 0210 	orr.w	r2, r3, #16
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009176:	6978      	ldr	r0, [r7, #20]
 8009178:	f7f8 fbe8 	bl	800194c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800917c:	bf00      	nop
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7f8 fbd2 	bl	800194c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091cc:	61fb      	str	r3, [r7, #28]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6979      	ldr	r1, [r7, #20]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	613b      	str	r3, [r7, #16]
   return(result);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e6      	bne.n	80091b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f8 fbb2 	bl	8001960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091fc:	bf00      	nop
 80091fe:	3720      	adds	r7, #32
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <__libc_init_array>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	4d0d      	ldr	r5, [pc, #52]	; (8009250 <__libc_init_array+0x38>)
 800921c:	4c0d      	ldr	r4, [pc, #52]	; (8009254 <__libc_init_array+0x3c>)
 800921e:	1b64      	subs	r4, r4, r5
 8009220:	10a4      	asrs	r4, r4, #2
 8009222:	2600      	movs	r6, #0
 8009224:	42a6      	cmp	r6, r4
 8009226:	d109      	bne.n	800923c <__libc_init_array+0x24>
 8009228:	4d0b      	ldr	r5, [pc, #44]	; (8009258 <__libc_init_array+0x40>)
 800922a:	4c0c      	ldr	r4, [pc, #48]	; (800925c <__libc_init_array+0x44>)
 800922c:	f000 f820 	bl	8009270 <_init>
 8009230:	1b64      	subs	r4, r4, r5
 8009232:	10a4      	asrs	r4, r4, #2
 8009234:	2600      	movs	r6, #0
 8009236:	42a6      	cmp	r6, r4
 8009238:	d105      	bne.n	8009246 <__libc_init_array+0x2e>
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009240:	4798      	blx	r3
 8009242:	3601      	adds	r6, #1
 8009244:	e7ee      	b.n	8009224 <__libc_init_array+0xc>
 8009246:	f855 3b04 	ldr.w	r3, [r5], #4
 800924a:	4798      	blx	r3
 800924c:	3601      	adds	r6, #1
 800924e:	e7f2      	b.n	8009236 <__libc_init_array+0x1e>
 8009250:	080092d8 	.word	0x080092d8
 8009254:	080092d8 	.word	0x080092d8
 8009258:	080092d8 	.word	0x080092d8
 800925c:	080092dc 	.word	0x080092dc

08009260 <memset>:
 8009260:	4402      	add	r2, r0
 8009262:	4603      	mov	r3, r0
 8009264:	4293      	cmp	r3, r2
 8009266:	d100      	bne.n	800926a <memset+0xa>
 8009268:	4770      	bx	lr
 800926a:	f803 1b01 	strb.w	r1, [r3], #1
 800926e:	e7f9      	b.n	8009264 <memset+0x4>

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
