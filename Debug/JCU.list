
JCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000915c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000024  08009364  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08009364  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef77  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335c  00000000  00000000  0003efcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00042328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  000439a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023756  00000000  00000000  00044ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a402  00000000  00000000  0006863e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc641  00000000  00000000  00082a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  0015f0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080092d0 	.word	0x080092d0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	080092d0 	.word	0x080092d0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CheckErrorsEnc>:
volatile bool COF = 0;											// if 1 - invalid angle data, AS5048 internal error
volatile bool OCF = 1;											// always must be 1, if isn't - AS5048 internal error.
volatile bool EncoderErrorFlag = 0;

void CheckErrorsEnc()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	comp_high = (AGCDiagnosticValue[0] & 0x08);					// bitmask for comp_high flag
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <CheckErrorsEnc+0xb8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <CheckErrorsEnc+0xbc>)
 80004dc:	701a      	strb	r2, [r3, #0]
	comp_low = (AGCDiagnosticValue[0] & 0x04);					// bitmask for comp_low flag
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <CheckErrorsEnc+0xb8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <CheckErrorsEnc+0xc0>)
 80004f2:	701a      	strb	r2, [r3, #0]
	COF = (AGCDiagnosticValue[0] & 0x02);						// bitmask for COF flag
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <CheckErrorsEnc+0xb8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000508:	701a      	strb	r2, [r3, #0]
	OCF = (AGCDiagnosticValue[0] & 0x01);						// bitmask for OCF flag
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <CheckErrorsEnc+0xb8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <CheckErrorsEnc+0xc8>)
 800051e:	701a      	strb	r2, [r3, #0]

	// Set/reset LED if we have/don't have an error
	if(comp_high == 1 || comp_low == 1 || COF == 1 || OCF == 0)
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <CheckErrorsEnc+0xbc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d111      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <CheckErrorsEnc+0xc0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10c      	bne.n	800054e <CheckErrorsEnc+0x8a>
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <CheckErrorsEnc+0xc8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <CheckErrorsEnc+0x9e>
	{
		EnableAlarmLED();
 800054e:	f000 f917 	bl	8000780 <EnableAlarmLED>
		JCUState.Errors |= ERROR_ENCODER_MAGNET;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <CheckErrorsEnc+0xcc>)
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	e009      	b.n	8000576 <CheckErrorsEnc+0xb2>
	}
	else
	{
		DisableAlarmLED();
 8000562:	f000 f919 	bl	8000798 <DisableAlarmLED>
		JCUState.Errors &=~ ERROR_ENCODER_MAGNET;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000572:	801a      	strh	r2, [r3, #0]
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000044 	.word	0x20000044
 8000580:	20000046 	.word	0x20000046
 8000584:	20000047 	.word	0x20000047
 8000588:	20000048 	.word	0x20000048
 800058c:	2000000a 	.word	0x2000000a
 8000590:	20000128 	.word	0x20000128

08000594 <ParityOk>:

//--------------Calculate PARITY EVEN bit-----------------
bool ParityOk(uint16_t scancode)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]

	uint16_t parity = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
	// checking 15 bits for EVEN Parity
	for (uint8_t i = 0; i < 15; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	e00d      	b.n	80005c4 <ParityOk+0x30>
	{
		if(scancode & 0x01)										// see if LSB is 1
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <ParityOk+0x24>
		{
			parity++;											// if it 1 add counter of "ones"
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
		}
		scancode = scancode >> 1;								// shift to next bit
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 15; i++)
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	3301      	adds	r3, #1
 80005c2:	737b      	strb	r3, [r7, #13]
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	2b0e      	cmp	r3, #14
 80005c8:	d9ee      	bls.n	80005a8 <ParityOk+0x14>
	}

	parity = parity & 0x01;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	81fb      	strh	r3, [r7, #14]
	// Compare calculated parity and the MSB of received DATA, return "1" if they are the same
	return (parity == scancode);
 80005d2:	89fa      	ldrh	r2, [r7, #14]
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <EncoderRoutine>:
//-------------------------------------------------------



void EncoderRoutine(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	switch(EncoderState)
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <EncoderRoutine+0x114>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	f200 8081 	bhi.w	80006fc <EncoderRoutine+0x110>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <EncoderRoutine+0x14>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000621 	.word	0x08000621
 8000604:	080006fb 	.word	0x080006fb
 8000608:	08000641 	.word	0x08000641
 800060c:	080006fb 	.word	0x080006fb
 8000610:	08000661 	.word	0x08000661
 8000614:	080006cf 	.word	0x080006cf
 8000618:	080006fb 	.word	0x080006fb
 800061c:	080006ef 	.word	0x080006ef
	{
		case (ENCODER_CLEAR_ERRORS):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f004 f87c 	bl	8004724 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadErrorFlagsAddress, Angle, SIZE);
 800062c:	2302      	movs	r3, #2
 800062e:	4a35      	ldr	r2, [pc, #212]	; (8000704 <EncoderRoutine+0x118>)
 8000630:	4935      	ldr	r1, [pc, #212]	; (8000708 <EncoderRoutine+0x11c>)
 8000632:	4836      	ldr	r0, [pc, #216]	; (800070c <EncoderRoutine+0x120>)
 8000634:	f005 fabc 	bl	8005bb0 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ERRORS;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <EncoderRoutine+0x114>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
		break;
 800063e:	e05d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ERRORS):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_WAIT_ANGLE):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f004 f86c 	bl	8004724 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, AGCDiagnosticAddress, Angle, SIZE);			// read  read angle, and sent request to read errors, so that next communication we would have error information
 800064c:	2302      	movs	r3, #2
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <EncoderRoutine+0x118>)
 8000650:	492f      	ldr	r1, [pc, #188]	; (8000710 <EncoderRoutine+0x124>)
 8000652:	482e      	ldr	r0, [pc, #184]	; (800070c <EncoderRoutine+0x120>)
 8000654:	f005 faac 	bl	8005bb0 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ANGLE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <EncoderRoutine+0x114>)
 800065a:	2203      	movs	r2, #3
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e04d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ANGLE):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_ANGLE):
			temp = (Angle[0] << 8) + Angle[1];
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EncoderRoutine+0x118>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <EncoderRoutine+0x118>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <EncoderRoutine+0x128>)
 8000676:	801a      	strh	r2, [r3, #0]
			if (ParityOk(temp))										// check parity, if angular data was corrupted
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EncoderRoutine+0x128>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff89 	bl	8000594 <ParityOk>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d015      	beq.n	80006b4 <EncoderRoutine+0xc8>
			{
				JCUState.Errors &=~ ERROR_ENCODER_PARITY;
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <EncoderRoutine+0x12c>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f023 0302 	bic.w	r3, r3, #2
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EncoderRoutine+0x12c>)
 8000694:	801a      	strh	r2, [r3, #0]
				temp &= 0x3FFF;										// remove status bits from angle information
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <EncoderRoutine+0x128>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <EncoderRoutine+0x128>)
 80006a2:	801a      	strh	r2, [r3, #0]
				JCUState.Angle = temp;								// update angle with latest value
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <EncoderRoutine+0x128>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <EncoderRoutine+0x12c>)
 80006aa:	805a      	strh	r2, [r3, #2]
				EncoderState = ENCODER_WAIT_DIAGNOSTIC;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EncoderRoutine+0x114>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	701a      	strb	r2, [r3, #0]
				break;
 80006b2:	e023      	b.n	80006fc <EncoderRoutine+0x110>
			}
			else
			{
				//JCUState.Angle = 0;
				DisableMotor();
 80006b4:	f000 fd80 	bl	80011b8 <DisableMotor>
				JCUState.Errors |= ERROR_ENCODER_PARITY;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <EncoderRoutine+0x12c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <EncoderRoutine+0x12c>)
 80006c4:	801a      	strh	r2, [r3, #0]
				EncoderState = ENCODER_CLEAR_ERRORS;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <EncoderRoutine+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				break;
 80006cc:	e016      	b.n	80006fc <EncoderRoutine+0x110>
			}

		case (ENCODER_WAIT_DIAGNOSTIC):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f004 f825 	bl	8004724 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadAngle, AGCDiagnosticValue, SIZE);		// read data about error, and sent request to read angle, so that next communication we would have actual angle information
 80006da:	2302      	movs	r3, #2
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <EncoderRoutine+0x130>)
 80006de:	4910      	ldr	r1, [pc, #64]	; (8000720 <EncoderRoutine+0x134>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <EncoderRoutine+0x120>)
 80006e2:	f005 fa65 	bl	8005bb0 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_DIAGNOSTIC;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <EncoderRoutine+0x114>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	701a      	strb	r2, [r3, #0]
		break;
 80006ec:	e006      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_DIAGNOSTIC):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_DIAGNOSTIC):
			CheckErrorsEnc();
 80006ee:	f7ff fee9 	bl	80004c4 <CheckErrorsEnc>
			EncoderState = ENCODER_WAIT_ANGLE;
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <EncoderRoutine+0x114>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e000      	b.n	80006fc <EncoderRoutine+0x110>
		break;
 80006fa:	bf00      	nop
	}
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000120 	.word	0x20000120
 8000704:	20000040 	.word	0x20000040
 8000708:	20000004 	.word	0x20000004
 800070c:	20000434 	.word	0x20000434
 8000710:	20000008 	.word	0x20000008
 8000714:	20000122 	.word	0x20000122
 8000718:	20000128 	.word	0x20000128
 800071c:	20000044 	.word	0x20000044
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);				// put CS high again after end of data transfer
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f003 fff6 	bl	8004724 <HAL_GPIO_WritePin>
	if (EncoderState == ENCODER_LOCK_ERRORS)
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d103      	bne.n	8000748 <HAL_SPI_TxRxCpltCallback+0x24>
		EncoderState = ENCODER_WAIT_ANGLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e012      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_ANGLE)
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d103      	bne.n	8000758 <HAL_SPI_TxRxCpltCallback+0x34>
		EncoderState = ENCODER_BUSY_ANGLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000752:	2204      	movs	r2, #4
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e00a      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_DIAGNOSTIC)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b06      	cmp	r3, #6
 800075e:	d103      	bne.n	8000768 <HAL_SPI_TxRxCpltCallback+0x44>
		EncoderState = ENCODER_BUSY_DIAGNOSTIC;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000762:	2207      	movs	r2, #7
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else
		EncoderState = ENCODER_CLEAR_ERRORS;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

	EncoderRoutine();																// process data which we have just read
 800076e:	f7ff ff3d 	bl	80005ec <EncoderRoutine>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000120 	.word	0x20000120

08000780 <EnableAlarmLED>:

void EnableAlarmLED(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <EnableAlarmLED+0x14>)
 800078c:	f003 ffca 	bl	8004724 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	48000800 	.word	0x48000800

08000798 <DisableAlarmLED>:

void DisableAlarmLED(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <DisableAlarmLED+0x14>)
 80007a4:	f003 ffbe 	bl	8004724 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000800 	.word	0x48000800

080007b0 <ModbusRTURoutine>:
 * 43.5 us data is sent, 8 bytes
 */


void ModbusRTURoutine(uint8_t *pBUFFER, uint8_t Length)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
 80007bc:	466b      	mov	r3, sp
 80007be:	461d      	mov	r5, r3
	//Length = BufferSize - hdma_usart1_rx.Instance->CNDTR;
	/*
	 * create temporary variables for ModBus parcing
	 */
	uint16_t CRCCalc = 0;							// CRC which will be calculated
 80007c0:	2300      	movs	r3, #0
 80007c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t CRCValue = 0;							// CRC which was sent by Master
 80007c4:	2300      	movs	r3, #0
 80007c6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t ModbusFunction = 0;						// Master modbus function (what action slave should do)
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t RequestedAddress = 0;					// started address which Master wants to read
 80007ce:	2300      	movs	r3, #0
 80007d0:	843b      	strh	r3, [r7, #32]
	uint16_t AmountofRead = 0;						// amount of registers which master wants to read
 80007d2:	2300      	movs	r3, #0
 80007d4:	83fb      	strh	r3, [r7, #30]
	uint16_t AmountofWrite = 0;						// amount of registers which master wants to write
 80007d6:	2300      	movs	r3, #0
 80007d8:	83bb      	strh	r3, [r7, #28]
	uint8_t ByteCount = 0;							// amount of BYTEs which will be sent in response
 80007da:	2300      	movs	r3, #0
 80007dc:	76fb      	strb	r3, [r7, #27]
	uint16_t CRCforResponse	= 0;					// CRC will be calculated for response data
 80007de:	2300      	movs	r3, #0
 80007e0:	833b      	strh	r3, [r7, #24]
	uint8_t temp[Length];							// temporary array which we are gonna use to process incoming data
 80007e2:	78fc      	ldrb	r4, [r7, #3]
 80007e4:	4623      	mov	r3, r4
 80007e6:	3b01      	subs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	b2e0      	uxtb	r0, r4
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	f04f 0200 	mov.w	r2, #0
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	00cb      	lsls	r3, r1, #3
 80007fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007fe:	00c2      	lsls	r2, r0, #3
 8000800:	b2e0      	uxtb	r0, r4
 8000802:	f04f 0100 	mov.w	r1, #0
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	00cb      	lsls	r3, r1, #3
 8000810:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000814:	00c2      	lsls	r2, r0, #3
 8000816:	4623      	mov	r3, r4
 8000818:	3307      	adds	r3, #7
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	ebad 0d03 	sub.w	sp, sp, r3
 8000822:	466b      	mov	r3, sp
 8000824:	3300      	adds	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
	uint16_t *ptemp16bitJCUConfig = pJCUConfig;		// temporary pointer to shift between data which should be read or written pJCUConfig
 8000828:	4b95      	ldr	r3, [pc, #596]	; (8000a80 <ModbusRTURoutine+0x2d0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *ptemp16bitJCUState = pJCUState;		// temporary pointer to shift between data which should be read or written pJCUState
 800082e:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <ModbusRTURoutine+0x2d4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	633b      	str	r3, [r7, #48]	; 0x30

	// putting all data to the temp array
	for (uint8_t i = 0; i < Length; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800083a:	e00d      	b.n	8000858 <ModbusRTURoutine+0xa8>
	{
		temp [i] = pBUFFER[i];
 800083c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	441a      	add	r2, r3
 8000844:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000848:	7811      	ldrb	r1, [r2, #0]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < Length; i++)
 800084e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000852:	3301      	adds	r3, #1
 8000854:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000858:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3ec      	bcc.n	800083c <ModbusRTURoutine+0x8c>
	}

	// comparing received and calculated CRCs

	CRCValue = temp[Length-1];
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	3b01      	subs	r3, #1
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue <<= 8;
 800086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue = CRCValue + temp[Length-2];
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	3b02      	subs	r3, #2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	b29a      	uxth	r2, r3
 800087c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800087e:	4413      	add	r3, r2
 8000880:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCCalc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&temp, (Length-2));
 8000882:	6939      	ldr	r1, [r7, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	3b02      	subs	r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	487f      	ldr	r0, [pc, #508]	; (8000a88 <ModbusRTURoutine+0x2d8>)
 800088c:	f003 f9d0 	bl	8003c30 <HAL_CRC_Calculate>
 8000890:	4603      	mov	r3, r0
 8000892:	84fb      	strh	r3, [r7, #38]	; 0x26

	// If data was not corrupted (CRC is ok)
	//if (1)
	if (CRCCalc == CRCValue)
 8000894:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 82a4 	bne.w	8000de6 <ModbusRTURoutine+0x636>
	{
		// Check if the message for us
		if (temp[0] == SLAVE_ID)
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4293      	cmp	r3, r2
 80008a6:	f040 828e 	bne.w	8000dc6 <ModbusRTURoutine+0x616>
		{
			// this packet for us, let's read it
			// Defining the modbus function
			ModbusFunction = temp[1];
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			switch (ModbusFunction)
 80008b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b6:	3b01      	subs	r3, #1
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	f200 8280 	bhi.w	8000dbe <ModbusRTURoutine+0x60e>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <ModbusRTURoutine+0x114>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	08000905 	.word	0x08000905
 80008c8:	08000dbf 	.word	0x08000dbf
 80008cc:	0800094f 	.word	0x0800094f
 80008d0:	08000a9d 	.word	0x08000a9d
 80008d4:	08000dfd 	.word	0x08000dfd
 80008d8:	08000bcf 	.word	0x08000bcf
 80008dc:	08000dbf 	.word	0x08000dbf
 80008e0:	08000dbf 	.word	0x08000dbf
 80008e4:	08000dbf 	.word	0x08000dbf
 80008e8:	08000dbf 	.word	0x08000dbf
 80008ec:	08000dbf 	.word	0x08000dbf
 80008f0:	08000dbf 	.word	0x08000dbf
 80008f4:	08000dbf 	.word	0x08000dbf
 80008f8:	08000dbf 	.word	0x08000dbf
 80008fc:	08000dbf 	.word	0x08000dbf
 8000900:	08000c61 	.word	0x08000c61
			{
				case READ_COILS:
					// this part is reading JCUState.StatusRegister bit by bit. Detailed description of each bit(coils) in Motor_Driver.h

					// Defining the first address of coil Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	b29b      	uxth	r3, r3
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b29a      	uxth	r2, r3
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	78db      	ldrb	r3, [r3, #3]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.

					//???????????????????????

					// Defining how many coil master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	b29b      	uxth	r3, r3
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b29a      	uxth	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4413      	add	r3, r2
 800092a:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 800092c:	8bfb      	ldrh	r3, [r7, #30]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the coil is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ENABLE_MOTOR_Pos) && (RequestedAddress <= SOFTWARE_RESET_Pos))
 8000934:	8c3b      	ldrh	r3, [r7, #32]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d804      	bhi.n	8000944 <ModbusRTURoutine+0x194>
							&& (((RequestedAddress - ENABLE_MOTOR_Pos) + AmountofRead) <= TOTAL_COILS))
 800093a:	8c3a      	ldrh	r2, [r7, #32]
 800093c:	8bfb      	ldrh	r3, [r7, #30]
 800093e:	4413      	add	r3, r2
 8000940:	2b10      	cmp	r3, #16
 8000942:	d903      	bls.n	800094c <ModbusRTURoutine+0x19c>

					}
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000944:	2002      	movs	r0, #2
 8000946:	f000 fa69 	bl	8000e1c <ModbusExceptionHandler>
					}



					break;
 800094a:	e258      	b.n	8000dfe <ModbusRTURoutine+0x64e>
 800094c:	e257      	b.n	8000dfe <ModbusRTURoutine+0x64e>

				case READ_AOHR:
					// Read JCU parameters which Master has set (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	b29b      	uxth	r3, r3
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b29a      	uxth	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	78db      	ldrb	r3, [r3, #3]
 800095c:	b29b      	uxth	r3, r3
 800095e:	4413      	add	r3, r2
 8000960:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000962:	8c3a      	ldrh	r2, [r7, #32]
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <ModbusRTURoutine+0x2dc>)
 8000966:	4413      	add	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800096c:	4413      	add	r3, r2
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c

					// Defining how many Holding registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	b29b      	uxth	r3, r3
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b29a      	uxth	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	795b      	ldrb	r3, [r3, #5]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4413      	add	r3, r2
 8000982:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000984:	8bfb      	ldrh	r3, [r7, #30]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 800098c:	8c3b      	ldrh	r3, [r7, #32]
 800098e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000992:	4293      	cmp	r3, r2
 8000994:	d96f      	bls.n	8000a76 <ModbusRTURoutine+0x2c6>
 8000996:	8c3b      	ldrh	r3, [r7, #32]
 8000998:	f649 4256 	movw	r2, #40022	; 0x9c56
 800099c:	4293      	cmp	r3, r2
 800099e:	d86a      	bhi.n	8000a76 <ModbusRTURoutine+0x2c6>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofRead) <= TOTAL_AOHR))
 80009a0:	8c3b      	ldrh	r3, [r7, #32]
 80009a2:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 80009a6:	3b41      	subs	r3, #65	; 0x41
 80009a8:	8bfa      	ldrh	r2, [r7, #30]
 80009aa:	4413      	add	r3, r2
 80009ac:	2b16      	cmp	r3, #22
 80009ae:	dc62      	bgt.n	8000a76 <ModbusRTURoutine+0x2c6>
					{
						TxData[0] = SLAVE_ID;
 80009b0:	2201      	movs	r2, #1
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009b4:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009bc:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 80009be:	4a34      	ldr	r2, [pc, #208]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009c0:	7efb      	ldrb	r3, [r7, #27]
 80009c2:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<ByteCount; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80009ca:	e01f      	b.n	8000a0c <ModbusRTURoutine+0x25c>
						{
							uint16_t tempvalue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	81bb      	strh	r3, [r7, #12]
							tempvalue = *ptemp16bitJCUConfig;
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 4] = tempvalue;
 80009d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009da:	3302      	adds	r3, #2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	89ba      	ldrh	r2, [r7, #12]
 80009e0:	b2d1      	uxtb	r1, r2
 80009e2:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009e4:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 80009e6:	89bb      	ldrh	r3, [r7, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 3] = tempvalue;
 80009ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	3303      	adds	r3, #3
 80009f4:	89ba      	ldrh	r2, [r7, #12]
 80009f6:	b2d1      	uxtb	r1, r2
 80009f8:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 80009fa:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUConfig++;
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	3302      	adds	r3, #2
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i++)
 8000a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a06:	3301      	adds	r3, #1
 8000a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a10:	7efb      	ldrb	r3, [r7, #27]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d3da      	bcc.n	80009cc <ModbusRTURoutine+0x21c>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000a16:	7efb      	ldrb	r3, [r7, #27]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	491c      	ldr	r1, [pc, #112]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a1e:	481a      	ldr	r0, [pc, #104]	; (8000a88 <ModbusRTURoutine+0x2d8>)
 8000a20:	f003 f906 	bl	8003c30 <HAL_CRC_Calculate>
 8000a24:	4603      	mov	r3, r0
 8000a26:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000a28:	7efb      	ldrb	r3, [r7, #27]
 8000a2a:	3303      	adds	r3, #3
 8000a2c:	8b3a      	ldrh	r2, [r7, #24]
 8000a2e:	b2d1      	uxtb	r1, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a32:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000a34:	8b3b      	ldrh	r3, [r7, #24]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000a3a:	7efb      	ldrb	r3, [r7, #27]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	8b3a      	ldrh	r2, [r7, #24]
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a44:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000a46:	bf00      	nop
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <ModbusRTURoutine+0x2e4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a56:	d0f7      	beq.n	8000a48 <ModbusRTURoutine+0x298>
						{
							// wait until the line is available
						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <ModbusRTURoutine+0x2e8>)
 8000a5e:	f003 fe61 	bl	8004724 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000a62:	7efb      	ldrb	r3, [r7, #27]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	3305      	adds	r3, #5
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4908      	ldr	r1, [pc, #32]	; (8000a90 <ModbusRTURoutine+0x2e0>)
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <ModbusRTURoutine+0x2e4>)
 8000a70:	f007 f996 	bl	8007da0 <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 8000a74:	e1c3      	b.n	8000dfe <ModbusRTURoutine+0x64e>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 f9d0 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000a7c:	e1bf      	b.n	8000dfe <ModbusRTURoutine+0x64e>
 8000a7e:	bf00      	nop
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000010 	.word	0x20000010
 8000a88:	200001bc 	.word	0x200001bc
 8000a8c:	7fff63bf 	.word	0x7fff63bf
 8000a90:	200000bc 	.word	0x200000bc
 8000a94:	2000031c 	.word	0x2000031c
 8000a98:	48000400 	.word	0x48000400

				case READ_AIR:
					// Read JCU parameters (errors/Angle/speed/torque/temperature)

					// Defining the first address of input registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	78db      	ldrb	r3, [r3, #3]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					ptemp16bitJCUState += RequestedAddress - ADDRESS_JCU_ERRORS;
 8000ab0:	8c3a      	ldrh	r2, [r7, #32]
 8000ab2:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <ModbusRTURoutine+0x56c>)
 8000ab4:	4413      	add	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aba:	4413      	add	r3, r2
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30

					// Defining how many input registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	795b      	ldrb	r3, [r3, #5]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000ad2:	8bfb      	ldrh	r3, [r7, #30]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the input Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_JCU_ERRORS) && (RequestedAddress <= ADDRESS_JCU_TEMP))
 8000ada:	8c3b      	ldrh	r3, [r7, #32]
 8000adc:	f247 5230 	movw	r2, #30000	; 0x7530
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d970      	bls.n	8000bc6 <ModbusRTURoutine+0x416>
 8000ae4:	8c3b      	ldrh	r3, [r7, #32]
 8000ae6:	f247 5235 	movw	r2, #30005	; 0x7535
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86b      	bhi.n	8000bc6 <ModbusRTURoutine+0x416>
							&& (((RequestedAddress - ADDRESS_JCU_ERRORS) + AmountofRead) <= TOTAL_AIR))
 8000aee:	8c3b      	ldrh	r3, [r7, #32]
 8000af0:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000af4:	3b31      	subs	r3, #49	; 0x31
 8000af6:	8bfa      	ldrh	r2, [r7, #30]
 8000af8:	4413      	add	r3, r2
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	dc63      	bgt.n	8000bc6 <ModbusRTURoutine+0x416>
					{
						TxData[0] = SLAVE_ID;
 8000afe:	2201      	movs	r2, #1
 8000b00:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b02:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000b04:	4a86      	ldr	r2, [pc, #536]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b0a:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000b0c:	4a84      	ldr	r2, [pc, #528]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b0e:	7efb      	ldrb	r3, [r7, #27]
 8000b10:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<AmountofRead; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000b18:	e01f      	b.n	8000b5a <ModbusRTURoutine+0x3aa>
						{
							uint16_t tempvalue = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81fb      	strh	r3, [r7, #14]
							tempvalue = *ptemp16bitJCUState;
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 4] = tempvalue;
 8000b24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b28:	3302      	adds	r3, #2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	b2d1      	uxtb	r1, r2
 8000b30:	4a7b      	ldr	r2, [pc, #492]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b32:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000b34:	89fb      	ldrh	r3, [r7, #14]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 3] = tempvalue;
 8000b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	3303      	adds	r3, #3
 8000b42:	89fa      	ldrh	r2, [r7, #14]
 8000b44:	b2d1      	uxtb	r1, r2
 8000b46:	4a76      	ldr	r2, [pc, #472]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b48:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUState++;
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
						for (uint8_t i=0; i<AmountofRead; i++)
 8000b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b54:	3301      	adds	r3, #1
 8000b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	8bfa      	ldrh	r2, [r7, #30]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d8d9      	bhi.n	8000b1a <ModbusRTURoutine+0x36a>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000b66:	7efb      	ldrb	r3, [r7, #27]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	496c      	ldr	r1, [pc, #432]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b6e:	486d      	ldr	r0, [pc, #436]	; (8000d24 <ModbusRTURoutine+0x574>)
 8000b70:	f003 f85e 	bl	8003c30 <HAL_CRC_Calculate>
 8000b74:	4603      	mov	r3, r0
 8000b76:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000b78:	7efb      	ldrb	r3, [r7, #27]
 8000b7a:	3303      	adds	r3, #3
 8000b7c:	8b3a      	ldrh	r2, [r7, #24]
 8000b7e:	b2d1      	uxtb	r1, r2
 8000b80:	4a67      	ldr	r2, [pc, #412]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b82:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000b84:	8b3b      	ldrh	r3, [r7, #24]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000b8a:	7efb      	ldrb	r3, [r7, #27]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	8b3a      	ldrh	r2, [r7, #24]
 8000b90:	b2d1      	uxtb	r1, r2
 8000b92:	4a63      	ldr	r2, [pc, #396]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000b94:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000b96:	bf00      	nop
 8000b98:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba6:	d0f7      	beq.n	8000b98 <ModbusRTURoutine+0x3e8>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2108      	movs	r1, #8
 8000bac:	485f      	ldr	r0, [pc, #380]	; (8000d2c <ModbusRTURoutine+0x57c>)
 8000bae:	f003 fdb9 	bl	8004724 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000bb2:	7efb      	ldrb	r3, [r7, #27]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3305      	adds	r3, #5
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4958      	ldr	r1, [pc, #352]	; (8000d20 <ModbusRTURoutine+0x570>)
 8000bbe:	485a      	ldr	r0, [pc, #360]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000bc0:	f007 f8ee 	bl	8007da0 <HAL_UART_Transmit_DMA>
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}

					break;
 8000bc4:	e11b      	b.n	8000dfe <ModbusRTURoutine+0x64e>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 f928 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000bcc:	e117      	b.n	8000dfe <ModbusRTURoutine+0x64e>
					break;

				case WRITE_SINGLE_AOHR:
					// Write Single parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					RequestedAddress = (temp[2] << 8) + temp[3];
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	789b      	ldrb	r3, [r3, #2]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000be2:	8c3a      	ldrh	r2, [r7, #32]
 8000be4:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bec:	4413      	add	r3, r2
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c

					/*
					 * Check if there is no such error:
					 * 1. the address of the holding Register is correct
					 */
					if ((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000bf0:	8c3b      	ldrh	r3, [r7, #32]
 8000bf2:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d92d      	bls.n	8000c56 <ModbusRTURoutine+0x4a6>
 8000bfa:	8c3b      	ldrh	r3, [r7, #32]
 8000bfc:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d828      	bhi.n	8000c56 <ModbusRTURoutine+0x4a6>
					{
						*ptemp16bitJCUConfig = (temp[4] << 8) + temp[5];
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	791b      	ldrb	r3, [r3, #4]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	795b      	ldrb	r3, [r3, #5]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	801a      	strh	r2, [r3, #0]

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4842      	ldr	r0, [pc, #264]	; (8000d2c <ModbusRTURoutine+0x57c>)
 8000c22:	f003 fd7f 	bl	8004724 <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000c26:	bf00      	nop
 8000c28:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c36:	d0f7      	beq.n	8000c28 <ModbusRTURoutine+0x478>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, RxData, Length);
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	493d      	ldr	r1, [pc, #244]	; (8000d34 <ModbusRTURoutine+0x584>)
 8000c40:	4839      	ldr	r0, [pc, #228]	; (8000d28 <ModbusRTURoutine+0x578>)
 8000c42:	f007 f8ad 	bl	8007da0 <HAL_UART_Transmit_DMA>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000c46:	8c3b      	ldrh	r3, [r7, #32]
 8000c48:	f649 4244 	movw	r2, #40004	; 0x9c44
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <ModbusRTURoutine+0x4ae>
						{
							CheckStatusRegister();
 8000c50:	f000 f98a 	bl	8000f68 <CheckStatusRegister>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000c54:	e003      	b.n	8000c5e <ModbusRTURoutine+0x4ae>
					}
					// if there are errors in request:
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 f8e0 	bl	8000e1c <ModbusExceptionHandler>
					}
					break;
 8000c5c:	e0cf      	b.n	8000dfe <ModbusRTURoutine+0x64e>
 8000c5e:	e0ce      	b.n	8000dfe <ModbusRTURoutine+0x64e>

				case WRITE_MULTIPLE_AOHR:
					// Write multiple parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to write (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	78db      	ldrb	r3, [r3, #3]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000c74:	8c3a      	ldrh	r2, [r7, #32]
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c7e:	4413      	add	r3, r2
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
					// Defining how many Holding registers master wants to read
					AmountofWrite = (temp[4] << 8) + temp[5];
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	83bb      	strh	r3, [r7, #28]
					ByteCount = temp[6];
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	76fb      	strb	r3, [r7, #27]
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to write does not exceed amount possible infromation
					 * 3. Check if master quantity of Bytes in message is equal (quantity of register) * 2
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000c9c:	8c3b      	ldrh	r3, [r7, #32]
 8000c9e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f240 8087 	bls.w	8000db6 <ModbusRTURoutine+0x606>
 8000ca8:	8c3b      	ldrh	r3, [r7, #32]
 8000caa:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f200 8081 	bhi.w	8000db6 <ModbusRTURoutine+0x606>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofWrite) <= TOTAL_AOHR)
 8000cb4:	8c3b      	ldrh	r3, [r7, #32]
 8000cb6:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000cba:	3b41      	subs	r3, #65	; 0x41
 8000cbc:	8bba      	ldrh	r2, [r7, #28]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2b16      	cmp	r3, #22
 8000cc2:	dc78      	bgt.n	8000db6 <ModbusRTURoutine+0x606>
							&& (ByteCount == AmountofWrite*2))
 8000cc4:	7efa      	ldrb	r2, [r7, #27]
 8000cc6:	8bbb      	ldrh	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d173      	bne.n	8000db6 <ModbusRTURoutine+0x606>
					{
						//uint8_t *ptemp8bit = (uint8_t*) ptemp16bitJCUState;			// for more convenient shifting of bytes during writing, we are creating 8 bit pointer

						for (uint8_t i=0; i<ByteCount; i+=2)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000cd4:	e019      	b.n	8000d0a <ModbusRTURoutine+0x55a>
						{
							*ptemp16bitJCUConfig = (temp[i+7] << 8) + temp[i+8];
 8000cd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cda:	3307      	adds	r3, #7
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cea:	3308      	adds	r3, #8
 8000cec:	6939      	ldr	r1, [r7, #16]
 8000cee:	5ccb      	ldrb	r3, [r1, r3]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf8:	801a      	strh	r2, [r3, #0]
							ptemp16bitJCUConfig++;
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i+=2)
 8000d00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d04:	3302      	adds	r3, #2
 8000d06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000d0a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000d0e:	7efb      	ldrb	r3, [r7, #27]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3e0      	bcc.n	8000cd6 <ModbusRTURoutine+0x526>
						}

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						for (uint8_t i = 0; i < 6; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d1a:	e01a      	b.n	8000d52 <ModbusRTURoutine+0x5a2>
 8000d1c:	7fff8acf 	.word	0x7fff8acf
 8000d20:	200000bc 	.word	0x200000bc
 8000d24:	200001bc 	.word	0x200001bc
 8000d28:	2000031c 	.word	0x2000031c
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	7fff63bf 	.word	0x7fff63bf
 8000d34:	20000058 	.word	0x20000058
						{
							TxData[i] = temp[i];
 8000d38:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000d3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	5c89      	ldrb	r1, [r1, r2]
 8000d44:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d46:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < 6; i++)
 8000d48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d52:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d9ee      	bls.n	8000d38 <ModbusRTURoutine+0x588>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+2));
 8000d5a:	7efb      	ldrb	r3, [r7, #27]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4929      	ldr	r1, [pc, #164]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d62:	482a      	ldr	r0, [pc, #168]	; (8000e0c <ModbusRTURoutine+0x65c>)
 8000d64:	f002 ff64 	bl	8003c30 <HAL_CRC_Calculate>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+2] = CRCforResponse;
 8000d6c:	7efb      	ldrb	r3, [r7, #27]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	8b3a      	ldrh	r2, [r7, #24]
 8000d72:	b2d1      	uxtb	r1, r2
 8000d74:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d76:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000d78:	8b3b      	ldrh	r3, [r7, #24]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000d7e:	7efb      	ldrb	r3, [r7, #27]
 8000d80:	3303      	adds	r3, #3
 8000d82:	8b3a      	ldrh	r2, [r7, #24]
 8000d84:	b2d1      	uxtb	r1, r2
 8000d86:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000d88:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <ModbusRTURoutine+0x660>)
 8000d90:	f003 fcc8 	bl	8004724 <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000d94:	bf00      	nop
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d0f7      	beq.n	8000d96 <ModbusRTURoutine+0x5e6>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, TxData, WRITE_MULTIPLE_AOHR_BYTES_RESPONSE);
 8000da6:	2208      	movs	r2, #8
 8000da8:	4917      	ldr	r1, [pc, #92]	; (8000e08 <ModbusRTURoutine+0x658>)
 8000daa:	481a      	ldr	r0, [pc, #104]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000dac:	f006 fff8 	bl	8007da0 <HAL_UART_Transmit_DMA>
						CheckStatusRegister();												// could be improved if we can check, was this register updated by master or not
 8000db0:	f000 f8da 	bl	8000f68 <CheckStatusRegister>
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000db4:	e023      	b.n	8000dfe <ModbusRTURoutine+0x64e>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f000 f830 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000dbc:	e01f      	b.n	8000dfe <ModbusRTURoutine+0x64e>

				default:
					// Modbus Exception 0x01 - Illegal Function
					ModbusExceptionHandler(MODBUS_ILLEGAL_FUNCTION);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f82c 	bl	8000e1c <ModbusExceptionHandler>
					break;
 8000dc4:	e01b      	b.n	8000dfe <ModbusRTURoutine+0x64e>
			}

		}
		else if(temp[0] == SLAVE_ID_BROADCAST)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d016      	beq.n	8000dfe <ModbusRTURoutine+0x64e>
		}
		else
		{
			// do nothing
			// wait new packet
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <ModbusRTURoutine+0x660>)
 8000dd6:	f003 fca5 	bl	8004724 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000dda:	2264      	movs	r2, #100	; 0x64
 8000ddc:	490e      	ldr	r1, [pc, #56]	; (8000e18 <ModbusRTURoutine+0x668>)
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000de0:	f007 f86e 	bl	8007ec0 <HAL_UART_Receive_DMA>
 8000de4:	e00b      	b.n	8000dfe <ModbusRTURoutine+0x64e>
	}
	else
	{
		// do nothing
		// wait new packet
		HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <ModbusRTURoutine+0x660>)
 8000dec:	f003 fc9a 	bl	8004724 <HAL_GPIO_WritePin>
		HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000df0:	2264      	movs	r2, #100	; 0x64
 8000df2:	4909      	ldr	r1, [pc, #36]	; (8000e18 <ModbusRTURoutine+0x668>)
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <ModbusRTURoutine+0x664>)
 8000df6:	f007 f863 	bl	8007ec0 <HAL_UART_Receive_DMA>
 8000dfa:	e000      	b.n	8000dfe <ModbusRTURoutine+0x64e>
					break;
 8000dfc:	bf00      	nop
 8000dfe:	46ad      	mov	sp, r5
	}



}
 8000e00:	bf00      	nop
 8000e02:	3738      	adds	r7, #56	; 0x38
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdb0      	pop	{r4, r5, r7, pc}
 8000e08:	200000bc 	.word	0x200000bc
 8000e0c:	200001bc 	.word	0x200001bc
 8000e10:	48000400 	.word	0x48000400
 8000e14:	2000031c 	.word	0x2000031c
 8000e18:	20000058 	.word	0x20000058

08000e1c <ModbusExceptionHandler>:

void ModbusExceptionHandler(uint8_t ExceptionCode)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	}
	else if (ExceptionCode == MODBUS_ILLEGAL_DATA_ADDRESS)
	{

	}
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <UpdatePWM>:
uint32_t EncoderCounter = 0;
float PosError;
float prevPosError;

void UpdatePWM(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	483f      	ldr	r0, [pc, #252]	; (8000f3c <UpdatePWM+0x108>)
 8000e40:	f003 fc88 	bl	8004754 <HAL_GPIO_TogglePin>

	// 1. Measuring error position
	PosError = JCUConfig.TargetAngel - JCUState.Angle;
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <UpdatePWM+0x10c>)
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <UpdatePWM+0x110>)
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <UpdatePWM+0x114>)
 8000e5a:	edc3 7a00 	vstr	s15, [r3]

	// 2. Proportional
	float Proportional = JCUConfig.KpPossitionLoop * PosError;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <UpdatePWM+0x10c>)
 8000e60:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <UpdatePWM+0x114>)
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	edc7 7a03 	vstr	s15, [r7, #12]

	float Integral = 0;
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]

	float Derivative = 0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]

	float PID = Proportional + Integral + Derivative;
 8000e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	edc7 7a00 	vstr	s15, [r7]

	if (PID >= 0)
 8000e96:	edd7 7a00 	vldr	s15, [r7]
 8000e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	db1d      	blt.n	8000ee0 <UpdatePWM+0xac>
	{
		PID = 500 + PID;
 8000ea4:	edd7 7a00 	vldr	s15, [r7]
 8000ea8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f4c <UpdatePWM+0x118>
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	edc7 7a00 	vstr	s15, [r7]
		if (PID < MAX_DUTY_CYCLE)
 8000eb4:	edd7 7a00 	vldr	s15, [r7]
 8000eb8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000f50 <UpdatePWM+0x11c>
 8000ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d509      	bpl.n	8000eda <UpdatePWM+0xa6>
			PWMValue = PID;
 8000ec6:	edd7 7a00 	vldr	s15, [r7]
 8000eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ece:	ee17 3a90 	vmov	r3, s15
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <UpdatePWM+0x120>)
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e01f      	b.n	8000f1a <UpdatePWM+0xe6>
		else
			PID = MAX_DUTY_CYCLE;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <UpdatePWM+0x124>)
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	e01c      	b.n	8000f1a <UpdatePWM+0xe6>
	}
	else
	{
		PID = 500 + PID;
 8000ee0:	edd7 7a00 	vldr	s15, [r7]
 8000ee4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f4c <UpdatePWM+0x118>
 8000ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eec:	edc7 7a00 	vstr	s15, [r7]
		if (PID > MIN_DUTY_CYCLE)
 8000ef0:	edd7 7a00 	vldr	s15, [r7]
 8000ef4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f5c <UpdatePWM+0x128>
 8000ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f00:	dd09      	ble.n	8000f16 <UpdatePWM+0xe2>
			PWMValue = PID;
 8000f02:	edd7 7a00 	vldr	s15, [r7]
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	ee17 3a90 	vmov	r3, s15
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <UpdatePWM+0x120>)
 8000f12:	801a      	strh	r2, [r3, #0]
 8000f14:	e001      	b.n	8000f1a <UpdatePWM+0xe6>
		else
			PID = MIN_DUTY_CYCLE;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <UpdatePWM+0x12c>)
 8000f18:	603b      	str	r3, [r7, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000 - PWMValue);
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <UpdatePWM+0x120>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <UpdatePWM+0x130>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMValue);
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <UpdatePWM+0x120>)
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <UpdatePWM+0x130>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	20000134 	.word	0x20000134
 8000f44:	20000128 	.word	0x20000128
 8000f48:	20000164 	.word	0x20000164
 8000f4c:	43fa0000 	.word	0x43fa0000
 8000f50:	44610000 	.word	0x44610000
 8000f54:	20000014 	.word	0x20000014
 8000f58:	44610000 	.word	0x44610000
 8000f5c:	42c80000 	.word	0x42c80000
 8000f60:	42c80000 	.word	0x42c80000
 8000f64:	200003e8 	.word	0x200003e8

08000f68 <CheckStatusRegister>:

void CheckStatusRegister(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	// Check bits in status register ONLY which could be written by Master.
	if 	(CHECK_BIT(JCUConfig.StatusRegister, ENABLE_MOTOR_Pos))
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <CheckStatusRegister+0x94>)
 8000f6e:	88db      	ldrh	r3, [r3, #6]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d009      	beq.n	8000f8c <CheckStatusRegister+0x24>
	{
		if (MotorState == MOTOR_DISABLED)			// enable motor if it is not enabled
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <CheckStatusRegister+0x98>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10e      	bne.n	8000f9e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_ENABLED;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <CheckStatusRegister+0x98>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
			EnableMotor();
 8000f86:	f000 f8ef 	bl	8001168 <EnableMotor>
 8000f8a:	e008      	b.n	8000f9e <CheckStatusRegister+0x36>
		}
	}
	else
	{
		if (MotorState != MOTOR_DISABLED)
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <CheckStatusRegister+0x98>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_DISABLED;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <CheckStatusRegister+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
			DisableMotor();
 8000f9a:	f000 f90d 	bl	80011b8 <DisableMotor>
		}
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, SET_BRAKE_Pos))
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fa0:	88db      	ldrh	r3, [r3, #6]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
	{
		// should  i reset brake??
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, GO_TO_TARGET_POSITION_Pos))
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <CheckStatusRegister+0x94>)
 8000faa:	88db      	ldrh	r3, [r3, #6]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <CheckStatusRegister+0x5a>
	{
		if (MotorState == MOTOR_ENABLED)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <CheckStatusRegister+0x98>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <CheckStatusRegister+0x5a>
		{
			MotorState = MOTOR_RUN;
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <CheckStatusRegister+0x98>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
	else
	{
		// decide what to do here
	}

	if (CHECK_BIT(JCUConfig.StatusRegister, STOP_MOTOR_Pos))
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fc4:	88db      	ldrh	r3, [r3, #6]
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d013      	beq.n	8000ff6 <CheckStatusRegister+0x8e>
	{
		JCUConfig.StatusRegister &=~ GO_TO_TARGET_POSITION;				// not go to target position anymore
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fd0:	88db      	ldrh	r3, [r3, #6]
 8000fd2:	f023 0308 	bic.w	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <CheckStatusRegister+0x94>)
 8000fda:	80da      	strh	r2, [r3, #6]
		// 1. Terminate PID
		MotorState = MOTOR_ENABLED;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <CheckStatusRegister+0x98>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
		// 2. set PWM 50%
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <CheckStatusRegister+0x9c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <CheckStatusRegister+0x9c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000134 	.word	0x20000134
 8001000:	20000121 	.word	0x20000121
 8001004:	200003e8 	.word	0x200003e8

08001008 <RunMotor>:

void RunMotor(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	/*
	 * We calling this function with 40 kHz
	 * due to dummy cycles, we read encoder data and analog data with 10 kHz each
	 */
	if (FeedbackState == READ_ENCODER)
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <RunMotor+0x6c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d105      	bne.n	8001020 <RunMotor+0x18>
	{
		EncoderRoutine();
 8001014:	f7ff faea 	bl	80005ec <EncoderRoutine>
		FeedbackState = WAIT_ENCODER;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <RunMotor+0x6c>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e01b      	b.n	8001058 <RunMotor+0x50>
	}
	else if(FeedbackState == WAIT_ENCODER)
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <RunMotor+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d103      	bne.n	8001030 <RunMotor+0x28>
	{
		//dummy step
		FeedbackState = READ_ANALOG;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <RunMotor+0x6c>)
 800102a:	2202      	movs	r2, #2
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e013      	b.n	8001058 <RunMotor+0x50>
	}
	else if (FeedbackState == READ_ANALOG)
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <RunMotor+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d108      	bne.n	800104a <RunMotor+0x42>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultDMA, 3);
 8001038:	2203      	movs	r2, #3
 800103a:	490f      	ldr	r1, [pc, #60]	; (8001078 <RunMotor+0x70>)
 800103c:	480f      	ldr	r0, [pc, #60]	; (800107c <RunMotor+0x74>)
 800103e:	f001 fd23 	bl	8002a88 <HAL_ADC_Start_DMA>
		FeedbackState = WAIT_ANALOG;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <RunMotor+0x6c>)
 8001044:	2203      	movs	r2, #3
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e006      	b.n	8001058 <RunMotor+0x50>
	}
	else if(FeedbackState == WAIT_ANALOG)
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <RunMotor+0x6c>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d102      	bne.n	8001058 <RunMotor+0x50>
	{
		//dummy step
		FeedbackState = READ_ENCODER;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <RunMotor+0x6c>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
	}


	JCUState.Speed = SpeedCalculation();
 8001058:	f000 f856 	bl	8001108 <SpeedCalculation>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <RunMotor+0x78>)
 8001062:	809a      	strh	r2, [r3, #4]

	if (MotorState == MOTOR_RUN)
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <RunMotor+0x7c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d101      	bne.n	8001070 <RunMotor+0x68>
	{
		UpdatePWM();
 800106c:	f7ff fee2 	bl	8000e34 <UpdatePWM>
	}

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000124 	.word	0x20000124
 8001078:	20000168 	.word	0x20000168
 800107c:	20000228 	.word	0x20000228
 8001080:	20000128 	.word	0x20000128
 8001084:	20000121 	.word	0x20000121

08001088 <HAL_TIM_IC_CaptureCallback>:

// Count increment encoder ticks
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	EncoderCounter = __HAL_TIM_GET_COUNTER(htim);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000054 	.word	0x20000054

080010ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	RunMotor();
 80010b4:	f7ff ffa8 	bl	8001008 <RunMotor>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	JCUState.MotorTemp = adcResultDMA[0] >> 8;			// potentiometer
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_ADC_ConvCpltCallback+0x40>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_ADC_ConvCpltCallback+0x44>)
 80010d6:	721a      	strb	r2, [r3, #8]
	JCUState.HbridgeTemp = adcResultDMA[1] >> 8;		// Driver temp
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_ADC_ConvCpltCallback+0x40>)
 80010da:	885b      	ldrh	r3, [r3, #2]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_ADC_ConvCpltCallback+0x44>)
 80010e6:	725a      	strb	r2, [r3, #9]
	JCUState.Torque = adcResultDMA[2];					// current feedback
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_ADC_ConvCpltCallback+0x40>)
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_ADC_ConvCpltCallback+0x44>)
 80010f2:	80da      	strh	r2, [r3, #6]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	20000168 	.word	0x20000168
 8001104:	20000128 	.word	0x20000128

08001108 <SpeedCalculation>:
/*
 * REDO~!!!!!!!!!!!!!!!!!!!!111
 * Use quadrature encoder for this
 */
int16_t SpeedCalculation(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	if (counter < 99)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <SpeedCalculation+0x50>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	2b62      	cmp	r3, #98	; 0x62
 8001112:	d806      	bhi.n	8001122 <SpeedCalculation+0x1a>
	{
		counter++;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <SpeedCalculation+0x50>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <SpeedCalculation+0x50>)
 800111e:	801a      	strh	r2, [r3, #0]
		PreviousEncoderCount = EncoderCounter;
		counter = 0;
		return AverageSpeed;
	}

}
 8001120:	e014      	b.n	800114c <SpeedCalculation+0x44>
		AverageSpeed = EncoderCounter - PreviousEncoderCount;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <SpeedCalculation+0x54>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <SpeedCalculation+0x58>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <SpeedCalculation+0x5c>)
 8001136:	801a      	strh	r2, [r3, #0]
		PreviousEncoderCount = EncoderCounter;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <SpeedCalculation+0x54>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <SpeedCalculation+0x58>)
 800113e:	6013      	str	r3, [r2, #0]
		counter = 0;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SpeedCalculation+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
		return AverageSpeed;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <SpeedCalculation+0x5c>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000052 	.word	0x20000052
 800115c:	20000054 	.word	0x20000054
 8001160:	2000004c 	.word	0x2000004c
 8001164:	20000050 	.word	0x20000050

08001168 <EnableMotor>:

void EnableMotor(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim1);
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <EnableMotor+0x48>)
 800116e:	f005 f9a9 	bl	80064c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <EnableMotor+0x48>)
 8001176:	f005 fa7f 	bl	8006678 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 800117a:	2100      	movs	r1, #0
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <EnableMotor+0x48>)
 800117e:	f006 fb29 	bl	80077d4 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001182:	2104      	movs	r1, #4
 8001184:	480a      	ldr	r0, [pc, #40]	; (80011b0 <EnableMotor+0x48>)
 8001186:	f005 fa77 	bl	8006678 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 800118a:	2104      	movs	r1, #4
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <EnableMotor+0x48>)
 800118e:	f006 fb21 	bl	80077d4 <HAL_TIMEx_PWMN_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <EnableMotor+0x48>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <EnableMotor+0x48>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
	MotorState = MOTOR_ENABLED;
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <EnableMotor+0x4c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200003e8 	.word	0x200003e8
 80011b4:	20000121 	.word	0x20000121

080011b8 <DisableMotor>:

void DisableMotor(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <DisableMotor+0x34>)
 80011be:	f005 f9d5 	bl	800656c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80011c2:	2100      	movs	r1, #0
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <DisableMotor+0x34>)
 80011c6:	f005 fb83 	bl	80068d0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 80011ca:	2100      	movs	r1, #0
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <DisableMotor+0x34>)
 80011ce:	f006 fbd7 	bl	8007980 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80011d2:	2104      	movs	r1, #4
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <DisableMotor+0x34>)
 80011d6:	f005 fb7b 	bl	80068d0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_2);
 80011da:	2104      	movs	r1, #4
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <DisableMotor+0x34>)
 80011de:	f006 fbcf 	bl	8007980 <HAL_TIMEx_PWMN_Stop_IT>
	MotorState = MOTOR_DISABLED;
 80011e2:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <DisableMotor+0x38>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200003e8 	.word	0x200003e8
 80011f0:	20000121 	.word	0x20000121

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f8:	f001 f8af 	bl	800235a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fc:	f000 f84a 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001200:	f000 fb44 	bl	800188c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001204:	f000 fabe 	bl	8001784 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001208:	f000 fb02 	bl	8001810 <MX_DMA_Init>
  MX_ADC1_Init();
 800120c:	f000 f894 	bl	8001338 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001210:	f000 f982 	bl	8001518 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001214:	f000 f942 	bl	800149c <MX_SPI1_Init>
  MX_CRC_Init();
 8001218:	f000 f912 	bl	8001440 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800121c:	f000 fa6c 	bl	80016f8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001220:	f000 fa16 	bl	8001650 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // disable interrupt of DMA - half of reveive
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <main+0x84>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <main+0x84>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0204 	bic.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <main+0x88>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <main+0x88>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0204 	bic.w	r2, r2, #4
 8001242:	601a      	str	r2, [r3, #0]
  hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <main+0x84>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2264      	movs	r2, #100	; 0x64
 800124a:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 800124c:	2264      	movs	r2, #100	; 0x64
 800124e:	490c      	ldr	r1, [pc, #48]	; (8001280 <main+0x8c>)
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <main+0x90>)
 8001252:	f006 fe35 	bl	8007ec0 <HAL_UART_Receive_DMA>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001256:	213c      	movs	r1, #60	; 0x3c
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <main+0x94>)
 800125a:	f005 fcb3 	bl	8006bc4 <HAL_TIM_Encoder_Start_IT>
  // HAL_TIM_Encoder_Start_DMA

  /*
   * Test part
   */
  JCUConfig.KpPossitionLoop = 0.3;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <main+0x98>)
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <main+0x9c>)
 8001262:	615a      	str	r2, [r3, #20]
  JCUConfig.TargetAngel = 11000;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <main+0x98>)
 8001266:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800126a:	809a      	strh	r2, [r3, #4]
  JCUConfig.StatusRegister = 0x09;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <main+0x98>)
 800126e:	2209      	movs	r2, #9
 8001270:	80da      	strh	r2, [r3, #6]
  CheckStatusRegister();
 8001272:	f7ff fe79 	bl	8000f68 <CheckStatusRegister>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001276:	e7fe      	b.n	8001276 <main+0x82>
 8001278:	2000028c 	.word	0x2000028c
 800127c:	200003a0 	.word	0x200003a0
 8001280:	20000058 	.word	0x20000058
 8001284:	2000031c 	.word	0x2000031c
 8001288:	20000498 	.word	0x20000498
 800128c:	20000134 	.word	0x20000134
 8001290:	3e99999a 	.word	0x3e99999a

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	; 0x58
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2244      	movs	r2, #68	; 0x44
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 f80c 	bl	80092c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ba:	f003 fa73 	bl	80047a4 <HAL_PWREx_ControlVoltageScaling>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c4:	f000 fbd4 	bl	8001a70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c8:	2302      	movs	r3, #2
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d2:	2310      	movs	r3, #16
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012da:	2302      	movs	r3, #2
 80012dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012e2:	230a      	movs	r3, #10
 80012e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012e6:	2307      	movs	r3, #7
 80012e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 faaa 	bl	8004850 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001302:	f000 fbb5 	bl	8001a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2303      	movs	r3, #3
 800130c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	2104      	movs	r1, #4
 800131e:	4618      	mov	r0, r3
 8001320:	f003 feb6 	bl	8005090 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800132a:	f000 fba1 	bl	8001a70 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3758      	adds	r7, #88	; 0x58
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_ADC1_Init+0xf4>)
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <MX_ADC1_Init+0xf8>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <MX_ADC1_Init+0xf4>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <MX_ADC1_Init+0xf4>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <MX_ADC1_Init+0xf4>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <MX_ADC1_Init+0xf4>)
 8001368:	2201      	movs	r2, #1
 800136a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_ADC1_Init+0xf4>)
 800136e:	2208      	movs	r2, #8
 8001370:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_ADC1_Init+0xf4>)
 8001374:	2200      	movs	r2, #0
 8001376:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_ADC1_Init+0xf4>)
 800137a:	2200      	movs	r2, #0
 800137c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_ADC1_Init+0xf4>)
 8001380:	2203      	movs	r2, #3
 8001382:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_ADC1_Init+0xf4>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_ADC1_Init+0xf4>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_ADC1_Init+0xf4>)
 8001394:	2200      	movs	r2, #0
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_ADC1_Init+0xf4>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_ADC1_Init+0xf4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_ADC1_Init+0xf4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ae:	481f      	ldr	r0, [pc, #124]	; (800142c <MX_ADC1_Init+0xf4>)
 80013b0:	f001 fa22 	bl	80027f8 <HAL_ADC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80013ba:	f000 fb59 	bl	8001a70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_ADC1_Init+0xfc>)
 80013c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c2:	2306      	movs	r3, #6
 80013c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80013c6:	2305      	movs	r3, #5
 80013c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ca:	237f      	movs	r3, #127	; 0x7f
 80013cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ce:	2304      	movs	r3, #4
 80013d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_ADC1_Init+0xf4>)
 80013dc:	f001 fdaa 	bl	8002f34 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013e6:	f000 fb43 	bl	8001a70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_ADC1_Init+0x100>)
 80013ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013ee:	230c      	movs	r3, #12
 80013f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_ADC1_Init+0xf4>)
 80013f8:	f001 fd9c 	bl	8002f34 <HAL_ADC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001402:	f000 fb35 	bl	8001a70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <MX_ADC1_Init+0x104>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800140a:	2312      	movs	r3, #18
 800140c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_ADC1_Init+0xf4>)
 8001414:	f001 fd8e 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800141e:	f000 fb27 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000228 	.word	0x20000228
 8001430:	50040000 	.word	0x50040000
 8001434:	2e300800 	.word	0x2e300800
 8001438:	21800100 	.word	0x21800100
 800143c:	43210000 	.word	0x43210000

08001440 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	hcrc.Instance = CRC;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_CRC_Init+0x54>)
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <MX_CRC_Init+0x58>)
 8001448:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_CRC_Init+0x54>)
 800144c:	2201      	movs	r2, #1
 800144e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_CRC_Init+0x54>)
 8001452:	2201      	movs	r2, #1
 8001454:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_CRC_Init+0x54>)
 8001458:	2220      	movs	r2, #32
 800145a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_CRC_Init+0x54>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	619a      	str	r2, [r3, #24]
	hcrc.Init.GeneratingPolynomial = 0x8005;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_CRC_Init+0x54>)
 8001464:	f248 0205 	movw	r2, #32773	; 0x8005
 8001468:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_CRC_Init+0x54>)
 800146c:	2208      	movs	r2, #8
 800146e:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0xFFFF;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_CRC_Init+0x54>)
 8001472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001476:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_CRC_Init+0x54>)
 800147a:	2201      	movs	r2, #1
 800147c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_CRC_Init+0x54>)
 8001480:	f002 fb72 	bl	8003b68 <HAL_CRC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_CRC_Init+0x4e>
	{
	Error_Handler();
 800148a:	f000 faf1 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
	#endif
  /* USER CODE END CRC_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001bc 	.word	0x200001bc
 8001498:	40023000 	.word	0x40023000

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_SPI1_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_SPI1_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_SPI1_Init+0x74>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_SPI1_Init+0x74>)
 80014b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_SPI1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_SPI1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_SPI1_Init+0x74>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_SPI1_Init+0x74>)
 80014d2:	2218      	movs	r2, #24
 80014d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_SPI1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_SPI1_Init+0x74>)
 80014ea:	2207      	movs	r2, #7
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_SPI1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_SPI1_Init+0x74>)
 80014fc:	f004 fab4 	bl	8005a68 <HAL_SPI_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 fab3 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000434 	.word	0x20000434
 8001514:	40013000 	.word	0x40013000

08001518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b096      	sub	sp, #88	; 0x58
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	222c      	movs	r2, #44	; 0x2c
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f007 febb 	bl	80092c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <MX_TIM1_Init+0x130>)
 800154c:	4a3f      	ldr	r2, [pc, #252]	; (800164c <MX_TIM1_Init+0x134>)
 800154e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <MX_TIM1_Init+0x130>)
 8001552:	2201      	movs	r2, #1
 8001554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <MX_TIM1_Init+0x130>)
 8001558:	2220      	movs	r2, #32
 800155a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <MX_TIM1_Init+0x130>)
 800155e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <MX_TIM1_Init+0x130>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <MX_TIM1_Init+0x130>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b35      	ldr	r3, [pc, #212]	; (8001648 <MX_TIM1_Init+0x130>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001576:	4834      	ldr	r0, [pc, #208]	; (8001648 <MX_TIM1_Init+0x130>)
 8001578:	f005 f827 	bl	80065ca <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001582:	f000 fa75 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001596:	4619      	mov	r1, r3
 8001598:	482b      	ldr	r0, [pc, #172]	; (8001648 <MX_TIM1_Init+0x130>)
 800159a:	f006 fa91 	bl	8007ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015a4:	f000 fa64 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	481e      	ldr	r0, [pc, #120]	; (8001648 <MX_TIM1_Init+0x130>)
 80015ce:	f005 fcc7 	bl	8006f60 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015d8:	f000 fa4a 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e0:	2204      	movs	r2, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4818      	ldr	r0, [pc, #96]	; (8001648 <MX_TIM1_Init+0x130>)
 80015e6:	f005 fcbb 	bl	8006f60 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80015f0:	f000 fa3e 	bl	8001a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001600:	230a      	movs	r3, #10
 8001602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM1_Init+0x130>)
 800162a:	f006 faaf 	bl	8007b8c <HAL_TIMEx_ConfigBreakDeadTime>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001634:	f000 fa1c 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM1_Init+0x130>)
 800163a:	f000 fbd3 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3758      	adds	r7, #88	; 0x58
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003e8 	.word	0x200003e8
 800164c:	40012c00 	.word	0x40012c00

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2224      	movs	r2, #36	; 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f007 fe2e 	bl	80092c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001696:	2303      	movs	r3, #3
 8001698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800169a:	2302      	movs	r3, #2
 800169c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016aa:	2302      	movs	r3, #2
 80016ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM2_Init+0xa4>)
 80016c2:	f005 f9d9 	bl	8006a78 <HAL_TIM_Encoder_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80016cc:	f000 f9d0 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM2_Init+0xa4>)
 80016de:	f006 f9ef 	bl	8007ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016e8:	f000 f9c2 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000498 	.word	0x20000498

080016f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_USART1_UART_Init+0x80>)
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <MX_USART1_UART_Init+0x84>)
 8001700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3000000;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <MX_USART1_UART_Init+0x88>)
 8001706:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_USART1_UART_Init+0x80>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_USART1_UART_Init+0x80>)
 800171c:	220c      	movs	r2, #12
 800171e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <MX_USART1_UART_Init+0x80>)
 800173c:	f006 fae1 	bl	8007d02 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 f993 	bl	8001a70 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart1.Instance->RTOR = MODBUS_TIMEOUT;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART1_UART_Init+0x80>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2214      	movs	r2, #20
 8001750:	615a      	str	r2, [r3, #20]
  huart1.Instance->CR1 |= USART_CR1_RTOIE;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_USART1_UART_Init+0x80>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001760:	601a      	str	r2, [r3, #0]
  huart1.Instance->CR2 |= USART_CR2_RTOEN;
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <MX_USART1_UART_Init+0x80>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <MX_USART1_UART_Init+0x80>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001770:	605a      	str	r2, [r3, #4]



  /* USER CODE END USART1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000031c 	.word	0x2000031c
 800177c:	40013800 	.word	0x40013800
 8001780:	002dc6c0 	.word	0x002dc6c0

08001784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_USART2_UART_Init+0x80>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <MX_USART2_UART_Init+0x84>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <MX_USART2_UART_Init+0x80>)
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <MX_USART2_UART_Init+0x88>)
 8001792:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_USART2_UART_Init+0x80>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_USART2_UART_Init+0x80>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017a8:	220c      	movs	r2, #12
 80017aa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	480f      	ldr	r0, [pc, #60]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017c8:	f006 fa9b 	bl	8007d02 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f94d 	bl	8001a70 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart2.Instance->RTOR = MODBUS_TIMEOUT;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2214      	movs	r2, #20
 80017dc:	615a      	str	r2, [r3, #20]
  huart2.Instance->CR1 |= USART_CR1_RTOIE;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017ec:	601a      	str	r2, [r3, #0]
  huart2.Instance->CR2 |= USART_CR2_RTOEN;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <MX_USART2_UART_Init+0x80>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017fc:	605a      	str	r2, [r3, #4]

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200004e4 	.word	0x200004e4
 8001808:	40004400 	.word	0x40004400
 800180c:	001e8480 	.word	0x001e8480

08001810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_DMA_Init+0x78>)
 8001818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <MX_DMA_Init+0x78>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6493      	str	r3, [r2, #72]	; 0x48
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_DMA_Init+0x78>)
 8001824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	200b      	movs	r0, #11
 8001834:	f002 f961 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001838:	200b      	movs	r0, #11
 800183a:	f002 f97a 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	200e      	movs	r0, #14
 8001844:	f002 f959 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001848:	200e      	movs	r0, #14
 800184a:	f002 f972 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	200f      	movs	r0, #15
 8001854:	f002 f951 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001858:	200f      	movs	r0, #15
 800185a:	f002 f96a 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2010      	movs	r0, #16
 8001864:	f002 f949 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001868:	2010      	movs	r0, #16
 800186a:	f002 f962 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2011      	movs	r0, #17
 8001874:	f002 f941 	bl	8003afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001878:	2011      	movs	r0, #17
 800187a:	f002 f95a 	bl	8003b32 <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <MX_GPIO_Init+0xe0>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <MX_GPIO_Init+0xe0>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_GPIO_Init+0xe0>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <MX_GPIO_Init+0xe0>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a2b      	ldr	r2, [pc, #172]	; (800196c <MX_GPIO_Init+0xe0>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <MX_GPIO_Init+0xe0>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <MX_GPIO_Init+0xe0>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4a25      	ldr	r2, [pc, #148]	; (800196c <MX_GPIO_Init+0xe0>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_GPIO_Init+0xe0>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80018f0:	481f      	ldr	r0, [pc, #124]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018f2:	f002 ff17 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f002 ff11 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_FC_Pin|LED_WHITE_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2118      	movs	r1, #24
 8001906:	481b      	ldr	r0, [pc, #108]	; (8001974 <MX_GPIO_Init+0xe8>)
 8001908:	f002 ff0c 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 800190c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4619      	mov	r1, r3
 8001924:	4812      	ldr	r0, [pc, #72]	; (8001970 <MX_GPIO_Init+0xe4>)
 8001926:	f002 fd93 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800192a:	2310      	movs	r3, #16
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f002 fd84 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_FC_Pin LED_WHITE_Pin */
  GPIO_InitStruct.Pin = RS485_FC_Pin|LED_WHITE_Pin;
 8001948:	2318      	movs	r3, #24
 800194a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_GPIO_Init+0xe8>)
 8001960:	f002 fd76 	bl	8004450 <HAL_GPIO_Init>

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800
 8001974:	48000400 	.word	0x48000400

08001978 <EndofBlock>:




void EndofBlock(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	// Check if it is timeout, and no new byte is coming
	if (huart1.Instance->ISR & USART_ISR_RTOF)
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <EndofBlock+0x6c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001988:	2b00      	cmp	r3, #0
 800198a:	d026      	beq.n	80019da <EndofBlock+0x62>
	{
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		uint8_t Length = BUFFSIZE - hdma_usart1_rx.Instance->CNDTR;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <EndofBlock+0x70>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001998:	71fb      	strb	r3, [r7, #7]
		//__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_RTOF);
		SET_BIT(huart1.Instance->ICR, USART_ICR_RTOCF);
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <EndofBlock+0x6c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a1a      	ldr	r2, [r3, #32]
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <EndofBlock+0x6c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a8:	621a      	str	r2, [r3, #32]
		//HAL_UART_Abort(&huart1);

		// Check if we received something, but not some glitch on the line
		if (Length>0)
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <EndofBlock+0x4e>
		{
			HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2110      	movs	r1, #16
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <EndofBlock+0x74>)
 80019b6:	f002 feb5 	bl	8004724 <HAL_GPIO_WritePin>
			ModbusRTURoutine(RxData, Length);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4619      	mov	r1, r3
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <EndofBlock+0x78>)
 80019c0:	f7fe fef6 	bl	80007b0 <ModbusRTURoutine>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
		}

	}
}
 80019c4:	e009      	b.n	80019da <EndofBlock+0x62>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2108      	movs	r1, #8
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <EndofBlock+0x74>)
 80019cc:	f002 feaa 	bl	8004724 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 80019d0:	2264      	movs	r2, #100	; 0x64
 80019d2:	4907      	ldr	r1, [pc, #28]	; (80019f0 <EndofBlock+0x78>)
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <EndofBlock+0x6c>)
 80019d6:	f006 fa73 	bl	8007ec0 <HAL_UART_Receive_DMA>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000031c 	.word	0x2000031c
 80019e8:	2000028c 	.word	0x2000028c
 80019ec:	48000400 	.word	0x48000400
 80019f0:	20000058 	.word	0x20000058

080019f4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2110      	movs	r1, #16
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <HAL_UART_TxCpltCallback+0x58>)
 8001a16:	f002 fe85 	bl	8004724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	4810      	ldr	r0, [pc, #64]	; (8001a60 <HAL_UART_TxCpltCallback+0x58>)
 8001a20:	f002 fe80 	bl	8004724 <HAL_GPIO_WritePin>
	// disable DMA for reseting DMA's counter, after enable again
	__HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_UART_TxCpltCallback+0x5c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_UART_TxCpltCallback+0x5c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_UART_TxCpltCallback+0x5c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2264      	movs	r2, #100	; 0x64
 8001a3a:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_UART_TxCpltCallback+0x5c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_UART_TxCpltCallback+0x5c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001a4c:	2264      	movs	r2, #100	; 0x64
 8001a4e:	4906      	ldr	r1, [pc, #24]	; (8001a68 <HAL_UART_TxCpltCallback+0x60>)
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <HAL_UART_TxCpltCallback+0x64>)
 8001a52:	f006 fa35 	bl	8007ec0 <HAL_UART_Receive_DMA>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400
 8001a64:	2000028c 	.word	0x2000028c
 8001a68:	20000058 	.word	0x20000058
 8001a6c:	2000031c 	.word	0x2000031c

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <Error_Handler+0x8>
	...

08001a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_MspInit+0x44>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_MspInit+0x44>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_MspInit+0x44>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_MspInit+0x44>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_MspInit+0x44>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0a0      	sub	sp, #128	; 0x80
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	2254      	movs	r2, #84	; 0x54
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fbeb 	bl	80092c0 <memset>
  if(hadc->Instance==ADC1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <HAL_ADC_MspInit+0x158>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f040 808f 	bne.w	8001c14 <HAL_ADC_MspInit+0x150>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001af6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001afc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b00:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fcb9 	bl	800549c <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b30:	f7ff ff9e 	bl	8001a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	4a39      	ldr	r2, [pc, #228]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_ADC_MspInit+0x15c>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Current_Pin|Potentiometer_Pin;
 8001b7c:	2348      	movs	r3, #72	; 0x48
 8001b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b80:	230b      	movs	r3, #11
 8001b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b92:	f002 fc5d 	bl	8004450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Temperature_Pin;
 8001b96:	2302      	movs	r3, #2
 8001b98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(Temperature_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481e      	ldr	r0, [pc, #120]	; (8001c24 <HAL_ADC_MspInit+0x160>)
 8001baa:	f002 fc51 	bl	8004450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_ADC_MspInit+0x168>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001be8:	480f      	ldr	r0, [pc, #60]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bea:	f002 f9bb 	bl	8003f64 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001bf4:	f7ff ff3c 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001bfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_ADC_MspInit+0x164>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2012      	movs	r0, #18
 8001c0a:	f001 ff76 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001c0e:	2012      	movs	r0, #18
 8001c10:	f001 ff8f 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c14:	bf00      	nop
 8001c16:	3780      	adds	r7, #128	; 0x80
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	50040000 	.word	0x50040000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	200003a0 	.word	0x200003a0
 8001c2c:	40020008 	.word	0x40020008

08001c30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_CRC_MspInit+0x38>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10b      	bne.n	8001c5a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_CRC_MspInit+0x3c>)
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_CRC_MspInit+0x3c>)
 8001c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c4c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_CRC_MspInit+0x3c>)
 8001c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023000 	.word	0x40023000
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_SPI_MspInit+0x90>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d131      	bne.n	8001cf6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_SPI_MspInit+0x94>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_SPI_MspInit+0x94>)
 8001c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_SPI_MspInit+0x94>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_SPI_MspInit+0x94>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <HAL_SPI_MspInit+0x94>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_SPI_MspInit+0x94>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8001cc2:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f002 fbb5 	bl	8004450 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2023      	movs	r0, #35	; 0x23
 8001cec:	f001 ff05 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cf0:	2023      	movs	r0, #35	; 0x23
 8001cf2:	f001 ff1e 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40013000 	.word	0x40013000
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_TIM_PWM_MspInit+0x44>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d113      	bne.n	8001d42 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_TIM_PWM_MspInit+0x48>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_TIM_PWM_MspInit+0x48>)
 8001d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d24:	6613      	str	r3, [r2, #96]	; 0x60
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_TIM_PWM_MspInit+0x48>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2019      	movs	r0, #25
 8001d38:	f001 fedf 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d3c:	2019      	movs	r0, #25
 8001d3e:	f001 fef8 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d130      	bne.n	8001dd8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001da6:	2303      	movs	r3, #3
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001db6:	2301      	movs	r3, #1
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f002 fb44 	bl	8004450 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	201c      	movs	r0, #28
 8001dce:	f001 fe94 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd2:	201c      	movs	r0, #28
 8001dd4:	f001 fead 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <HAL_TIM_MspPostInit+0xa0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d139      	bne.n	8001e7a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_TIM_MspPostInit+0xa4>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_TIM_MspPostInit+0xa4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_TIM_MspPostInit+0xa4>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_TIM_MspPostInit+0xa4>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_TIM_MspPostInit+0xa4>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_TIM_MspPostInit+0xa4>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e36:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f002 fafb 	bl	8004450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <HAL_TIM_MspPostInit+0xa8>)
 8001e76:	f002 faeb 	bl	8004450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000400 	.word	0x48000400

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a0      	sub	sp, #128	; 0x80
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	2254      	movs	r2, #84	; 0x54
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f007 fa05 	bl	80092c0 <memset>
  if(huart->Instance==USART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4aa1      	ldr	r2, [pc, #644]	; (8002140 <HAL_UART_MspInit+0x2b0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f040 8091 	bne.w	8001fe4 <HAL_UART_MspInit+0x154>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fae4 	bl	800549c <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7ff fdc9 	bl	8001a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ede:	4b99      	ldr	r3, [pc, #612]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a98      	ldr	r2, [pc, #608]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eea:	4b96      	ldr	r3, [pc, #600]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b93      	ldr	r3, [pc, #588]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a92      	ldr	r2, [pc, #584]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b90      	ldr	r3, [pc, #576]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f26:	4619      	mov	r1, r3
 8001f28:	4887      	ldr	r0, [pc, #540]	; (8002148 <HAL_UART_MspInit+0x2b8>)
 8001f2a:	f002 fa91 	bl	8004450 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001f2e:	4b87      	ldr	r3, [pc, #540]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f30:	4a87      	ldr	r2, [pc, #540]	; (8002150 <HAL_UART_MspInit+0x2c0>)
 8001f32:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001f34:	4b85      	ldr	r3, [pc, #532]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3a:	4b84      	ldr	r3, [pc, #528]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f40:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f46:	4b81      	ldr	r3, [pc, #516]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4c:	4b7f      	ldr	r3, [pc, #508]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f52:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f58:	4b7c      	ldr	r3, [pc, #496]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f64:	4879      	ldr	r0, [pc, #484]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f66:	f001 fffd 	bl	8003f64 <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001f70:	f7ff fd7e 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f78:	671a      	str	r2, [r3, #112]	; 0x70
 8001f7a:	4a74      	ldr	r2, [pc, #464]	; (800214c <HAL_UART_MspInit+0x2bc>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f80:	4b74      	ldr	r3, [pc, #464]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001f82:	4a75      	ldr	r2, [pc, #468]	; (8002158 <HAL_UART_MspInit+0x2c8>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001f88:	2202      	movs	r2, #2
 8001f8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	4b71      	ldr	r3, [pc, #452]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f9e:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001faa:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fb6:	4867      	ldr	r0, [pc, #412]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fb8:	f001 ffd4 	bl	8003f64 <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8001fc2:	f7ff fd55 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a62      	ldr	r2, [pc, #392]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fca:	66da      	str	r2, [r3, #108]	; 0x6c
 8001fcc:	4a61      	ldr	r2, [pc, #388]	; (8002154 <HAL_UART_MspInit+0x2c4>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2025      	movs	r0, #37	; 0x25
 8001fd8:	f001 fd8f 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fdc:	2025      	movs	r0, #37	; 0x25
 8001fde:	f001 fda8 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fe2:	e0a8      	b.n	8002136 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a5c      	ldr	r2, [pc, #368]	; (800215c <HAL_UART_MspInit+0x2cc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f040 80a3 	bne.w	8002136 <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fa4d 	bl	800549c <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8002008:	f7ff fd32 	bl	8001a70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8002012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002030:	4b44      	ldr	r3, [pc, #272]	; (8002144 <HAL_UART_MspInit+0x2b4>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800203c:	2304      	movs	r3, #4
 800203e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204c:	2307      	movs	r3, #7
 800204e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002054:	4619      	mov	r1, r3
 8002056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205a:	f002 f9f9 	bl	8004450 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002062:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002070:	2303      	movs	r3, #3
 8002072:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002074:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f002 f9e7 	bl	8004450 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 8002084:	4a37      	ldr	r2, [pc, #220]	; (8002164 <HAL_UART_MspInit+0x2d4>)
 8002086:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 800208a:	2202      	movs	r2, #2
 800208c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002094:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209a:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a0:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020b8:	4829      	ldr	r0, [pc, #164]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020ba:	f001 ff53 	bl	8003f64 <HAL_DMA_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0x238>
      Error_Handler();
 80020c4:	f7ff fcd4 	bl	8001a70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a25      	ldr	r2, [pc, #148]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020cc:	671a      	str	r2, [r3, #112]	; 0x70
 80020ce:	4a24      	ldr	r2, [pc, #144]	; (8002160 <HAL_UART_MspInit+0x2d0>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_UART_MspInit+0x2dc>)
 80020d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020dc:	2202      	movs	r2, #2
 80020de:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020e2:	2210      	movs	r2, #16
 80020e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800210a:	4817      	ldr	r0, [pc, #92]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 800210c:	f001 ff2a 	bl	8003f64 <HAL_DMA_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8002116:	f7ff fcab 	bl	8001a70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 800211e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_UART_MspInit+0x2d8>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2026      	movs	r0, #38	; 0x26
 800212c:	f001 fce5 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002130:	2026      	movs	r0, #38	; 0x26
 8002132:	f001 fcfe 	bl	8003b32 <HAL_NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3780      	adds	r7, #128	; 0x80
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40013800 	.word	0x40013800
 8002144:	40021000 	.word	0x40021000
 8002148:	48000400 	.word	0x48000400
 800214c:	2000028c 	.word	0x2000028c
 8002150:	40020058 	.word	0x40020058
 8002154:	200001e0 	.word	0x200001e0
 8002158:	40020044 	.word	0x40020044
 800215c:	40004400 	.word	0x40004400
 8002160:	20000174 	.word	0x20000174
 8002164:	4002006c 	.word	0x4002006c
 8002168:	200002d4 	.word	0x200002d4
 800216c:	40020080 	.word	0x40020080

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 f922 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA1_Channel1_IRQHandler+0x10>)
 80021ca:	f002 f862 	bl	8004292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200003a0 	.word	0x200003a0

080021d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Channel4_IRQHandler+0x10>)
 80021de:	f002 f858 	bl	8004292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001e0 	.word	0x200001e0

080021ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Channel5_IRQHandler+0x10>)
 80021f2:	f002 f84e 	bl	8004292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000028c 	.word	0x2000028c

08002200 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Channel6_IRQHandler+0x10>)
 8002206:	f002 f844 	bl	8004292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000174 	.word	0x20000174

08002214 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA1_Channel7_IRQHandler+0x10>)
 800221a:	f002 f83a 	bl	8004292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002d4 	.word	0x200002d4

08002228 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <ADC1_IRQHandler+0x10>)
 800222e:	f000 fcaf 	bl	8002b90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000228 	.word	0x20000228

0800223c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002242:	f004 fd6d 	bl	8006d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200003e8 	.word	0x200003e8

08002250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM2_IRQHandler+0x10>)
 8002256:	f004 fd63 	bl	8006d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000498 	.word	0x20000498

08002264 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <SPI1_IRQHandler+0x10>)
 800226a:	f003 fd51 	bl	8005d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000434 	.word	0x20000434

08002278 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	EndofBlock();
 800227c:	f7ff fb7c 	bl	8001978 <EndofBlock>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <USART1_IRQHandler+0x14>)
 8002282:	f005 fe73 	bl	8007f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000031c 	.word	0x2000031c

08002290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <USART2_IRQHandler+0x10>)
 8002296:	f005 fe69 	bl	8007f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200004e4 	.word	0x200004e4

080022a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <SystemInit+0x5c>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <SystemInit+0x5c>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <SystemInit+0x60>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a11      	ldr	r2, [pc, #68]	; (8002304 <SystemInit+0x60>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <SystemInit+0x60>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <SystemInit+0x60>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <SystemInit+0x60>)
 80022d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <SystemInit+0x60>)
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <SystemInit+0x60>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <SystemInit+0x60>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SystemInit+0x60>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00
 8002304:	40021000 	.word	0x40021000

08002308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800230c:	f7ff ffca 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002310:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002312:	e003      	b.n	800231c <LoopCopyDataInit>

08002314 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002316:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002318:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800231a:	3104      	adds	r1, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <LoopForever+0xa>)
	ldr	r3, =_edata
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002320:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002322:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002324:	d3f6      	bcc.n	8002314 <CopyDataInit>
	ldr	r2, =_sbss
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002328:	e002      	b.n	8002330 <LoopFillZerobss>

0800232a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800232a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800232c:	f842 3b04 	str.w	r3, [r2], #4

08002330 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <LoopForever+0x16>)
	cmp	r2, r3
 8002332:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002334:	d3f9      	bcc.n	800232a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002336:	f006 ff9f 	bl	8009278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800233a:	f7fe ff5b 	bl	80011f4 <main>

0800233e <LoopForever>:

LoopForever:
    b LoopForever
 800233e:	e7fe      	b.n	800233e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002340:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002344:	08009340 	.word	0x08009340
	ldr	r0, =_sdata
 8002348:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800234c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8002350:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8002354:	2000056c 	.word	0x2000056c

08002358 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <CAN1_RX0_IRQHandler>

0800235a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f001 fbbd 	bl	8003ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800236a:	2000      	movs	r0, #0
 800236c:	f000 f80e 	bl	800238c <HAL_InitTick>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	e001      	b.n	8002380 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800237c:	f7ff fb7e 	bl	8001a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002380:	79fb      	ldrb	r3, [r7, #7]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_InitTick+0x6c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_InitTick+0x70>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_InitTick+0x6c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 fbc9 	bl	8003b4e <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d809      	bhi.n	80023dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f001 fb93 	bl	8003afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_InitTick+0x74>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e007      	b.n	80023ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e004      	b.n	80023ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	e001      	b.n	80023ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000020 	.word	0x20000020
 80023fc:	20000018 	.word	0x20000018
 8002400:	2000001c 	.word	0x2000001c

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000020 	.word	0x20000020
 8002428:	20000568 	.word	0x20000568

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000568 	.word	0x20000568

08002444 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3360      	adds	r3, #96	; 0x60
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <LL_ADC_SetOffset+0x44>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	4313      	orrs	r3, r2
 80024dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	03fff000 	.word	0x03fff000

080024f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3330      	adds	r3, #48	; 0x30
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	211f      	movs	r1, #31
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0e9b      	lsrs	r3, r3, #26
 80025b4:	f003 011f 	and.w	r1, r3, #31
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	431a      	orrs	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3314      	adds	r3, #20
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	0e5b      	lsrs	r3, r3, #25
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	4413      	add	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	0d1b      	lsrs	r3, r3, #20
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2107      	movs	r1, #7
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0d1b      	lsrs	r3, r3, #20
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	431a      	orrs	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0318 	and.w	r3, r3, #24
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002674:	40d9      	lsrs	r1, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	400b      	ands	r3, r1
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	431a      	orrs	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	0007ffff 	.word	0x0007ffff

08002698 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6093      	str	r3, [r2, #8]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002720:	d101      	bne.n	8002726 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <LL_ADC_IsEnabled+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_ADC_IsEnabled+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002792:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002796:	f043 0204 	orr.w	r2, r3, #4
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d101      	bne.n	80027e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e12c      	b.n	8002a6c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff f94f 	bl	8001ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff3f 	bl	80026bc <LL_ADC_IsDeepPowerDownEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff25 	bl	8002698 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff5a 	bl	800270c <LL_ADC_IsInternalRegulatorEnabled>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff3e 	bl	80026e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002868:	4b82      	ldr	r3, [pc, #520]	; (8002a74 <HAL_ADC_Init+0x27c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	4a82      	ldr	r2, [pc, #520]	; (8002a78 <HAL_ADC_Init+0x280>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800287c:	e002      	b.n	8002884 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3b01      	subs	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff3c 	bl	800270c <LL_ADC_IsInternalRegulatorEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff75 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 80028c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80c5 	bne.w	8002a5a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80c1 	bne.w	8002a5a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028e0:	f043 0202 	orr.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff35 	bl	800275c <LL_ADC_IsEnabled>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f8:	4860      	ldr	r0, [pc, #384]	; (8002a7c <HAL_ADC_Init+0x284>)
 80028fa:	f7ff ff2f 	bl	800275c <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4619      	mov	r1, r3
 800290a:	485d      	ldr	r0, [pc, #372]	; (8002a80 <HAL_ADC_Init+0x288>)
 800290c:	f7ff fd9a 	bl	8002444 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7e5b      	ldrb	r3, [r3, #25]
 8002914:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800291a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002920:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002926:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d106      	bne.n	800294c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	3b01      	subs	r3, #1
 8002944:	045b      	lsls	r3, r3, #17
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <HAL_ADC_Init+0x28c>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	430b      	orrs	r3, r1
 800297a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff12 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 8002986:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff1f 	bl	80027d0 <LL_ADC_INJ_IsConversionOngoing>
 8002992:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d13d      	bne.n	8002a16 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d13a      	bne.n	8002a16 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029bc:	f023 0302 	bic.w	r3, r3, #2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	430b      	orrs	r3, r1
 80029c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d118      	bne.n	8002a06 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029f6:	430a      	orrs	r2, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	611a      	str	r2, [r3, #16]
 8002a04:	e007      	b.n	8002a16 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10c      	bne.n	8002a38 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f023 010f 	bic.w	r1, r3, #15
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
 8002a36:	e007      	b.n	8002a48 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020f 	bic.w	r2, r2, #15
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f023 0303 	bic.w	r3, r3, #3
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
 8002a58:	e007      	b.n	8002a6a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0210 	orr.w	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000018 	.word	0x20000018
 8002a78:	053e2d63 	.word	0x053e2d63
 8002a7c:	50040000 	.word	0x50040000
 8002a80:	50040300 	.word	0x50040300
 8002a84:	fff0c007 	.word	0xfff0c007

08002a88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fe86 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d167      	bne.n	8002b74 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Start_DMA+0x2a>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e063      	b.n	8002b7a <HAL_ADC_Start_DMA+0xf2>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fe1a 	bl	80036f4 <ADC_Enable>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d14f      	bne.n	8002b6a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f023 0206 	bic.w	r2, r3, #6
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	659a      	str	r2, [r3, #88]	; 0x58
 8002af6:	e002      	b.n	8002afe <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_ADC_Start_DMA+0xfc>)
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_ADC_Start_DMA+0x100>)
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_ADC_Start_DMA+0x104>)
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	221c      	movs	r2, #28
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0210 	orr.w	r2, r2, #16
 8002b34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3340      	adds	r3, #64	; 0x40
 8002b50:	4619      	mov	r1, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f001 fabd 	bl	80040d4 <HAL_DMA_Start_IT>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fe0d 	bl	8002782 <LL_ADC_REG_StartConversion>
 8002b68:	e006      	b.n	8002b78 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b72:	e001      	b.n	8002b78 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
 8002b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	080037b9 	.word	0x080037b9
 8002b88:	08003891 	.word	0x08003891
 8002b8c:	080038ad 	.word	0x080038ad

08002b90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d017      	beq.n	8002be6 <HAL_ADC_IRQHandler+0x56>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fea9 	bl	8003930 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x6a>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05e      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d059      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fc93 	bl	8002556 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03e      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d135      	bne.n	8002cb4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d12e      	bne.n	8002cb4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fda5 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11a      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 020c 	bic.w	r2, r2, #12
 8002c74:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d112      	bne.n	8002cb4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
 8002c9a:	e00b      	b.n	8002cb4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0210 	orr.w	r2, r3, #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe fa03 	bl	80010c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <HAL_ADC_IRQHandler+0x146>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d072      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d06d      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fc64 	bl	80025d4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d0c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fc1f 	bl	8002556 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d18:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d047      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_ADC_IRQHandler+0x1b2>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d03f      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d13a      	bne.n	8002db8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d133      	bne.n	8002db8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d12e      	bne.n	8002db8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd36 	bl	80027d0 <LL_ADC_INJ_IsConversionOngoing>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11a      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d112      	bne.n	8002db8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
 8002d9e:	e00b      	b.n	8002db8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0210 	orr.w	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fd91 	bl	80038e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2260      	movs	r2, #96	; 0x60
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x264>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f890 	bl	8002f0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x294>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fd77 	bl	8003908 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d012      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x2c4>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fd69 	bl	800391c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02a      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x324>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d025      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e008      	b.n	8002e88 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002e84:	2301      	movs	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10e      	bne.n	8002eac <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f83a 	bl	8002f20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x360>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f043 0208 	orr.w	r2, r3, #8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fd02 	bl	80038f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0b6      	sub	sp, #216	; 0xd8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x22>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e3b9      	b.n	80036ca <HAL_ADC_ConfigChannel+0x796>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fc21 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 839e 	bne.w	80036ac <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d824      	bhi.n	8002fc2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	3b02      	subs	r3, #2
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d81b      	bhi.n	8002fba <HAL_ADC_ConfigChannel+0x86>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <HAL_ADC_ConfigChannel+0x54>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa1 	.word	0x08002fa1
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fb1 	.word	0x08002fb1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	605a      	str	r2, [r3, #4]
          break;
 8002f9e:	e011      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2212      	movs	r2, #18
 8002fa4:	605a      	str	r2, [r3, #4]
          break;
 8002fa6:	e00d      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2218      	movs	r2, #24
 8002fac:	605a      	str	r2, [r3, #4]
          break;
 8002fae:	e009      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb6:	605a      	str	r2, [r3, #4]
          break;
 8002fb8:	e004      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2206      	movs	r2, #6
 8002fbe:	605a      	str	r2, [r3, #4]
          break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002fc2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f7ff fad3 	bl	800257c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fbe5 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fbf1 	bl	80027d0 <LL_ADC_INJ_IsConversionOngoing>
 8002fee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ff2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 81a6 	bne.w	8003348 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 81a1 	bne.w	8003348 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	461a      	mov	r2, r3
 8003014:	f7ff faf1 	bl	80025fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d00a      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6919      	ldr	r1, [r3, #16]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800304a:	f7ff fa2f 	bl	80024ac <LL_ADC_SetOffset>
 800304e:	e17b      	b.n	8003348 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fa4c 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_ADC_ConfigChannel+0x148>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fa41 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	f003 021f 	and.w	r2, r3, #31
 800307a:	e01e      	b.n	80030ba <HAL_ADC_ConfigChannel+0x186>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fa36 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800309a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800309e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e004      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80030ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x19e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	e018      	b.n	8003104 <HAL_ADC_ConfigChannel+0x1d0>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80030f6:	2320      	movs	r3, #32
 80030f8:	e004      	b.n	8003104 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80030fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003104:	429a      	cmp	r2, r3
 8003106:	d106      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fa05 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f9e9 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x20e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f9de 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003138:	4603      	mov	r3, r0
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	e01e      	b.n	8003180 <HAL_ADC_ConfigChannel+0x24c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f9d3 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003160:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e004      	b.n	800317e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x264>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	0e9b      	lsrs	r3, r3, #26
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	e018      	b.n	80031ca <HAL_ADC_ConfigChannel+0x296>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80031bc:	2320      	movs	r3, #32
 80031be:	e004      	b.n	80031ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80031c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d106      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	2101      	movs	r1, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f9a2 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f986 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x2d4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f97b 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	0e9b      	lsrs	r3, r3, #26
 8003202:	f003 021f 	and.w	r2, r3, #31
 8003206:	e01e      	b.n	8003246 <HAL_ADC_ConfigChannel+0x312>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f970 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800322a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800322e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e004      	b.n	8003244 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800323a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_ADC_ConfigChannel+0x32a>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	e016      	b.n	800328c <HAL_ADC_ConfigChannel+0x358>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e004      	b.n	800328c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2200      	movs	r2, #0
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f941 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2103      	movs	r1, #3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f925 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x396>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2103      	movs	r1, #3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff f91a 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80032c0:	4603      	mov	r3, r0
 80032c2:	0e9b      	lsrs	r3, r3, #26
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	e017      	b.n	80032fa <HAL_ADC_ConfigChannel+0x3c6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2103      	movs	r1, #3
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f90f 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80032d6:	4603      	mov	r3, r0
 80032d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e003      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80032f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x3de>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	e011      	b.n	8003336 <HAL_ADC_ConfigChannel+0x402>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003322:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e003      	b.n	8003336 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800332e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	2103      	movs	r1, #3
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f8ec 	bl	8002520 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fa05 	bl	800275c <LL_ADC_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 813f 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	461a      	mov	r2, r3
 8003368:	f7ff f972 	bl	8002650 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a8e      	ldr	r2, [pc, #568]	; (80035ac <HAL_ADC_ConfigChannel+0x678>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f040 8130 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x46c>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0e9b      	lsrs	r3, r3, #26
 800338e:	3301      	adds	r3, #1
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2b09      	cmp	r3, #9
 8003396:	bf94      	ite	ls
 8003398:	2301      	movls	r3, #1
 800339a:	2300      	movhi	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e019      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x4a0>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e003      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80033bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	bf94      	ite	ls
 80033ce:	2301      	movls	r3, #1
 80033d0:	2300      	movhi	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d079      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x4c0>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	069b      	lsls	r3, r3, #26
 80033ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f2:	e015      	b.n	8003420 <HAL_ADC_ConfigChannel+0x4ec>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e003      	b.n	8003418 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	069b      	lsls	r3, r3, #26
 800341c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x50c>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	3301      	adds	r3, #1
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	e017      	b.n	8003470 <HAL_ADC_ConfigChannel+0x53c>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800344e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003450:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003458:	2320      	movs	r3, #32
 800345a:	e003      	b.n	8003464 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	ea42 0103 	orr.w	r1, r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x562>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	3301      	adds	r3, #1
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	051b      	lsls	r3, r3, #20
 8003494:	e018      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x594>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80034ae:	2320      	movs	r3, #32
 80034b0:	e003      	b.n	80034ba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80034b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c8:	430b      	orrs	r3, r1
 80034ca:	e080      	b.n	80035ce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x5b4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	3301      	adds	r3, #1
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e6:	e015      	b.n	8003514 <HAL_ADC_ConfigChannel+0x5e0>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e003      	b.n	800350c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	069b      	lsls	r3, r3, #26
 8003510:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x600>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0e9b      	lsrs	r3, r3, #26
 8003526:	3301      	adds	r3, #1
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	e017      	b.n	8003564 <HAL_ADC_ConfigChannel+0x630>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	61fb      	str	r3, [r7, #28]
  return result;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e003      	b.n	8003558 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	ea42 0103 	orr.w	r1, r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x65c>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	3b1e      	subs	r3, #30
 8003588:	051b      	lsls	r3, r3, #20
 800358a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800358e:	e01d      	b.n	80035cc <HAL_ADC_ConfigChannel+0x698>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	613b      	str	r3, [r7, #16]
  return result;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e005      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x684>
 80035ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f003 021f 	and.w	r2, r3, #31
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	3b1e      	subs	r3, #30
 80035c6:	051b      	lsls	r3, r3, #20
 80035c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035cc:	430b      	orrs	r3, r1
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	6892      	ldr	r2, [r2, #8]
 80035d2:	4619      	mov	r1, r3
 80035d4:	f7ff f811 	bl	80025fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_ADC_ConfigChannel+0x7a0>)
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d06c      	beq.n	80036be <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e4:	483c      	ldr	r0, [pc, #240]	; (80036d8 <HAL_ADC_ConfigChannel+0x7a4>)
 80035e6:	f7fe ff53 	bl	8002490 <LL_ADC_GetCommonPathInternalCh>
 80035ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <HAL_ADC_ConfigChannel+0x7a8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d127      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d121      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a35      	ldr	r2, [pc, #212]	; (80036e0 <HAL_ADC_ConfigChannel+0x7ac>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d157      	bne.n	80036be <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003616:	4619      	mov	r1, r3
 8003618:	482f      	ldr	r0, [pc, #188]	; (80036d8 <HAL_ADC_ConfigChannel+0x7a4>)
 800361a:	f7fe ff26 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	099b      	lsrs	r3, r3, #6
 8003624:	4a30      	ldr	r2, [pc, #192]	; (80036e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003638:	e002      	b.n	8003640 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b01      	subs	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f9      	bne.n	800363a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003646:	e03a      	b.n	80036be <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_ADC_ConfigChannel+0x7b8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d113      	bne.n	800367a <HAL_ADC_ConfigChannel+0x746>
 8003652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d12a      	bne.n	80036be <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800366c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003670:	4619      	mov	r1, r3
 8003672:	4819      	ldr	r0, [pc, #100]	; (80036d8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003674:	f7fe fef9 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003678:	e021      	b.n	80036be <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d11c      	bne.n	80036be <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d111      	bne.n	80036be <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800369e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a2:	4619      	mov	r1, r3
 80036a4:	480c      	ldr	r0, [pc, #48]	; (80036d8 <HAL_ADC_ConfigChannel+0x7a4>)
 80036a6:	f7fe fee0 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
 80036aa:	e008      	b.n	80036be <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	37d8      	adds	r7, #216	; 0xd8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	80080000 	.word	0x80080000
 80036d8:	50040300 	.word	0x50040300
 80036dc:	c7520000 	.word	0xc7520000
 80036e0:	50040000 	.word	0x50040000
 80036e4:	20000018 	.word	0x20000018
 80036e8:	053e2d63 	.word	0x053e2d63
 80036ec:	cb840000 	.word	0xcb840000
 80036f0:	80000001 	.word	0x80000001

080036f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff f82b 	bl	800275c <LL_ADC_IsEnabled>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d14d      	bne.n	80037a8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <ADC_Enable+0xc0>)
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f043 0210 	orr.w	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e039      	b.n	80037aa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fffa 	bl	8002734 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003740:	f7fe fe74 	bl	800242c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003746:	e028      	b.n	800379a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f805 	bl	800275c <LL_ADC_IsEnabled>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ffe9 	bl	8002734 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003762:	f7fe fe63 	bl	800242c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d914      	bls.n	800379a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d00d      	beq.n	800379a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f043 0210 	orr.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d1cf      	bne.n	8003748 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	8000003f 	.word	0x8000003f

080037b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d14b      	bne.n	800386a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d021      	beq.n	8003830 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe feb0 	bl	8002556 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d032      	beq.n	8003862 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d12b      	bne.n	8003862 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11f      	bne.n	8003862 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
 800382e:	e018      	b.n	8003862 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d111      	bne.n	8003862 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7fd fc2c 	bl	80010c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003868:	e00e      	b.n	8003888 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fb52 	bl	8002f20 <HAL_ADC_ErrorCallback>
}
 800387c:	e004      	b.n	8003888 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff fb2a 	bl	8002ef8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fb24 	bl	8002f20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <__NVIC_SetPriorityGrouping+0x44>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003960:	4013      	ands	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800396c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <__NVIC_SetPriorityGrouping+0x44>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	60d3      	str	r3, [r2, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 0307 	and.w	r3, r3, #7
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	db0b      	blt.n	80039d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <__NVIC_EnableIRQ+0x38>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2001      	movs	r0, #1
 80039ca:	fa00 f202 	lsl.w	r2, r0, r2
 80039ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e100 	.word	0xe000e100

080039e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	db0a      	blt.n	8003a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	490c      	ldr	r1, [pc, #48]	; (8003a30 <__NVIC_SetPriority+0x4c>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	440b      	add	r3, r1
 8003a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a0c:	e00a      	b.n	8003a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4908      	ldr	r1, [pc, #32]	; (8003a34 <__NVIC_SetPriority+0x50>)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	3b04      	subs	r3, #4
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	440b      	add	r3, r1
 8003a22:	761a      	strb	r2, [r3, #24]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000e100 	.word	0xe000e100
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f1c3 0307 	rsb	r3, r3, #7
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	bf28      	it	cs
 8003a56:	2304      	movcs	r3, #4
 8003a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d902      	bls.n	8003a68 <NVIC_EncodePriority+0x30>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3b03      	subs	r3, #3
 8003a66:	e000      	b.n	8003a6a <NVIC_EncodePriority+0x32>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a80:	f04f 31ff 	mov.w	r1, #4294967295
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	43d9      	mvns	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	4313      	orrs	r3, r2
         );
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab0:	d301      	bcc.n	8003ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00f      	b.n	8003ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <SysTick_Config+0x40>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003abe:	210f      	movs	r1, #15
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f7ff ff8e 	bl	80039e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <SysTick_Config+0x40>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <SysTick_Config+0x40>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	e000e010 	.word	0xe000e010

08003ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff29 	bl	8003944 <__NVIC_SetPriorityGrouping>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0c:	f7ff ff3e 	bl	800398c <__NVIC_GetPriorityGrouping>
 8003b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff8e 	bl	8003a38 <NVIC_EncodePriority>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff5d 	bl	80039e4 <__NVIC_SetPriority>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	4603      	mov	r3, r0
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff31 	bl	80039a8 <__NVIC_EnableIRQ>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ffa2 	bl	8003aa0 <SysTick_Config>
 8003b5c:	4603      	mov	r3, r0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e054      	b.n	8003c24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7f5b      	ldrb	r3, [r3, #29]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fe f850 	bl	8001c30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	791b      	ldrb	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_CRC_Init+0xc4>)
 8003ba4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0218 	bic.w	r2, r2, #24
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	e00c      	b.n	8003bd2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f948 	bl	8003e58 <HAL_CRCEx_Polynomial_Set>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e028      	b.n	8003c24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	795b      	ldrb	r3, [r3, #5]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295
 8003be2:	611a      	str	r2, [r3, #16]
 8003be4:	e004      	b.n	8003bf0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6912      	ldr	r2, [r2, #16]
 8003bee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	04c11db7 	.word	0x04c11db7

08003c30 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2202      	movs	r2, #2
 8003c44:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d006      	beq.n	8003c6c <HAL_CRC_Calculate+0x3c>
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d829      	bhi.n	8003cb6 <HAL_CRC_Calculate+0x86>
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d019      	beq.n	8003c9a <HAL_CRC_Calculate+0x6a>
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d01e      	beq.n	8003ca8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003c6a:	e024      	b.n	8003cb6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e00a      	b.n	8003c88 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d3f0      	bcc.n	8003c72 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	613b      	str	r3, [r7, #16]
      break;
 8003c98:	e00e      	b.n	8003cb8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f812 	bl	8003cc8 <CRC_Handle_8>
 8003ca4:	6138      	str	r0, [r7, #16]
      break;
 8003ca6:	e007      	b.n	8003cb8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f899 	bl	8003de4 <CRC_Handle_16>
 8003cb2:	6138      	str	r0, [r7, #16]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_CRC_Calculate+0x88>
      break;
 8003cb6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003cbe:	693b      	ldr	r3, [r7, #16]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e023      	b.n	8003d22 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	3301      	adds	r3, #1
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	440b      	add	r3, r1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003cf4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	440b      	add	r3, r1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003d04:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	440b      	add	r3, r1
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003d18:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3d6      	bcc.n	8003cda <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04d      	beq.n	8003dd2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	4413      	add	r3, r2
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d116      	bne.n	8003d88 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	440b      	add	r3, r1
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	8b7a      	ldrh	r2, [r7, #26]
 8003d86:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d11f      	bne.n	8003dd2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3301      	adds	r3, #1
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	440b      	add	r3, r1
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b21b      	sxth	r3, r3
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	8b7a      	ldrh	r2, [r7, #26]
 8003dbe:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4413      	add	r3, r2
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3724      	adds	r7, #36	; 0x24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e013      	b.n	8003e1e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	041a      	lsls	r2, r3, #16
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	440b      	add	r3, r1
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3e6      	bcc.n	8003df6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	4413      	add	r3, r2
 8003e40:	881a      	ldrh	r2, [r3, #0]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e68:	231f      	movs	r3, #31
 8003e6a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e6c:	bf00      	nop
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	613a      	str	r2, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <HAL_CRCEx_Polynomial_Set+0x34>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_CRCEx_Polynomial_Set+0x16>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b18      	cmp	r3, #24
 8003e90:	d846      	bhi.n	8003f20 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003f27 	.word	0x08003f27
 8003e9c:	08003f21 	.word	0x08003f21
 8003ea0:	08003f21 	.word	0x08003f21
 8003ea4:	08003f21 	.word	0x08003f21
 8003ea8:	08003f21 	.word	0x08003f21
 8003eac:	08003f21 	.word	0x08003f21
 8003eb0:	08003f21 	.word	0x08003f21
 8003eb4:	08003f21 	.word	0x08003f21
 8003eb8:	08003f15 	.word	0x08003f15
 8003ebc:	08003f21 	.word	0x08003f21
 8003ec0:	08003f21 	.word	0x08003f21
 8003ec4:	08003f21 	.word	0x08003f21
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f21 	.word	0x08003f21
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003f09 	.word	0x08003f09
 8003edc:	08003f21 	.word	0x08003f21
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f21 	.word	0x08003f21
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003efd 	.word	0x08003efd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d913      	bls.n	8003f2a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f06:	e010      	b.n	8003f2a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	d90f      	bls.n	8003f2e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f12:	e00c      	b.n	8003f2e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b0f      	cmp	r3, #15
 8003f18:	d90b      	bls.n	8003f32 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f1e:	e008      	b.n	8003f32 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
      break;
 8003f24:	e006      	b.n	8003f34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f26:	bf00      	nop
 8003f28:	e004      	b.n	8003f34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f32:	bf00      	nop
  }
  if (status == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 0118 	bic.w	r1, r3, #24
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e098      	b.n	80040a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_DMA_Init+0x150>)
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d80f      	bhi.n	8003fa2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <HAL_DMA_Init+0x154>)
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	; (80040bc <HAL_DMA_Init+0x158>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	009a      	lsls	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a48      	ldr	r2, [pc, #288]	; (80040c0 <HAL_DMA_Init+0x15c>)
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003fa0:	e00e      	b.n	8003fc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <HAL_DMA_Init+0x160>)
 8003faa:	4413      	add	r3, r2
 8003fac:	4a43      	ldr	r2, [pc, #268]	; (80040bc <HAL_DMA_Init+0x158>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	009a      	lsls	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	; (80040c8 <HAL_DMA_Init+0x164>)
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401a:	d039      	beq.n	8004090 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_DMA_Init+0x15c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d11a      	bne.n	800405c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004026:	4b29      	ldr	r3, [pc, #164]	; (80040cc <HAL_DMA_Init+0x168>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f003 031c 	and.w	r3, r3, #28
 8004032:	210f      	movs	r1, #15
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	4924      	ldr	r1, [pc, #144]	; (80040cc <HAL_DMA_Init+0x168>)
 800403c:	4013      	ands	r3, r2
 800403e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_DMA_Init+0x168>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	f003 031c 	and.w	r3, r3, #28
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	491d      	ldr	r1, [pc, #116]	; (80040cc <HAL_DMA_Init+0x168>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
 800405a:	e019      	b.n	8004090 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <HAL_DMA_Init+0x16c>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 031c 	and.w	r3, r3, #28
 8004068:	210f      	movs	r1, #15
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	4917      	ldr	r1, [pc, #92]	; (80040d0 <HAL_DMA_Init+0x16c>)
 8004072:	4013      	ands	r3, r2
 8004074:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_DMA_Init+0x16c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 031c 	and.w	r3, r3, #28
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	4911      	ldr	r1, [pc, #68]	; (80040d0 <HAL_DMA_Init+0x16c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40020407 	.word	0x40020407
 80040b8:	bffdfff8 	.word	0xbffdfff8
 80040bc:	cccccccd 	.word	0xcccccccd
 80040c0:	40020000 	.word	0x40020000
 80040c4:	bffdfbf8 	.word	0xbffdfbf8
 80040c8:	40020400 	.word	0x40020400
 80040cc:	400200a8 	.word	0x400200a8
 80040d0:	400204a8 	.word	0x400204a8

080040d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_DMA_Start_IT+0x20>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e04b      	b.n	800418c <HAL_DMA_Start_IT+0xb8>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d13a      	bne.n	800417e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f95f 	bl	80043f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 020e 	orr.w	r2, r2, #14
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e00f      	b.n	800416c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 020a 	orr.w	r2, r2, #10
 800416a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e005      	b.n	800418a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004186:	2302      	movs	r3, #2
 8004188:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d008      	beq.n	80041be <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2204      	movs	r2, #4
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e022      	b.n	8004204 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 020e 	bic.w	r2, r2, #14
 80041cc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f003 021c 	and.w	r2, r3, #28
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d005      	beq.n	8004234 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	e029      	b.n	8004288 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 020e 	bic.w	r2, r2, #14
 8004242:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	f003 021c 	and.w	r2, r3, #28
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2101      	movs	r1, #1
 8004262:	fa01 f202 	lsl.w	r2, r1, r2
 8004266:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
    }
  }
  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f003 031c 	and.w	r3, r3, #28
 80042b2:	2204      	movs	r2, #4
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d026      	beq.n	800430c <HAL_DMA_IRQHandler+0x7a>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d021      	beq.n	800430c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0204 	bic.w	r2, r2, #4
 80042e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f003 021c 	and.w	r2, r3, #28
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2104      	movs	r1, #4
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d071      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800430a:	e06c      	b.n	80043e6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	f003 031c 	and.w	r3, r3, #28
 8004314:	2202      	movs	r2, #2
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02e      	beq.n	800437e <HAL_DMA_IRQHandler+0xec>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d029      	beq.n	800437e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 020a 	bic.w	r2, r2, #10
 8004346:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 021c 	and.w	r2, r3, #28
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2102      	movs	r1, #2
 800435e:	fa01 f202 	lsl.w	r2, r1, r2
 8004362:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d038      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800437c:	e033      	b.n	80043e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f003 031c 	and.w	r3, r3, #28
 8004386:	2208      	movs	r2, #8
 8004388:	409a      	lsls	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d02a      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x156>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d025      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 020e 	bic.w	r2, r2, #14
 80043aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f003 021c 	and.w	r2, r3, #28
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f202 	lsl.w	r2, r1, r2
 80043be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
}
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f003 021c 	and.w	r2, r3, #28
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2101      	movs	r1, #1
 800440c:	fa01 f202 	lsl.w	r2, r1, r2
 8004410:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d108      	bne.n	8004434 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004432:	e007      	b.n	8004444 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445e:	e148      	b.n	80046f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2101      	movs	r1, #1
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	4013      	ands	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 813a 	beq.w	80046ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d005      	beq.n	8004490 <HAL_GPIO_Init+0x40>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d130      	bne.n	80044f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044c6:	2201      	movs	r2, #1
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 0201 	and.w	r2, r3, #1
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d017      	beq.n	800452e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2203      	movs	r2, #3
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d123      	bne.n	8004582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	220f      	movs	r2, #15
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	08da      	lsrs	r2, r3, #3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3208      	adds	r2, #8
 800457c:	6939      	ldr	r1, [r7, #16]
 800457e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	2203      	movs	r2, #3
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0203 	and.w	r2, r3, #3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8094 	beq.w	80046ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_GPIO_Init+0x2c0>)
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	4a51      	ldr	r2, [pc, #324]	; (8004710 <HAL_GPIO_Init+0x2c0>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6613      	str	r3, [r2, #96]	; 0x60
 80045d0:	4b4f      	ldr	r3, [pc, #316]	; (8004710 <HAL_GPIO_Init+0x2c0>)
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045dc:	4a4d      	ldr	r2, [pc, #308]	; (8004714 <HAL_GPIO_Init+0x2c4>)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	220f      	movs	r2, #15
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004606:	d00d      	beq.n	8004624 <HAL_GPIO_Init+0x1d4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a43      	ldr	r2, [pc, #268]	; (8004718 <HAL_GPIO_Init+0x2c8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <HAL_GPIO_Init+0x1d0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a42      	ldr	r2, [pc, #264]	; (800471c <HAL_GPIO_Init+0x2cc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <HAL_GPIO_Init+0x1cc>
 8004618:	2302      	movs	r3, #2
 800461a:	e004      	b.n	8004626 <HAL_GPIO_Init+0x1d6>
 800461c:	2307      	movs	r3, #7
 800461e:	e002      	b.n	8004626 <HAL_GPIO_Init+0x1d6>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <HAL_GPIO_Init+0x1d6>
 8004624:	2300      	movs	r3, #0
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	f002 0203 	and.w	r2, r2, #3
 800462c:	0092      	lsls	r2, r2, #2
 800462e:	4093      	lsls	r3, r2
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004636:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_GPIO_Init+0x2c4>)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	3302      	adds	r3, #2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	43db      	mvns	r3, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004668:	4a2d      	ldr	r2, [pc, #180]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <HAL_GPIO_Init+0x2d0>)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3301      	adds	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f47f aeaf 	bne.w	8004460 <HAL_GPIO_Init+0x10>
  }
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40021000 	.word	0x40021000
 8004714:	40010000 	.word	0x40010000
 8004718:	48000400 	.word	0x48000400
 800471c:	48000800 	.word	0x48000800
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
 8004730:	4613      	mov	r3, r2
 8004732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004734:	787b      	ldrb	r3, [r7, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004740:	e002      	b.n	8004748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4013      	ands	r3, r2
 800476c:	041a      	lsls	r2, r3, #16
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43d9      	mvns	r1, r3
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	400b      	ands	r3, r1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40007000 	.word	0x40007000

080047a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b2:	d130      	bne.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d038      	beq.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2232      	movs	r2, #50	; 0x32
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0c9b      	lsrs	r3, r3, #18
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e8:	e002      	b.n	80047f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f0:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d102      	bne.n	8004804 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f2      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004810:	d110      	bne.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e00f      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d007      	beq.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800482c:	4a05      	ldr	r2, [pc, #20]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800482e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004832:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40007000 	.word	0x40007000
 8004848:	20000018 	.word	0x20000018
 800484c:	431bde83 	.word	0x431bde83

08004850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f000 bc11 	b.w	8005086 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004864:	4ba0      	ldr	r3, [pc, #640]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800486e:	4b9e      	ldr	r3, [pc, #632]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80e4 	beq.w	8004a4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_RCC_OscConfig+0x4c>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	f040 808b 	bne.w	80049aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b01      	cmp	r3, #1
 8004898:	f040 8087 	bne.w	80049aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800489c:	4b92      	ldr	r3, [pc, #584]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_OscConfig+0x64>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e3e8      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	4b8b      	ldr	r3, [pc, #556]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_RCC_OscConfig+0x7e>
 80048c4:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048cc:	e005      	b.n	80048da <HAL_RCC_OscConfig+0x8a>
 80048ce:	4b86      	ldr	r3, [pc, #536]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80048d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048da:	4293      	cmp	r3, r2
 80048dc:	d223      	bcs.n	8004926 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fd7a 	bl	80053dc <RCC_SetFlashLatencyFromMSIRange>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e3c9      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f2:	4b7d      	ldr	r3, [pc, #500]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7c      	ldr	r2, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80048f8:	f043 0308 	orr.w	r3, r3, #8
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	4b7a      	ldr	r3, [pc, #488]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4977      	ldr	r1, [pc, #476]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004910:	4b75      	ldr	r3, [pc, #468]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	4972      	ldr	r1, [pc, #456]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]
 8004924:	e025      	b.n	8004972 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004926:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6f      	ldr	r2, [pc, #444]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	496a      	ldr	r1, [pc, #424]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	4965      	ldr	r1, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fd3a 	bl	80053dc <RCC_SetFlashLatencyFromMSIRange>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e389      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004972:	f000 fc6f 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8004976:	4602      	mov	r2, r0
 8004978:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	495a      	ldr	r1, [pc, #360]	; (8004aec <HAL_RCC_OscConfig+0x29c>)
 8004984:	5ccb      	ldrb	r3, [r1, r3]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a58      	ldr	r2, [pc, #352]	; (8004af0 <HAL_RCC_OscConfig+0x2a0>)
 8004990:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004992:	4b58      	ldr	r3, [pc, #352]	; (8004af4 <HAL_RCC_OscConfig+0x2a4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd fcf8 	bl	800238c <HAL_InitTick>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d052      	beq.n	8004a4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	e36d      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d032      	beq.n	8004a18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049b2:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a4c      	ldr	r2, [pc, #304]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049be:	f7fd fd35 	bl	800242c <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049c6:	f7fd fd31 	bl	800242c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e356      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049e4:	4b40      	ldr	r3, [pc, #256]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3f      	ldr	r2, [pc, #252]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049ea:	f043 0308 	orr.w	r3, r3, #8
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	493a      	ldr	r1, [pc, #232]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	4935      	ldr	r1, [pc, #212]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
 8004a16:	e01a      	b.n	8004a4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a18:	4b33      	ldr	r3, [pc, #204]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a32      	ldr	r2, [pc, #200]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a24:	f7fd fd02 	bl	800242c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a2c:	f7fd fcfe 	bl	800242c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e323      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x1dc>
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d073      	beq.n	8004b42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_OscConfig+0x21c>
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d10e      	bne.n	8004a84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d10b      	bne.n	8004a84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d063      	beq.n	8004b40 <HAL_RCC_OscConfig+0x2f0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d15f      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e300      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCC_OscConfig+0x24c>
 8004a8e:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e01d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x288>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x270>
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x288>
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <HAL_RCC_OscConfig+0x298>)
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fca4 	bl	800242c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae6:	e010      	b.n	8004b0a <HAL_RCC_OscConfig+0x2ba>
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	080092e8 	.word	0x080092e8
 8004af0:	20000018 	.word	0x20000018
 8004af4:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fd fc98 	bl	800242c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e2bd      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0a:	4baf      	ldr	r3, [pc, #700]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x2a8>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd fc88 	bl	800242c <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fd fc84 	bl	800242c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e2a9      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b32:	4ba5      	ldr	r3, [pc, #660]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2d0>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d060      	beq.n	8004c10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_OscConfig+0x310>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d119      	bne.n	8004b8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d116      	bne.n	8004b8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b60:	4b99      	ldr	r3, [pc, #612]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_OscConfig+0x328>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e286      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b78:	4b93      	ldr	r3, [pc, #588]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	4990      	ldr	r1, [pc, #576]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8c:	e040      	b.n	8004c10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d023      	beq.n	8004bde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b96:	4b8c      	ldr	r3, [pc, #560]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a8b      	ldr	r2, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fd fc43 	bl	800242c <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004baa:	f7fd fc3f 	bl	800242c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e264      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bbc:	4b82      	ldr	r3, [pc, #520]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc8:	4b7f      	ldr	r3, [pc, #508]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	497c      	ldr	r1, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
 8004bdc:	e018      	b.n	8004c10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bde:	4b7a      	ldr	r3, [pc, #488]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a79      	ldr	r2, [pc, #484]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fd fc1f 	bl	800242c <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fc1b 	bl	800242c <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e240      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c04:	4b70      	ldr	r3, [pc, #448]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d03c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01c      	beq.n	8004c5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	4a67      	ldr	r2, [pc, #412]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd fbfa 	bl	800242c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3c:	f7fd fbf6 	bl	800242c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e21b      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c4e:	4b5e      	ldr	r3, [pc, #376]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0ef      	beq.n	8004c3c <HAL_RCC_OscConfig+0x3ec>
 8004c5c:	e01b      	b.n	8004c96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5e:	4b5a      	ldr	r3, [pc, #360]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fd fbdd 	bl	800242c <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c76:	f7fd fbd9 	bl	800242c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1fe      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c88:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ef      	bne.n	8004c76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80a6 	beq.w	8004df0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ca8:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	4a43      	ldr	r2, [pc, #268]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc0:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd0:	4b3e      	ldr	r3, [pc, #248]	; (8004dcc <HAL_RCC_OscConfig+0x57c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d118      	bne.n	8004d0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cdc:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_OscConfig+0x57c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3a      	ldr	r2, [pc, #232]	; (8004dcc <HAL_RCC_OscConfig+0x57c>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce8:	f7fd fba0 	bl	800242c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fd fb9c 	bl	800242c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e1c1      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d02:	4b32      	ldr	r3, [pc, #200]	; (8004dcc <HAL_RCC_OscConfig+0x57c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d108      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4d8>
 8004d16:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d26:	e024      	b.n	8004d72 <HAL_RCC_OscConfig+0x522>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b05      	cmp	r3, #5
 8004d2e:	d110      	bne.n	8004d52 <HAL_RCC_OscConfig+0x502>
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d38:	f043 0304 	orr.w	r3, r3, #4
 8004d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d40:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	4a20      	ldr	r2, [pc, #128]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d50:	e00f      	b.n	8004d72 <HAL_RCC_OscConfig+0x522>
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d6a:	f023 0304 	bic.w	r3, r3, #4
 8004d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fd fb57 	bl	800242c <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fd fb53 	bl	800242c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e176      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x578>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ed      	beq.n	8004d82 <HAL_RCC_OscConfig+0x532>
 8004da6:	e01a      	b.n	8004dde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd fb40 	bl	800242c <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dae:	e00f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fd fb3c 	bl	800242c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d906      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e15f      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd0:	4baa      	ldr	r3, [pc, #680]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e8      	bne.n	8004db0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d105      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de4:	4ba5      	ldr	r3, [pc, #660]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	4aa4      	ldr	r2, [pc, #656]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d03c      	beq.n	8004e76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01c      	beq.n	8004e3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e04:	4b9d      	ldr	r3, [pc, #628]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e0a:	4a9c      	ldr	r2, [pc, #624]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fd fb0a 	bl	800242c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e1c:	f7fd fb06 	bl	800242c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e12b      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e2e:	4b93      	ldr	r3, [pc, #588]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ef      	beq.n	8004e1c <HAL_RCC_OscConfig+0x5cc>
 8004e3c:	e01b      	b.n	8004e76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e3e:	4b8f      	ldr	r3, [pc, #572]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e44:	4a8d      	ldr	r2, [pc, #564]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fd faed 	bl	800242c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e56:	f7fd fae9 	bl	800242c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e10e      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e68:	4b84      	ldr	r3, [pc, #528]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ef      	bne.n	8004e56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8102 	beq.w	8005084 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	f040 80c5 	bne.w	8005014 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e8a:	4b7c      	ldr	r3, [pc, #496]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 0203 	and.w	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d12c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d123      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d113      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	3b01      	subs	r3, #1
 8004ede:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d067      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d062      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004efe:	4b5f      	ldr	r3, [pc, #380]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0bb      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5a      	ldr	r2, [pc, #360]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f1a:	f7fd fa87 	bl	800242c <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f22:	f7fd fa83 	bl	800242c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0a8      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f34:	4b51      	ldr	r3, [pc, #324]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f0      	bne.n	8004f22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f40:	4b4e      	ldr	r3, [pc, #312]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	4b4e      	ldr	r3, [pc, #312]	; (8005080 <HAL_RCC_OscConfig+0x830>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0112      	lsls	r2, r2, #4
 8004f54:	4311      	orrs	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f5a:	0212      	lsls	r2, r2, #8
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f62:	0852      	lsrs	r2, r2, #1
 8004f64:	3a01      	subs	r2, #1
 8004f66:	0552      	lsls	r2, r2, #21
 8004f68:	4311      	orrs	r1, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f6e:	0852      	lsrs	r2, r2, #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0652      	lsls	r2, r2, #25
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7a:	06d2      	lsls	r2, r2, #27
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	493f      	ldr	r1, [pc, #252]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f84:	4b3d      	ldr	r3, [pc, #244]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3c      	ldr	r2, [pc, #240]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a39      	ldr	r2, [pc, #228]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f9c:	f7fd fa46 	bl	800242c <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fd fa42 	bl	800242c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e067      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc2:	e05f      	b.n	8005084 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e05e      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc8:	4b2c      	ldr	r3, [pc, #176]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d157      	bne.n	8005084 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b29      	ldr	r3, [pc, #164]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fe0:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8004fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fec:	f7fd fa1e 	bl	800242c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fd fa1a 	bl	800242c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e03f      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x7a4>
 8005012:	e037      	b.n	8005084 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d02d      	beq.n	8005076 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a17      	ldr	r2, [pc, #92]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005024:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	4a0e      	ldr	r2, [pc, #56]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 8005044:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7fd f9ed 	bl	800242c <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005056:	f7fd f9e9 	bl	800242c <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e00e      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <HAL_RCC_OscConfig+0x82c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0x806>
 8005074:	e006      	b.n	8005084 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e005      	b.n	8005086 <HAL_RCC_OscConfig+0x836>
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000
 8005080:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0c8      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b66      	ldr	r3, [pc, #408]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d910      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b63      	ldr	r3, [pc, #396]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 0207 	bic.w	r2, r3, #7
 80050ba:	4961      	ldr	r1, [pc, #388]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b5f      	ldr	r3, [pc, #380]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0b0      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d04c      	beq.n	800517a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e8:	4b56      	ldr	r3, [pc, #344]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d121      	bne.n	8005138 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e09e      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005100:	4b50      	ldr	r3, [pc, #320]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d115      	bne.n	8005138 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e092      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005118:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e086      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005128:	4b46      	ldr	r3, [pc, #280]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e07e      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 0203 	bic.w	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	493f      	ldr	r1, [pc, #252]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514a:	f7fd f96f 	bl	800242c <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005150:	e00a      	b.n	8005168 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005152:	f7fd f96b 	bl	800242c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e066      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 020c 	and.w	r2, r3, #12
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	429a      	cmp	r2, r3
 8005178:	d1eb      	bne.n	8005152 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	492c      	ldr	r1, [pc, #176]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005198:	4b29      	ldr	r3, [pc, #164]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d210      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0207 	bic.w	r2, r3, #7
 80051ae:	4924      	ldr	r1, [pc, #144]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b22      	ldr	r3, [pc, #136]	; (8005240 <HAL_RCC_ClockConfig+0x1b0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e036      	b.n	8005236 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4918      	ldr	r1, [pc, #96]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4910      	ldr	r1, [pc, #64]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005206:	f000 f825 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 800520a:	4602      	mov	r2, r0
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <HAL_RCC_ClockConfig+0x1b4>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	490c      	ldr	r1, [pc, #48]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	5ccb      	ldrb	r3, [r1, r3]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fd f8ae 	bl	800238c <HAL_InitTick>
 8005230:	4603      	mov	r3, r0
 8005232:	72fb      	strb	r3, [r7, #11]

  return status;
 8005234:	7afb      	ldrb	r3, [r7, #11]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40022000 	.word	0x40022000
 8005244:	40021000 	.word	0x40021000
 8005248:	080092e8 	.word	0x080092e8
 800524c:	20000018 	.word	0x20000018
 8005250:	2000001c 	.word	0x2000001c

08005254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	2300      	movs	r3, #0
 8005260:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005262:	4b3e      	ldr	r3, [pc, #248]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x34>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b0c      	cmp	r3, #12
 8005280:	d121      	bne.n	80052c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d11e      	bne.n	80052c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005288:	4b34      	ldr	r3, [pc, #208]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005294:	4b31      	ldr	r3, [pc, #196]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e005      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052a4:	4b2d      	ldr	r3, [pc, #180]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052b0:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10d      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d102      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052cc:	4b25      	ldr	r3, [pc, #148]	; (8005364 <HAL_RCC_GetSysClockFreq+0x110>)
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e004      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052d8:	4b23      	ldr	r3, [pc, #140]	; (8005368 <HAL_RCC_GetSysClockFreq+0x114>)
 80052da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0c      	cmp	r3, #12
 80052e0:	d134      	bne.n	800534c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052e2:	4b1e      	ldr	r3, [pc, #120]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0xa6>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d003      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0xac>
 80052f8:	e005      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052fa:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <HAL_RCC_GetSysClockFreq+0x110>)
 80052fc:	617b      	str	r3, [r7, #20]
      break;
 80052fe:	e005      	b.n	800530c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <HAL_RCC_GetSysClockFreq+0x114>)
 8005302:	617b      	str	r3, [r7, #20]
      break;
 8005304:	e002      	b.n	800530c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	617b      	str	r3, [r7, #20]
      break;
 800530a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800530c:	4b13      	ldr	r3, [pc, #76]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	3301      	adds	r3, #1
 8005318:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	fb02 f203 	mul.w	r2, r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_RCC_GetSysClockFreq+0x108>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	0e5b      	lsrs	r3, r3, #25
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	3301      	adds	r3, #1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800534c:	69bb      	ldr	r3, [r7, #24]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3724      	adds	r7, #36	; 0x24
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000
 8005360:	08009300 	.word	0x08009300
 8005364:	00f42400 	.word	0x00f42400
 8005368:	007a1200 	.word	0x007a1200

0800536c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCC_GetHCLKFreq+0x14>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000018 	.word	0x20000018

08005384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005388:	f7ff fff0 	bl	800536c <HAL_RCC_GetHCLKFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4904      	ldr	r1, [pc, #16]	; (80053ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000
 80053ac:	080092f8 	.word	0x080092f8

080053b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053b4:	f7ff ffda 	bl	800536c <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	0adb      	lsrs	r3, r3, #11
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4904      	ldr	r1, [pc, #16]	; (80053d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000
 80053d8:	080092f8 	.word	0x080092f8

080053dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053e8:	4b2a      	ldr	r3, [pc, #168]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053f4:	f7ff f9c8 	bl	8004788 <HAL_PWREx_GetVoltageRange>
 80053f8:	6178      	str	r0, [r7, #20]
 80053fa:	e014      	b.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005400:	4a24      	ldr	r2, [pc, #144]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005406:	6593      	str	r3, [r2, #88]	; 0x58
 8005408:	4b22      	ldr	r3, [pc, #136]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005414:	f7ff f9b8 	bl	8004788 <HAL_PWREx_GetVoltageRange>
 8005418:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005424:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542c:	d10b      	bne.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d919      	bls.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2ba0      	cmp	r3, #160	; 0xa0
 8005438:	d902      	bls.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800543a:	2302      	movs	r3, #2
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	e013      	b.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005440:	2301      	movs	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e010      	b.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d902      	bls.n	8005452 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800544c:	2303      	movs	r3, #3
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e00a      	b.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b80      	cmp	r3, #128	; 0x80
 8005456:	d102      	bne.n	800545e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005458:	2302      	movs	r3, #2
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	e004      	b.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d101      	bne.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005464:	2301      	movs	r3, #1
 8005466:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 0207 	bic.w	r2, r3, #7
 8005470:	4909      	ldr	r1, [pc, #36]	; (8005498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d001      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	40022000 	.word	0x40022000

0800549c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054a4:	2300      	movs	r3, #0
 80054a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054a8:	2300      	movs	r3, #0
 80054aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d031      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054c0:	d01a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054c6:	d814      	bhi.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d0:	d10f      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80054d2:	4bac      	ldr	r3, [pc, #688]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4aab      	ldr	r2, [pc, #684]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054de:	e00c      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f9cc 	bl	8005884 <RCCEx_PLLSAI1_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f0:	e003      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	74fb      	strb	r3, [r7, #19]
      break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005500:	4ba0      	ldr	r3, [pc, #640]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550e:	499d      	ldr	r1, [pc, #628]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005516:	e001      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8099 	beq.w	800565c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800552e:	4b95      	ldr	r3, [pc, #596]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b8f      	ldr	r3, [pc, #572]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	4a8e      	ldr	r2, [pc, #568]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554e:	6593      	str	r3, [r2, #88]	; 0x58
 8005550:	4b8c      	ldr	r3, [pc, #560]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555c:	2301      	movs	r3, #1
 800555e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005560:	4b89      	ldr	r3, [pc, #548]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a88      	ldr	r2, [pc, #544]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800556c:	f7fc ff5e 	bl	800242c <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005572:	e009      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005574:	f7fc ff5a 	bl	800242c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d902      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	74fb      	strb	r3, [r7, #19]
        break;
 8005586:	e005      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005588:	4b7f      	ldr	r3, [pc, #508]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ef      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d155      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800559a:	4b7a      	ldr	r3, [pc, #488]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01e      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d019      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055b6:	4b73      	ldr	r3, [pc, #460]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c2:	4b70      	ldr	r3, [pc, #448]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	4a6e      	ldr	r2, [pc, #440]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d2:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	4a6a      	ldr	r2, [pc, #424]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055e2:	4a68      	ldr	r2, [pc, #416]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d016      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fc ff1a 	bl	800242c <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fa:	e00b      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fc ff16 	bl	800242c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d902      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	74fb      	strb	r3, [r7, #19]
            break;
 8005612:	e006      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005614:	4b5b      	ldr	r3, [pc, #364]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0ec      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005628:	4b56      	ldr	r3, [pc, #344]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	4953      	ldr	r1, [pc, #332]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005640:	7cfb      	ldrb	r3, [r7, #19]
 8005642:	74bb      	strb	r3, [r7, #18]
 8005644:	e001      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800564a:	7c7b      	ldrb	r3, [r7, #17]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005650:	4b4c      	ldr	r3, [pc, #304]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	4a4b      	ldr	r2, [pc, #300]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4943      	ldr	r1, [pc, #268]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800568a:	4b3e      	ldr	r3, [pc, #248]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f023 020c 	bic.w	r2, r3, #12
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	493a      	ldr	r1, [pc, #232]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ac:	4b35      	ldr	r3, [pc, #212]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	4932      	ldr	r1, [pc, #200]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ce:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	4929      	ldr	r1, [pc, #164]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056f0:	4b24      	ldr	r3, [pc, #144]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	4921      	ldr	r1, [pc, #132]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4918      	ldr	r1, [pc, #96]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005734:	4b13      	ldr	r3, [pc, #76]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4910      	ldr	r1, [pc, #64]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02c      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	4907      	ldr	r1, [pc, #28]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005774:	d10a      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005776:	4b03      	ldr	r3, [pc, #12]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	4a02      	ldr	r2, [pc, #8]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800577c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005780:	60d3      	str	r3, [r2, #12]
 8005782:	e015      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005784:	40021000 	.word	0x40021000
 8005788:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005794:	d10c      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	2101      	movs	r1, #1
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f871 	bl	8005884 <RCCEx_PLLSAI1_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057a6:	7cfb      	ldrb	r3, [r7, #19]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d028      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057bc:	4b30      	ldr	r3, [pc, #192]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	492d      	ldr	r1, [pc, #180]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057da:	d106      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057dc:	4b28      	ldr	r3, [pc, #160]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e6:	60d3      	str	r3, [r2, #12]
 80057e8:	e011      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f2:	d10c      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f842 	bl	8005884 <RCCEx_PLLSAI1_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01c      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800581a:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005828:	4915      	ldr	r1, [pc, #84]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005838:	d10c      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f81f 	bl	8005884 <RCCEx_PLLSAI1_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	4904      	ldr	r1, [pc, #16]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005876:	7cbb      	ldrb	r3, [r7, #18]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000

08005884 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005892:	4b74      	ldr	r3, [pc, #464]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800589e:	4b71      	ldr	r3, [pc, #452]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0203 	and.w	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d10d      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
       ||
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058b6:	4b6b      	ldr	r3, [pc, #428]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
       ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d047      	beq.n	800595a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	e044      	b.n	800595a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d018      	beq.n	800590a <RCCEx_PLLSAI1_Config+0x86>
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d825      	bhi.n	8005928 <RCCEx_PLLSAI1_Config+0xa4>
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d002      	beq.n	80058e6 <RCCEx_PLLSAI1_Config+0x62>
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d009      	beq.n	80058f8 <RCCEx_PLLSAI1_Config+0x74>
 80058e4:	e020      	b.n	8005928 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058e6:	4b5f      	ldr	r3, [pc, #380]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11d      	bne.n	800592e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f6:	e01a      	b.n	800592e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f8:	4b5a      	ldr	r3, [pc, #360]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005900:	2b00      	cmp	r3, #0
 8005902:	d116      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005908:	e013      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800590a:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005916:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005926:	e006      	b.n	8005936 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      break;
 800592c:	e004      	b.n	8005938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005936:	bf00      	nop
    }

    if(status == HAL_OK)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800593e:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	3b01      	subs	r3, #1
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	430b      	orrs	r3, r1
 8005954:	4943      	ldr	r1, [pc, #268]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005956:	4313      	orrs	r3, r2
 8005958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d17c      	bne.n	8005a5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005960:	4b40      	ldr	r3, [pc, #256]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800596a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596c:	f7fc fd5e 	bl	800242c <HAL_GetTick>
 8005970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005972:	e009      	b.n	8005988 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005974:	f7fc fd5a 	bl	800242c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d902      	bls.n	8005988 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	73fb      	strb	r3, [r7, #15]
        break;
 8005986:	e005      	b.n	8005994 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005988:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1ef      	bne.n	8005974 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d15f      	bne.n	8005a5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d110      	bne.n	80059c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a0:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6892      	ldr	r2, [r2, #8]
 80059b0:	0211      	lsls	r1, r2, #8
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68d2      	ldr	r2, [r2, #12]
 80059b6:	06d2      	lsls	r2, r2, #27
 80059b8:	430a      	orrs	r2, r1
 80059ba:	492a      	ldr	r1, [pc, #168]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	610b      	str	r3, [r1, #16]
 80059c0:	e027      	b.n	8005a12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d112      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c8:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6892      	ldr	r2, [r2, #8]
 80059d8:	0211      	lsls	r1, r2, #8
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6912      	ldr	r2, [r2, #16]
 80059de:	0852      	lsrs	r2, r2, #1
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0552      	lsls	r2, r2, #21
 80059e4:	430a      	orrs	r2, r1
 80059e6:	491f      	ldr	r1, [pc, #124]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	610b      	str	r3, [r1, #16]
 80059ec:	e011      	b.n	8005a12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ee:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	0211      	lsls	r1, r2, #8
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6952      	ldr	r2, [r2, #20]
 8005a04:	0852      	lsrs	r2, r2, #1
 8005a06:	3a01      	subs	r2, #1
 8005a08:	0652      	lsls	r2, r2, #25
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	4915      	ldr	r1, [pc, #84]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fc fd05 	bl	800242c <HAL_GetTick>
 8005a22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a24:	e009      	b.n	8005a3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a26:	f7fc fd01 	bl	800242c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d902      	bls.n	8005a3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	73fb      	strb	r3, [r7, #15]
          break;
 8005a38:	e005      	b.n	8005a46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0ef      	beq.n	8005a26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	4903      	ldr	r1, [pc, #12]	; (8005a64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40021000 	.word	0x40021000

08005a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e095      	b.n	8005ba6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8a:	d009      	beq.n	8005aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61da      	str	r2, [r3, #28]
 8005a92:	e005      	b.n	8005aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fc f8d8 	bl	8001c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ae0:	d902      	bls.n	8005ae8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e002      	b.n	8005aee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005af6:	d007      	beq.n	8005b08 <HAL_SPI_Init+0xa0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b00:	d002      	beq.n	8005b08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	ea42 0103 	orr.w	r1, r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	0c1b      	lsrs	r3, r3, #16
 8005b64:	f003 0204 	and.w	r2, r3, #4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b84:	ea42 0103 	orr.w	r1, r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_SPI_TransmitReceive_IT+0x20>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e091      	b.n	8005cf4 <HAL_SPI_TransmitReceive_IT+0x144>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bde:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005be6:	7dbb      	ldrb	r3, [r7, #22]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d00d      	beq.n	8005c08 <HAL_SPI_TransmitReceive_IT+0x58>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf2:	d106      	bne.n	8005c02 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <HAL_SPI_TransmitReceive_IT+0x52>
 8005bfc:	7dbb      	ldrb	r3, [r7, #22]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c06:	e070      	b.n	8005cea <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005c14:	887b      	ldrh	r3, [r7, #2]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c1e:	e064      	b.n	8005cea <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d003      	beq.n	8005c34 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2205      	movs	r2, #5
 8005c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	887a      	ldrh	r2, [r7, #2]
 8005c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	887a      	ldrh	r2, [r7, #2]
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	887a      	ldrh	r2, [r7, #2]
 8005c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6a:	d906      	bls.n	8005c7a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a24      	ldr	r2, [pc, #144]	; (8005d00 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005c70:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005c76:	651a      	str	r2, [r3, #80]	; 0x50
 8005c78:	e005      	b.n	8005c86 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005c7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c8e:	d802      	bhi.n	8005c96 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005c90:	887b      	ldrh	r3, [r7, #2]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d908      	bls.n	8005ca8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	e007      	b.n	8005cb8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005cc6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d008      	beq.n	8005ce8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e000      	b.n	8005cea <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005ce8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	080060b3 	.word	0x080060b3
 8005d04:	08006119 	.word	0x08006119
 8005d08:	08005f63 	.word	0x08005f63
 8005d0c:	08006021 	.word	0x08006021

08005d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10f      	bne.n	8005d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	099b      	lsrs	r3, r3, #6
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
    return;
 8005d52:	e0d7      	b.n	8005f04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_SPI_IRQHandler+0x66>
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
    return;
 8005d74:	e0c6      	b.n	8005f04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <HAL_SPI_IRQHandler+0x8c>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80b4 	beq.w	8005f04 <HAL_SPI_IRQHandler+0x1f4>
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80ad 	beq.w	8005f04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	099b      	lsrs	r3, r3, #6
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d023      	beq.n	8005dfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d011      	beq.n	8005de6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc6:	f043 0204 	orr.w	r2, r3, #4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	e00b      	b.n	8005dfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
        return;
 8005dfc:	e082      	b.n	8005f04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d014      	beq.n	8005e34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0e:	f043 0201 	orr.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00c      	beq.n	8005e5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e44:	f043 0208 	orr.w	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]
 8005e58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d04f      	beq.n	8005f02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <HAL_SPI_IRQHandler+0x17e>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d034      	beq.n	8005ef8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0203 	bic.w	r2, r2, #3
 8005e9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d011      	beq.n	8005eca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_SPI_IRQHandler+0x1fc>)
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe f9ac 	bl	8004210 <HAL_DMA_Abort_IT>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <HAL_SPI_IRQHandler+0x1fc>)
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe f996 	bl	8004210 <HAL_DMA_Abort_IT>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005ef6:	e003      	b.n	8005f00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f813 	bl	8005f24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005efe:	e000      	b.n	8005f02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f00:	bf00      	nop
    return;
 8005f02:	bf00      	nop
  }
}
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08005f39 	.word	0x08005f39

08005f10 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ffe5 	bl	8005f24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d923      	bls.n	8005fbe <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	b292      	uxth	r2, r2
 8005f82:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	1c9a      	adds	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b02      	subs	r3, #2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d11f      	bne.n	8005fec <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fba:	605a      	str	r2, [r3, #4]
 8005fbc:	e016      	b.n	8005fec <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f103 020c 	add.w	r2, r3, #12
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10f      	bne.n	8006018 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006006:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa14 	bl	8006440 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d912      	bls.n	8006058 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	1c9a      	adds	r2, r3, #2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b02      	subs	r3, #2
 8006050:	b29a      	uxth	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006056:	e012      	b.n	800607e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d110      	bne.n	80060aa <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006096:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9cb 	bl	8006440 <SPI_CloseRxTx_ISR>
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10f      	bne.n	8006110 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060fe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f998 	bl	8006440 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	881a      	ldrh	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	1c9a      	adds	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d110      	bne.n	8006170 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800615c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f968 	bl	8006440 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006188:	f7fc f950 	bl	800242c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	4413      	add	r3, r2
 8006196:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006198:	f7fc f948 	bl	800242c <HAL_GetTick>
 800619c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800619e:	4b39      	ldr	r3, [pc, #228]	; (8006284 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	015b      	lsls	r3, r3, #5
 80061a4:	0d1b      	lsrs	r3, r3, #20
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ae:	e054      	b.n	800625a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d050      	beq.n	800625a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061b8:	f7fc f938 	bl	800242c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d902      	bls.n	80061ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d13d      	bne.n	800624a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061e6:	d111      	bne.n	800620c <SPI_WaitFlagStateUntilTimeout+0x94>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f0:	d004      	beq.n	80061fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d107      	bne.n	800620c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d10f      	bne.n	8006236 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e017      	b.n	800627a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3b01      	subs	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4013      	ands	r3, r2
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	429a      	cmp	r2, r3
 8006276:	d19b      	bne.n	80061b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000018 	.word	0x20000018

08006288 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800629a:	f7fc f8c7 	bl	800242c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062aa:	f7fc f8bf 	bl	800242c <HAL_GetTick>
 80062ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062b8:	4b3d      	ldr	r3, [pc, #244]	; (80063b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	00da      	lsls	r2, r3, #3
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	0d1b      	lsrs	r3, r3, #20
 80062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062d0:	e060      	b.n	8006394 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062d8:	d107      	bne.n	80062ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d050      	beq.n	8006394 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f2:	f7fc f89b 	bl	800242c <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	429a      	cmp	r2, r3
 8006300:	d902      	bls.n	8006308 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d13d      	bne.n	8006384 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006316:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006320:	d111      	bne.n	8006346 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632a:	d004      	beq.n	8006336 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006334:	d107      	bne.n	8006346 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006344:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634e:	d10f      	bne.n	8006370 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800636e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e010      	b.n	80063a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	3b01      	subs	r3, #1
 8006392:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d196      	bne.n	80062d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3728      	adds	r7, #40	; 0x28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000018 	.word	0x20000018

080063b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ff5b 	bl	8006288 <SPI_WaitFifoStateUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e027      	b.n	8006438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	2180      	movs	r1, #128	; 0x80
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fec0 	bl	8006178 <SPI_WaitFlagStateUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e014      	b.n	8006438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff ff34 	bl	8006288 <SPI_WaitFifoStateUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e000      	b.n	8006438 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006448:	f7fb fff0 	bl	800242c <HAL_GetTick>
 800644c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0220 	bic.w	r2, r2, #32
 800645c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	2164      	movs	r1, #100	; 0x64
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff ffa6 	bl	80063b4 <SPI_EndRxTxTransaction>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006472:	f043 0220 	orr.w	r2, r3, #32
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647e:	2b00      	cmp	r3, #0
 8006480:	d115      	bne.n	80064ae <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b04      	cmp	r3, #4
 800648c:	d107      	bne.n	800649e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fd3a 	bl	8005f10 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800649c:	e00e      	b.n	80064bc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fa f93c 	bl	8000724 <HAL_SPI_TxRxCpltCallback>
}
 80064ac:	e006      	b.n	80064bc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fd34 	bl	8005f24 <HAL_SPI_ErrorCallback>
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d001      	beq.n	80064dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e03b      	b.n	8006554 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_TIM_Base_Start_IT+0x9c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x4e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006506:	d004      	beq.n	8006512 <HAL_TIM_Base_Start_IT+0x4e>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <HAL_TIM_Base_Start_IT+0xa0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d115      	bne.n	800653e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <HAL_TIM_Base_Start_IT+0xa4>)
 800651a:	4013      	ands	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b06      	cmp	r3, #6
 8006522:	d015      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x8c>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652a:	d011      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	e008      	b.n	8006550 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e000      	b.n	8006552 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40014000 	.word	0x40014000
 8006568:	00010007 	.word	0x00010007

0800656c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	f241 1311 	movw	r3, #4369	; 0x1111
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <HAL_TIM_Base_Stop_IT+0x48>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	f240 4344 	movw	r3, #1092	; 0x444
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_Base_Stop_IT+0x48>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e049      	b.n	8006670 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fb fb89 	bl	8001d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f000 fddb 	bl	80071c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start_IT+0x28>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e03c      	b.n	800671a <HAL_TIM_PWM_Start_IT+0xa2>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d109      	bne.n	80066ba <HAL_TIM_PWM_Start_IT+0x42>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	bf14      	ite	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	2300      	moveq	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	e02f      	b.n	800671a <HAL_TIM_PWM_Start_IT+0xa2>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d109      	bne.n	80066d4 <HAL_TIM_PWM_Start_IT+0x5c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e022      	b.n	800671a <HAL_TIM_PWM_Start_IT+0xa2>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b0c      	cmp	r3, #12
 80066d8:	d109      	bne.n	80066ee <HAL_TIM_PWM_Start_IT+0x76>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e015      	b.n	800671a <HAL_TIM_PWM_Start_IT+0xa2>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d109      	bne.n	8006708 <HAL_TIM_PWM_Start_IT+0x90>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e008      	b.n	800671a <HAL_TIM_PWM_Start_IT+0xa2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e0c9      	b.n	80068b6 <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <HAL_TIM_PWM_Start_IT+0xba>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006730:	e023      	b.n	800677a <HAL_TIM_PWM_Start_IT+0x102>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d104      	bne.n	8006742 <HAL_TIM_PWM_Start_IT+0xca>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006740:	e01b      	b.n	800677a <HAL_TIM_PWM_Start_IT+0x102>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b08      	cmp	r3, #8
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start_IT+0xda>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006750:	e013      	b.n	800677a <HAL_TIM_PWM_Start_IT+0x102>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b0c      	cmp	r3, #12
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start_IT+0xea>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006760:	e00b      	b.n	800677a <HAL_TIM_PWM_Start_IT+0x102>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b10      	cmp	r3, #16
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start_IT+0xfa>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	e003      	b.n	800677a <HAL_TIM_PWM_Start_IT+0x102>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d841      	bhi.n	8006804 <HAL_TIM_PWM_Start_IT+0x18c>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_TIM_PWM_Start_IT+0x110>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067bd 	.word	0x080067bd
 800678c:	08006805 	.word	0x08006805
 8006790:	08006805 	.word	0x08006805
 8006794:	08006805 	.word	0x08006805
 8006798:	080067cf 	.word	0x080067cf
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006805 	.word	0x08006805
 80067a4:	08006805 	.word	0x08006805
 80067a8:	080067e1 	.word	0x080067e1
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006805 	.word	0x08006805
 80067b8:	080067f3 	.word	0x080067f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0202 	orr.w	r2, r2, #2
 80067ca:	60da      	str	r2, [r3, #12]
      break;
 80067cc:	e01d      	b.n	800680a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0204 	orr.w	r2, r2, #4
 80067dc:	60da      	str	r2, [r3, #12]
      break;
 80067de:	e014      	b.n	800680a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0208 	orr.w	r2, r2, #8
 80067ee:	60da      	str	r2, [r3, #12]
      break;
 80067f0:	e00b      	b.n	800680a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0210 	orr.w	r2, r2, #16
 8006800:	60da      	str	r2, [r3, #12]
      break;
 8006802:	e002      	b.n	800680a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
      break;
 8006808:	bf00      	nop
  }

  if (status == HAL_OK)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d151      	bne.n	80068b4 <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2201      	movs	r2, #1
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 ffb5 	bl	8007788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a27      	ldr	r2, [pc, #156]	; (80068c0 <HAL_TIM_PWM_Start_IT+0x248>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d009      	beq.n	800683c <HAL_TIM_PWM_Start_IT+0x1c4>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a25      	ldr	r2, [pc, #148]	; (80068c4 <HAL_TIM_PWM_Start_IT+0x24c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d004      	beq.n	800683c <HAL_TIM_PWM_Start_IT+0x1c4>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a24      	ldr	r2, [pc, #144]	; (80068c8 <HAL_TIM_PWM_Start_IT+0x250>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_TIM_PWM_Start_IT+0x1c8>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006854:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <HAL_TIM_PWM_Start_IT+0x248>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_TIM_PWM_Start_IT+0x1fc>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006868:	d004      	beq.n	8006874 <HAL_TIM_PWM_Start_IT+0x1fc>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <HAL_TIM_PWM_Start_IT+0x24c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d115      	bne.n	80068a0 <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <HAL_TIM_PWM_Start_IT+0x254>)
 800687c:	4013      	ands	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b06      	cmp	r3, #6
 8006884:	d015      	beq.n	80068b2 <HAL_TIM_PWM_Start_IT+0x23a>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688c:	d011      	beq.n	80068b2 <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689e:	e008      	b.n	80068b2 <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e000      	b.n	80068b4 <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b0c      	cmp	r3, #12
 80068e2:	d841      	bhi.n	8006968 <HAL_TIM_PWM_Stop_IT+0x98>
 80068e4:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <HAL_TIM_PWM_Stop_IT+0x1c>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006921 	.word	0x08006921
 80068f0:	08006969 	.word	0x08006969
 80068f4:	08006969 	.word	0x08006969
 80068f8:	08006969 	.word	0x08006969
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006969 	.word	0x08006969
 8006904:	08006969 	.word	0x08006969
 8006908:	08006969 	.word	0x08006969
 800690c:	08006945 	.word	0x08006945
 8006910:	08006969 	.word	0x08006969
 8006914:	08006969 	.word	0x08006969
 8006918:	08006969 	.word	0x08006969
 800691c:	08006957 	.word	0x08006957
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0202 	bic.w	r2, r2, #2
 800692e:	60da      	str	r2, [r3, #12]
      break;
 8006930:	e01d      	b.n	800696e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0204 	bic.w	r2, r2, #4
 8006940:	60da      	str	r2, [r3, #12]
      break;
 8006942:	e014      	b.n	800696e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0208 	bic.w	r2, r2, #8
 8006952:	60da      	str	r2, [r3, #12]
      break;
 8006954:	e00b      	b.n	800696e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0210 	bic.w	r2, r2, #16
 8006964:	60da      	str	r2, [r3, #12]
      break;
 8006966:	e002      	b.n	800696e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	bf00      	nop
  }

  if (status == HAL_OK)
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d176      	bne.n	8006a62 <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 ff03 	bl	8007788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a39      	ldr	r2, [pc, #228]	; (8006a6c <HAL_TIM_PWM_Stop_IT+0x19c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_TIM_PWM_Stop_IT+0xd0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a37      	ldr	r2, [pc, #220]	; (8006a70 <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_TIM_PWM_Stop_IT+0xd0>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a36      	ldr	r2, [pc, #216]	; (8006a74 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d101      	bne.n	80069a4 <HAL_TIM_PWM_Stop_IT+0xd4>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_TIM_PWM_Stop_IT+0xd6>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d017      	beq.n	80069da <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10f      	bne.n	80069da <HAL_TIM_PWM_Stop_IT+0x10a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f240 4344 	movw	r3, #1092	; 0x444
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d107      	bne.n	80069da <HAL_TIM_PWM_Stop_IT+0x10a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <HAL_TIM_PWM_Stop_IT+0x13a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a1a      	ldr	r2, [r3, #32]
 80069f0:	f240 4344 	movw	r3, #1092	; 0x444
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <HAL_TIM_PWM_Stop_IT+0x13a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Stop_IT+0x14a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a18:	e023      	b.n	8006a62 <HAL_TIM_PWM_Stop_IT+0x192>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_PWM_Stop_IT+0x15a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a28:	e01b      	b.n	8006a62 <HAL_TIM_PWM_Stop_IT+0x192>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_PWM_Stop_IT+0x16a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a38:	e013      	b.n	8006a62 <HAL_TIM_PWM_Stop_IT+0x192>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b0c      	cmp	r3, #12
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Stop_IT+0x17a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a48:	e00b      	b.n	8006a62 <HAL_TIM_PWM_Stop_IT+0x192>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_PWM_Stop_IT+0x18a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a58:	e003      	b.n	8006a62 <HAL_TIM_PWM_Stop_IT+0x192>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400

08006a78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e097      	b.n	8006bbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fb f957 	bl	8001d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006abc:	f023 0307 	bic.w	r3, r3, #7
 8006ac0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4619      	mov	r1, r3
 8006acc:	4610      	mov	r0, r2
 8006ace:	f000 fb79 	bl	80071c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b18:	f023 030c 	bic.w	r3, r3, #12
 8006b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	4313      	orrs	r3, r2
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	011a      	lsls	r2, r3, #4
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	031b      	lsls	r3, r3, #12
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006be4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d110      	bne.n	8006c16 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d102      	bne.n	8006c00 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e089      	b.n	8006d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c14:	e031      	b.n	8006c7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d110      	bne.n	8006c3e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d102      	bne.n	8006c28 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c22:	7b3b      	ldrb	r3, [r7, #12]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e075      	b.n	8006d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c3c:	e01d      	b.n	8006c7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d108      	bne.n	8006c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d105      	bne.n	8006c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c4a:	7b7b      	ldrb	r3, [r7, #13]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d102      	bne.n	8006c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c50:	7b3b      	ldrb	r3, [r7, #12]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d001      	beq.n	8006c5a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e05e      	b.n	8006d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2202      	movs	r2, #2
 8006c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d010      	beq.n	8006ca8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006c86:	e01f      	b.n	8006cc8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fd79 	bl	8007788 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0202 	orr.w	r2, r2, #2
 8006ca4:	60da      	str	r2, [r3, #12]
      break;
 8006ca6:	e02e      	b.n	8006d06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2201      	movs	r2, #1
 8006cae:	2104      	movs	r1, #4
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fd69 	bl	8007788 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0204 	orr.w	r2, r2, #4
 8006cc4:	60da      	str	r2, [r3, #12]
      break;
 8006cc6:	e01e      	b.n	8006d06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fd59 	bl	8007788 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	2104      	movs	r1, #4
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fd52 	bl	8007788 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0202 	orr.w	r2, r2, #2
 8006cf2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0204 	orr.w	r2, r2, #4
 8006d02:	60da      	str	r2, [r3, #12]
      break;
 8006d04:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d122      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d11b      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0202 	mvn.w	r2, #2
 8006d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fa f990 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 8006d68:	e005      	b.n	8006d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fa0c 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa13 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0204 	mvn.w	r2, #4
 8006da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fa f966 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f9e2 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f9e9 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0208 	mvn.w	r2, #8
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa f93c 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9b8 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f9bf 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0210 	mvn.w	r2, #16
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fa f912 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f98e 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f995 	bl	800719c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d10e      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d107      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0201 	mvn.w	r2, #1
 8006e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fa f904 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eae:	2b80      	cmp	r3, #128	; 0x80
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	2b80      	cmp	r3, #128	; 0x80
 8006ebe:	d107      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fee0 	bl	8007c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ede:	d10e      	bne.n	8006efe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d107      	bne.n	8006efe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fed3 	bl	8007ca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d10e      	bne.n	8006f2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d107      	bne.n	8006f2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f943 	bl	80071b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d10e      	bne.n	8006f56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d107      	bne.n	8006f56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0220 	mvn.w	r2, #32
 8006f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fe93 	bl	8007c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e0ff      	b.n	800717e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b14      	cmp	r3, #20
 8006f8a:	f200 80f0 	bhi.w	800716e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f8e:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	0800716f 	.word	0x0800716f
 8006f9c:	0800716f 	.word	0x0800716f
 8006fa0:	0800716f 	.word	0x0800716f
 8006fa4:	08007029 	.word	0x08007029
 8006fa8:	0800716f 	.word	0x0800716f
 8006fac:	0800716f 	.word	0x0800716f
 8006fb0:	0800716f 	.word	0x0800716f
 8006fb4:	0800706b 	.word	0x0800706b
 8006fb8:	0800716f 	.word	0x0800716f
 8006fbc:	0800716f 	.word	0x0800716f
 8006fc0:	0800716f 	.word	0x0800716f
 8006fc4:	080070ab 	.word	0x080070ab
 8006fc8:	0800716f 	.word	0x0800716f
 8006fcc:	0800716f 	.word	0x0800716f
 8006fd0:	0800716f 	.word	0x0800716f
 8006fd4:	080070ed 	.word	0x080070ed
 8006fd8:	0800716f 	.word	0x0800716f
 8006fdc:	0800716f 	.word	0x0800716f
 8006fe0:	0800716f 	.word	0x0800716f
 8006fe4:	0800712d 	.word	0x0800712d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f94c 	bl	800728c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0208 	orr.w	r2, r2, #8
 8007002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0204 	bic.w	r2, r2, #4
 8007012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6999      	ldr	r1, [r3, #24]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	619a      	str	r2, [r3, #24]
      break;
 8007026:	e0a5      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f9a8 	bl	8007384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6999      	ldr	r1, [r3, #24]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	021a      	lsls	r2, r3, #8
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	619a      	str	r2, [r3, #24]
      break;
 8007068:	e084      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fa01 	bl	8007478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0208 	orr.w	r2, r2, #8
 8007084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0204 	bic.w	r2, r2, #4
 8007094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69d9      	ldr	r1, [r3, #28]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	61da      	str	r2, [r3, #28]
      break;
 80070a8:	e064      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fa59 	bl	8007568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69da      	ldr	r2, [r3, #28]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69d9      	ldr	r1, [r3, #28]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	021a      	lsls	r2, r3, #8
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	61da      	str	r2, [r3, #28]
      break;
 80070ea:	e043      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fa96 	bl	8007624 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0208 	orr.w	r2, r2, #8
 8007106:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0204 	bic.w	r2, r2, #4
 8007116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800712a:	e023      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 face 	bl	80076d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	021a      	lsls	r2, r3, #8
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800716c:	e002      	b.n	8007174 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	75fb      	strb	r3, [r7, #23]
      break;
 8007172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop

08007188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <TIM_Base_SetConfig+0xbc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_Base_SetConfig+0x20>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e2:	d108      	bne.n	80071f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a21      	ldr	r2, [pc, #132]	; (8007280 <TIM_Base_SetConfig+0xbc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00b      	beq.n	8007216 <TIM_Base_SetConfig+0x52>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007204:	d007      	beq.n	8007216 <TIM_Base_SetConfig+0x52>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <TIM_Base_SetConfig+0xc0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d003      	beq.n	8007216 <TIM_Base_SetConfig+0x52>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <TIM_Base_SetConfig+0xc4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d108      	bne.n	8007228 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <TIM_Base_SetConfig+0xbc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <TIM_Base_SetConfig+0xa0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a0b      	ldr	r2, [pc, #44]	; (8007284 <TIM_Base_SetConfig+0xc0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_Base_SetConfig+0xa0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a0a      	ldr	r2, [pc, #40]	; (8007288 <TIM_Base_SetConfig+0xc4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d103      	bne.n	800726c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	615a      	str	r2, [r3, #20]
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40012c00 	.word	0x40012c00
 8007284:	40014000 	.word	0x40014000
 8007288:	40014400 	.word	0x40014400

0800728c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0201 	bic.w	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0303 	bic.w	r3, r3, #3
 80072c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f023 0302 	bic.w	r3, r3, #2
 80072d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a24      	ldr	r2, [pc, #144]	; (8007378 <TIM_OC1_SetConfig+0xec>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d007      	beq.n	80072fc <TIM_OC1_SetConfig+0x70>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a23      	ldr	r2, [pc, #140]	; (800737c <TIM_OC1_SetConfig+0xf0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d003      	beq.n	80072fc <TIM_OC1_SetConfig+0x70>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_OC1_SetConfig+0xf4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d10c      	bne.n	8007316 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0308 	bic.w	r3, r3, #8
 8007302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f023 0304 	bic.w	r3, r3, #4
 8007314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a17      	ldr	r2, [pc, #92]	; (8007378 <TIM_OC1_SetConfig+0xec>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d007      	beq.n	800732e <TIM_OC1_SetConfig+0xa2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a16      	ldr	r2, [pc, #88]	; (800737c <TIM_OC1_SetConfig+0xf0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <TIM_OC1_SetConfig+0xa2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <TIM_OC1_SetConfig+0xf4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d111      	bne.n	8007352 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800733c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400

08007384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0210 	bic.w	r2, r3, #16
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0320 	bic.w	r3, r3, #32
 80073d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a22      	ldr	r2, [pc, #136]	; (800746c <TIM_OC2_SetConfig+0xe8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d10d      	bne.n	8007404 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a19      	ldr	r2, [pc, #100]	; (800746c <TIM_OC2_SetConfig+0xe8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_OC2_SetConfig+0x98>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a18      	ldr	r2, [pc, #96]	; (8007470 <TIM_OC2_SetConfig+0xec>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_OC2_SetConfig+0x98>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a17      	ldr	r2, [pc, #92]	; (8007474 <TIM_OC2_SetConfig+0xf0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d113      	bne.n	8007444 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800742a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	621a      	str	r2, [r3, #32]
}
 800745e:	bf00      	nop
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40014000 	.word	0x40014000
 8007474:	40014400 	.word	0x40014400

08007478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a21      	ldr	r2, [pc, #132]	; (800755c <TIM_OC3_SetConfig+0xe4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d10d      	bne.n	80074f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a18      	ldr	r2, [pc, #96]	; (800755c <TIM_OC3_SetConfig+0xe4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_OC3_SetConfig+0x96>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a17      	ldr	r2, [pc, #92]	; (8007560 <TIM_OC3_SetConfig+0xe8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0x96>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a16      	ldr	r2, [pc, #88]	; (8007564 <TIM_OC3_SetConfig+0xec>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d113      	bne.n	8007536 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	621a      	str	r2, [r3, #32]
}
 8007550:	bf00      	nop
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40014000 	.word	0x40014000
 8007564:	40014400 	.word	0x40014400

08007568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	031b      	lsls	r3, r3, #12
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a14      	ldr	r2, [pc, #80]	; (8007618 <TIM_OC4_SetConfig+0xb0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d007      	beq.n	80075dc <TIM_OC4_SetConfig+0x74>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a13      	ldr	r2, [pc, #76]	; (800761c <TIM_OC4_SetConfig+0xb4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_OC4_SetConfig+0x74>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a12      	ldr	r2, [pc, #72]	; (8007620 <TIM_OC4_SetConfig+0xb8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d109      	bne.n	80075f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	019b      	lsls	r3, r3, #6
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40014000 	.word	0x40014000
 8007620:	40014400 	.word	0x40014400

08007624 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <TIM_OC5_SetConfig+0xa4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d007      	beq.n	800768e <TIM_OC5_SetConfig+0x6a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a12      	ldr	r2, [pc, #72]	; (80076cc <TIM_OC5_SetConfig+0xa8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d003      	beq.n	800768e <TIM_OC5_SetConfig+0x6a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <TIM_OC5_SetConfig+0xac>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d109      	bne.n	80076a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400

080076d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	051b      	lsls	r3, r3, #20
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a14      	ldr	r2, [pc, #80]	; (800777c <TIM_OC6_SetConfig+0xa8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC6_SetConfig+0x6c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a13      	ldr	r2, [pc, #76]	; (8007780 <TIM_OC6_SetConfig+0xac>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC6_SetConfig+0x6c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a12      	ldr	r2, [pc, #72]	; (8007784 <TIM_OC6_SetConfig+0xb0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d109      	bne.n	8007754 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400

08007788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 031f 	and.w	r3, r3, #31
 800779a:	2201      	movs	r2, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1a      	ldr	r2, [r3, #32]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1a      	ldr	r2, [r3, #32]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <HAL_TIMEx_PWMN_Start_IT+0x28>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	bf14      	ite	ne
 80077f4:	2301      	movne	r3, #1
 80077f6:	2300      	moveq	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	e022      	b.n	8007842 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d109      	bne.n	8007816 <HAL_TIMEx_PWMN_Start_IT+0x42>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	e015      	b.n	8007842 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d109      	bne.n	8007830 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e008      	b.n	8007842 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b01      	cmp	r3, #1
 800783a:	bf14      	ite	ne
 800783c:	2301      	movne	r3, #1
 800783e:	2300      	moveq	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e090      	b.n	800796c <HAL_TIMEx_PWMN_Start_IT+0x198>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <HAL_TIMEx_PWMN_Start_IT+0x86>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007858:	e013      	b.n	8007882 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b04      	cmp	r3, #4
 800785e:	d104      	bne.n	800786a <HAL_TIMEx_PWMN_Start_IT+0x96>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007868:	e00b      	b.n	8007882 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b08      	cmp	r3, #8
 800786e:	d104      	bne.n	800787a <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007878:	e003      	b.n	8007882 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d01b      	beq.n	80078c0 <HAL_TIMEx_PWMN_Start_IT+0xec>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b08      	cmp	r3, #8
 800788c:	d821      	bhi.n	80078d2 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_TIMEx_PWMN_Start_IT+0xc8>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b04      	cmp	r3, #4
 8007898:	d009      	beq.n	80078ae <HAL_TIMEx_PWMN_Start_IT+0xda>
 800789a:	e01a      	b.n	80078d2 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0202 	orr.w	r2, r2, #2
 80078aa:	60da      	str	r2, [r3, #12]
      break;
 80078ac:	e014      	b.n	80078d8 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0204 	orr.w	r2, r2, #4
 80078bc:	60da      	str	r2, [r3, #12]
      break;
 80078be:	e00b      	b.n	80078d8 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0208 	orr.w	r2, r2, #8
 80078ce:	60da      	str	r2, [r3, #12]
      break;
 80078d0:	e002      	b.n	80078d8 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
      break;
 80078d6:	bf00      	nop
  }

  if (status == HAL_OK)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d145      	bne.n	800796a <HAL_TIMEx_PWMN_Start_IT+0x196>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078ec:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2204      	movs	r2, #4
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f9de 	bl	8007cb8 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800790a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a18      	ldr	r2, [pc, #96]	; (8007974 <HAL_TIMEx_PWMN_Start_IT+0x1a0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d009      	beq.n	800792a <HAL_TIMEx_PWMN_Start_IT+0x156>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791e:	d004      	beq.n	800792a <HAL_TIMEx_PWMN_Start_IT+0x156>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a14      	ldr	r2, [pc, #80]	; (8007978 <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d115      	bne.n	8007956 <HAL_TIMEx_PWMN_Start_IT+0x182>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 8007932:	4013      	ands	r3, r2
 8007934:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b06      	cmp	r3, #6
 800793a:	d015      	beq.n	8007968 <HAL_TIMEx_PWMN_Start_IT+0x194>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007942:	d011      	beq.n	8007968 <HAL_TIMEx_PWMN_Start_IT+0x194>
      {
        __HAL_TIM_ENABLE(htim);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007954:	e008      	b.n	8007968 <HAL_TIMEx_PWMN_Start_IT+0x194>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0201 	orr.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e000      	b.n	800796a <HAL_TIMEx_PWMN_Start_IT+0x196>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007968:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40014000 	.word	0x40014000
 800797c:	00010007 	.word	0x00010007

08007980 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b08      	cmp	r3, #8
 8007992:	d01b      	beq.n	80079cc <HAL_TIMEx_PWMN_Stop_IT+0x4c>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b08      	cmp	r3, #8
 8007998:	d821      	bhi.n	80079de <HAL_TIMEx_PWMN_Stop_IT+0x5e>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_TIMEx_PWMN_Stop_IT+0x28>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d009      	beq.n	80079ba <HAL_TIMEx_PWMN_Stop_IT+0x3a>
 80079a6:	e01a      	b.n	80079de <HAL_TIMEx_PWMN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0202 	bic.w	r2, r2, #2
 80079b6:	60da      	str	r2, [r3, #12]
      break;
 80079b8:	e014      	b.n	80079e4 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0204 	bic.w	r2, r2, #4
 80079c8:	60da      	str	r2, [r3, #12]
      break;
 80079ca:	e00b      	b.n	80079e4 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0208 	bic.w	r2, r2, #8
 80079da:	60da      	str	r2, [r3, #12]
      break;
 80079dc:	e002      	b.n	80079e4 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
      break;
 80079e2:	bf00      	nop
  }

  if (status == HAL_OK)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d164      	bne.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x134>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f960 	bl	8007cb8 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	f240 4344 	movw	r3, #1092	; 0x444
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d107      	bne.n	8007a1c <HAL_TIMEx_PWMN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a1a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6a1a      	ldr	r2, [r3, #32]
 8007a22:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10f      	bne.n	8007a4c <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a1a      	ldr	r2, [r3, #32]
 8007a32:	f240 4344 	movw	r3, #1092	; 0x444
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d107      	bne.n	8007a4c <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10f      	bne.n	8007a7c <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	f240 4344 	movw	r3, #1092	; 0x444
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d107      	bne.n	8007a7c <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <HAL_TIMEx_PWMN_Stop_IT+0x10c>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a8a:	e013      	b.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d104      	bne.n	8007a9c <HAL_TIMEx_PWMN_Stop_IT+0x11c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a9a:	e00b      	b.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d104      	bne.n	8007aac <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aaa:	e003      	b.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e04f      	b.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a21      	ldr	r2, [pc, #132]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d108      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b40:	d004      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a10      	ldr	r2, [pc, #64]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d10c      	bne.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40014000 	.word	0x40014000

08007b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e060      	b.n	8007c6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a14      	ldr	r2, [pc, #80]	; (8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d115      	bne.n	8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	051b      	lsls	r3, r3, #20
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00

08007c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2204      	movs	r2, #4
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	401a      	ands	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a1a      	ldr	r2, [r3, #32]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e040      	b.n	8007d96 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7fa f8b3 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2224      	movs	r2, #36	; 0x24
 8007d2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fc1f 	bl	8008584 <UART_SetConfig>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e022      	b.n	8007d96 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fe1d 	bl	8008998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fea4 	bl	8008adc <UART_CheckIdleState>
 8007d94:	4603      	mov	r3, r0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d178      	bne.n	8007ea8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <HAL_UART_Transmit_DMA+0x22>
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e071      	b.n	8007eaa <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Transmit_DMA+0x34>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e06a      	b.n	8007eaa <HAL_UART_Transmit_DMA+0x10a>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	88fa      	ldrh	r2, [r7, #6]
 8007de6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2221      	movs	r2, #33	; 0x21
 8007dfe:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d02b      	beq.n	8007e60 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0c:	4a29      	ldr	r2, [pc, #164]	; (8007eb4 <HAL_UART_Transmit_DMA+0x114>)
 8007e0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e14:	4a28      	ldr	r2, [pc, #160]	; (8007eb8 <HAL_UART_Transmit_DMA+0x118>)
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	4a27      	ldr	r2, [pc, #156]	; (8007ebc <HAL_UART_Transmit_DMA+0x11c>)
 8007e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	2200      	movs	r2, #0
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e30:	4619      	mov	r1, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3328      	adds	r3, #40	; 0x28
 8007e38:	461a      	mov	r2, r3
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	f7fc f94a 	bl	80040d4 <HAL_DMA_Start_IT>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00c      	beq.n	8007e60 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2210      	movs	r2, #16
 8007e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e024      	b.n	8007eaa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2240      	movs	r2, #64	; 0x40
 8007e66:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e90:	623a      	str	r2, [r7, #32]
 8007e92:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	69f9      	ldr	r1, [r7, #28]
 8007e96:	6a3a      	ldr	r2, [r7, #32]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e5      	bne.n	8007e70 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e000      	b.n	8007eaa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08008f57 	.word	0x08008f57
 8007eb8:	08008ff1 	.word	0x08008ff1
 8007ebc:	08009169 	.word	0x08009169

08007ec0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d142      	bne.n	8007f5c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_UART_Receive_DMA+0x22>
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e03b      	b.n	8007f5e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Receive_DMA+0x34>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e034      	b.n	8007f5e <HAL_UART_Receive_DMA+0x9e>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <HAL_UART_Receive_DMA+0xa8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d01f      	beq.n	8007f4c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d018      	beq.n	8007f4c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	613b      	str	r3, [r7, #16]
   return(result);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	69f9      	ldr	r1, [r7, #28]
 8007f3e:	6a3a      	ldr	r2, [r7, #32]
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e6      	bne.n	8007f1a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fed0 	bl	8008cf8 <UART_Start_Receive_DMA>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	e000      	b.n	8007f5e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
  }
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3728      	adds	r7, #40	; 0x28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40008000 	.word	0x40008000

08007f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b0ba      	sub	sp, #232	; 0xe8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f96:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00f      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 82a6 	beq.w	8008516 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
      }
      return;
 8007fd2:	e2a0      	b.n	8008516 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8117 	beq.w	800820c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007fee:	4b85      	ldr	r3, [pc, #532]	; (8008204 <HAL_UART_IRQHandler+0x298>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 810a 	beq.w	800820c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d011      	beq.n	8008028 <HAL_UART_IRQHandler+0xbc>
 8008004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d011      	beq.n	8008058 <HAL_UART_IRQHandler+0xec>
 8008034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2202      	movs	r2, #2
 8008046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d011      	beq.n	8008088 <HAL_UART_IRQHandler+0x11c>
 8008064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2204      	movs	r2, #4
 8008076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800807e:	f043 0202 	orr.w	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d017      	beq.n	80080c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2208      	movs	r2, #8
 80080b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ba:	f043 0208 	orr.w	r2, r3, #8
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d012      	beq.n	80080f6 <HAL_UART_IRQHandler+0x18a>
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 820c 	beq.w	800851a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800810e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d005      	beq.n	800814e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008146:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800814a:	2b00      	cmp	r3, #0
 800814c:	d04f      	beq.n	80081ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fe9e 	bl	8008e90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d141      	bne.n	80081e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800817c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3308      	adds	r3, #8
 800818a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800818e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800819a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1d9      	bne.n	8008162 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d013      	beq.n	80081de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ba:	4a13      	ldr	r2, [pc, #76]	; (8008208 <HAL_UART_IRQHandler+0x29c>)
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fc f824 	bl	8004210 <HAL_DMA_Abort_IT>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d017      	beq.n	80081fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081dc:	e00f      	b.n	80081fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7f9 fc08 	bl	80019f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e4:	e00b      	b.n	80081fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7f9 fc04 	bl	80019f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ec:	e007      	b.n	80081fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7f9 fc00 	bl	80019f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80081fc:	e18d      	b.n	800851a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081fe:	bf00      	nop
    return;
 8008200:	e18b      	b.n	800851a <HAL_UART_IRQHandler+0x5ae>
 8008202:	bf00      	nop
 8008204:	04000120 	.word	0x04000120
 8008208:	080091e5 	.word	0x080091e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008210:	2b01      	cmp	r3, #1
 8008212:	f040 8146 	bne.w	80084a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 813f 	beq.w	80084a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8138 	beq.w	80084a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2210      	movs	r2, #16
 8008238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008244:	2b40      	cmp	r3, #64	; 0x40
 8008246:	f040 80b4 	bne.w	80083b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008256:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 815f 	beq.w	800851e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800826a:	429a      	cmp	r2, r3
 800826c:	f080 8157 	bcs.w	800851e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008276:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	f040 8085 	bne.w	8008396 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1da      	bne.n	800828c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800830c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e1      	bne.n	80082d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800833c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e3      	bne.n	8008312 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2220      	movs	r2, #32
 800834e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008366:	f023 0310 	bic.w	r3, r3, #16
 800836a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008378:	65bb      	str	r3, [r7, #88]	; 0x58
 800837a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800837e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e4      	bne.n	8008356 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	4618      	mov	r0, r3
 8008392:	f7fb feff 	bl	8004194 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8de 	bl	800856c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083b0:	e0b5      	b.n	800851e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80a7 	beq.w	8008522 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80083d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 80a2 	beq.w	8008522 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008400:	647b      	str	r3, [r7, #68]	; 0x44
 8008402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e4      	bne.n	80083de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	623b      	str	r3, [r7, #32]
   return(result);
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f023 0301 	bic.w	r3, r3, #1
 800842a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008438:	633a      	str	r2, [r7, #48]	; 0x30
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800843e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e3      	bne.n	8008414 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60fb      	str	r3, [r7, #12]
   return(result);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	69b9      	ldr	r1, [r7, #24]
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	617b      	str	r3, [r7, #20]
   return(result);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f866 	bl	800856c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084a0:	e03f      	b.n	8008522 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00e      	beq.n	80084cc <HAL_UART_IRQHandler+0x560>
 80084ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fecd 	bl	8009264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ca:	e02d      	b.n	8008528 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01c      	beq.n	8008526 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
    }
    return;
 80084f4:	e017      	b.n	8008526 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d012      	beq.n	8008528 <HAL_UART_IRQHandler+0x5bc>
 8008502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fe7e 	bl	8009210 <UART_EndTransmit_IT>
    return;
 8008514:	e008      	b.n	8008528 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008516:	bf00      	nop
 8008518:	e006      	b.n	8008528 <HAL_UART_IRQHandler+0x5bc>
    return;
 800851a:	bf00      	nop
 800851c:	e004      	b.n	8008528 <HAL_UART_IRQHandler+0x5bc>
      return;
 800851e:	bf00      	nop
 8008520:	e002      	b.n	8008528 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008522:	bf00      	nop
 8008524:	e000      	b.n	8008528 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008526:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008528:	37e8      	adds	r7, #232	; 0xe8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop

08008530 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008584:	b5b0      	push	{r4, r5, r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4baf      	ldr	r3, [pc, #700]	; (800886c <UART_SetConfig+0x2e8>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	69f9      	ldr	r1, [r7, #28]
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4aa4      	ldr	r2, [pc, #656]	; (8008870 <UART_SetConfig+0x2ec>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d004      	beq.n	80085ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a9b      	ldr	r2, [pc, #620]	; (8008874 <UART_SetConfig+0x2f0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d121      	bne.n	800864e <UART_SetConfig+0xca>
 800860a:	4b9b      	ldr	r3, [pc, #620]	; (8008878 <UART_SetConfig+0x2f4>)
 800860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008610:	f003 0303 	and.w	r3, r3, #3
 8008614:	2b03      	cmp	r3, #3
 8008616:	d817      	bhi.n	8008648 <UART_SetConfig+0xc4>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <UART_SetConfig+0x9c>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008631 	.word	0x08008631
 8008624:	0800863d 	.word	0x0800863d
 8008628:	08008637 	.word	0x08008637
 800862c:	08008643 	.word	0x08008643
 8008630:	2301      	movs	r3, #1
 8008632:	76fb      	strb	r3, [r7, #27]
 8008634:	e070      	b.n	8008718 <UART_SetConfig+0x194>
 8008636:	2302      	movs	r3, #2
 8008638:	76fb      	strb	r3, [r7, #27]
 800863a:	e06d      	b.n	8008718 <UART_SetConfig+0x194>
 800863c:	2304      	movs	r3, #4
 800863e:	76fb      	strb	r3, [r7, #27]
 8008640:	e06a      	b.n	8008718 <UART_SetConfig+0x194>
 8008642:	2308      	movs	r3, #8
 8008644:	76fb      	strb	r3, [r7, #27]
 8008646:	e067      	b.n	8008718 <UART_SetConfig+0x194>
 8008648:	2310      	movs	r3, #16
 800864a:	76fb      	strb	r3, [r7, #27]
 800864c:	e064      	b.n	8008718 <UART_SetConfig+0x194>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a8a      	ldr	r2, [pc, #552]	; (800887c <UART_SetConfig+0x2f8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d132      	bne.n	80086be <UART_SetConfig+0x13a>
 8008658:	4b87      	ldr	r3, [pc, #540]	; (8008878 <UART_SetConfig+0x2f4>)
 800865a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865e:	f003 030c 	and.w	r3, r3, #12
 8008662:	2b0c      	cmp	r3, #12
 8008664:	d828      	bhi.n	80086b8 <UART_SetConfig+0x134>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0xe8>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086a1 	.word	0x080086a1
 8008670:	080086b9 	.word	0x080086b9
 8008674:	080086b9 	.word	0x080086b9
 8008678:	080086b9 	.word	0x080086b9
 800867c:	080086ad 	.word	0x080086ad
 8008680:	080086b9 	.word	0x080086b9
 8008684:	080086b9 	.word	0x080086b9
 8008688:	080086b9 	.word	0x080086b9
 800868c:	080086a7 	.word	0x080086a7
 8008690:	080086b9 	.word	0x080086b9
 8008694:	080086b9 	.word	0x080086b9
 8008698:	080086b9 	.word	0x080086b9
 800869c:	080086b3 	.word	0x080086b3
 80086a0:	2300      	movs	r3, #0
 80086a2:	76fb      	strb	r3, [r7, #27]
 80086a4:	e038      	b.n	8008718 <UART_SetConfig+0x194>
 80086a6:	2302      	movs	r3, #2
 80086a8:	76fb      	strb	r3, [r7, #27]
 80086aa:	e035      	b.n	8008718 <UART_SetConfig+0x194>
 80086ac:	2304      	movs	r3, #4
 80086ae:	76fb      	strb	r3, [r7, #27]
 80086b0:	e032      	b.n	8008718 <UART_SetConfig+0x194>
 80086b2:	2308      	movs	r3, #8
 80086b4:	76fb      	strb	r3, [r7, #27]
 80086b6:	e02f      	b.n	8008718 <UART_SetConfig+0x194>
 80086b8:	2310      	movs	r3, #16
 80086ba:	76fb      	strb	r3, [r7, #27]
 80086bc:	e02c      	b.n	8008718 <UART_SetConfig+0x194>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a6b      	ldr	r2, [pc, #428]	; (8008870 <UART_SetConfig+0x2ec>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d125      	bne.n	8008714 <UART_SetConfig+0x190>
 80086c8:	4b6b      	ldr	r3, [pc, #428]	; (8008878 <UART_SetConfig+0x2f4>)
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086d6:	d017      	beq.n	8008708 <UART_SetConfig+0x184>
 80086d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086dc:	d817      	bhi.n	800870e <UART_SetConfig+0x18a>
 80086de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e2:	d00b      	beq.n	80086fc <UART_SetConfig+0x178>
 80086e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e8:	d811      	bhi.n	800870e <UART_SetConfig+0x18a>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <UART_SetConfig+0x172>
 80086ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f2:	d006      	beq.n	8008702 <UART_SetConfig+0x17e>
 80086f4:	e00b      	b.n	800870e <UART_SetConfig+0x18a>
 80086f6:	2300      	movs	r3, #0
 80086f8:	76fb      	strb	r3, [r7, #27]
 80086fa:	e00d      	b.n	8008718 <UART_SetConfig+0x194>
 80086fc:	2302      	movs	r3, #2
 80086fe:	76fb      	strb	r3, [r7, #27]
 8008700:	e00a      	b.n	8008718 <UART_SetConfig+0x194>
 8008702:	2304      	movs	r3, #4
 8008704:	76fb      	strb	r3, [r7, #27]
 8008706:	e007      	b.n	8008718 <UART_SetConfig+0x194>
 8008708:	2308      	movs	r3, #8
 800870a:	76fb      	strb	r3, [r7, #27]
 800870c:	e004      	b.n	8008718 <UART_SetConfig+0x194>
 800870e:	2310      	movs	r3, #16
 8008710:	76fb      	strb	r3, [r7, #27]
 8008712:	e001      	b.n	8008718 <UART_SetConfig+0x194>
 8008714:	2310      	movs	r3, #16
 8008716:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a54      	ldr	r2, [pc, #336]	; (8008870 <UART_SetConfig+0x2ec>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d173      	bne.n	800880a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008722:	7efb      	ldrb	r3, [r7, #27]
 8008724:	2b08      	cmp	r3, #8
 8008726:	d824      	bhi.n	8008772 <UART_SetConfig+0x1ee>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <UART_SetConfig+0x1ac>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008755 	.word	0x08008755
 8008734:	08008773 	.word	0x08008773
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008773 	.word	0x08008773
 8008740:	08008763 	.word	0x08008763
 8008744:	08008773 	.word	0x08008773
 8008748:	08008773 	.word	0x08008773
 800874c:	08008773 	.word	0x08008773
 8008750:	0800876b 	.word	0x0800876b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008754:	f7fc fe16 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8008758:	6178      	str	r0, [r7, #20]
        break;
 800875a:	e00f      	b.n	800877c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800875c:	4b48      	ldr	r3, [pc, #288]	; (8008880 <UART_SetConfig+0x2fc>)
 800875e:	617b      	str	r3, [r7, #20]
        break;
 8008760:	e00c      	b.n	800877c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008762:	f7fc fd77 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8008766:	6178      	str	r0, [r7, #20]
        break;
 8008768:	e008      	b.n	800877c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800876e:	617b      	str	r3, [r7, #20]
        break;
 8008770:	e004      	b.n	800877c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	76bb      	strb	r3, [r7, #26]
        break;
 800877a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 80fc 	beq.w	800897c <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	4413      	add	r3, r2
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	429a      	cmp	r2, r3
 8008792:	d305      	bcc.n	80087a0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	429a      	cmp	r2, r3
 800879e:	d902      	bls.n	80087a6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	76bb      	strb	r3, [r7, #26]
 80087a4:	e0ea      	b.n	800897c <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f04f 0100 	mov.w	r1, #0
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	020b      	lsls	r3, r1, #8
 80087b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087bc:	0202      	lsls	r2, r0, #8
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	6849      	ldr	r1, [r1, #4]
 80087c2:	0849      	lsrs	r1, r1, #1
 80087c4:	4608      	mov	r0, r1
 80087c6:	f04f 0100 	mov.w	r1, #0
 80087ca:	1814      	adds	r4, r2, r0
 80087cc:	eb43 0501 	adc.w	r5, r3, r1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	461a      	mov	r2, r3
 80087d6:	f04f 0300 	mov.w	r3, #0
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f7 fcf5 	bl	80001cc <__aeabi_uldivmod>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4613      	mov	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087f0:	d308      	bcc.n	8008804 <UART_SetConfig+0x280>
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f8:	d204      	bcs.n	8008804 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	60da      	str	r2, [r3, #12]
 8008802:	e0bb      	b.n	800897c <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	76bb      	strb	r3, [r7, #26]
 8008808:	e0b8      	b.n	800897c <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008812:	d167      	bne.n	80088e4 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8008814:	7efb      	ldrb	r3, [r7, #27]
 8008816:	2b08      	cmp	r3, #8
 8008818:	d834      	bhi.n	8008884 <UART_SetConfig+0x300>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <UART_SetConfig+0x29c>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008845 	.word	0x08008845
 8008824:	0800884d 	.word	0x0800884d
 8008828:	08008855 	.word	0x08008855
 800882c:	08008885 	.word	0x08008885
 8008830:	0800885b 	.word	0x0800885b
 8008834:	08008885 	.word	0x08008885
 8008838:	08008885 	.word	0x08008885
 800883c:	08008885 	.word	0x08008885
 8008840:	08008863 	.word	0x08008863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008844:	f7fc fd9e 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8008848:	6178      	str	r0, [r7, #20]
        break;
 800884a:	e020      	b.n	800888e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800884c:	f7fc fdb0 	bl	80053b0 <HAL_RCC_GetPCLK2Freq>
 8008850:	6178      	str	r0, [r7, #20]
        break;
 8008852:	e01c      	b.n	800888e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <UART_SetConfig+0x2fc>)
 8008856:	617b      	str	r3, [r7, #20]
        break;
 8008858:	e019      	b.n	800888e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800885a:	f7fc fcfb 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 800885e:	6178      	str	r0, [r7, #20]
        break;
 8008860:	e015      	b.n	800888e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008866:	617b      	str	r3, [r7, #20]
        break;
 8008868:	e011      	b.n	800888e <UART_SetConfig+0x30a>
 800886a:	bf00      	nop
 800886c:	efff69f3 	.word	0xefff69f3
 8008870:	40008000 	.word	0x40008000
 8008874:	40013800 	.word	0x40013800
 8008878:	40021000 	.word	0x40021000
 800887c:	40004400 	.word	0x40004400
 8008880:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	76bb      	strb	r3, [r7, #26]
        break;
 800888c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d073      	beq.n	800897c <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	005a      	lsls	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	441a      	add	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b0f      	cmp	r3, #15
 80088ae:	d916      	bls.n	80088de <UART_SetConfig+0x35a>
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b6:	d212      	bcs.n	80088de <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f023 030f 	bic.w	r3, r3, #15
 80088c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	89fb      	ldrh	r3, [r7, #14]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	89fa      	ldrh	r2, [r7, #14]
 80088da:	60da      	str	r2, [r3, #12]
 80088dc:	e04e      	b.n	800897c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	76bb      	strb	r3, [r7, #26]
 80088e2:	e04b      	b.n	800897c <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088e4:	7efb      	ldrb	r3, [r7, #27]
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d827      	bhi.n	800893a <UART_SetConfig+0x3b6>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0x36c>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008915 	.word	0x08008915
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	08008925 	.word	0x08008925
 80088fc:	0800893b 	.word	0x0800893b
 8008900:	0800892b 	.word	0x0800892b
 8008904:	0800893b 	.word	0x0800893b
 8008908:	0800893b 	.word	0x0800893b
 800890c:	0800893b 	.word	0x0800893b
 8008910:	08008933 	.word	0x08008933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008914:	f7fc fd36 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8008918:	6178      	str	r0, [r7, #20]
        break;
 800891a:	e013      	b.n	8008944 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800891c:	f7fc fd48 	bl	80053b0 <HAL_RCC_GetPCLK2Freq>
 8008920:	6178      	str	r0, [r7, #20]
        break;
 8008922:	e00f      	b.n	8008944 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008924:	4b1b      	ldr	r3, [pc, #108]	; (8008994 <UART_SetConfig+0x410>)
 8008926:	617b      	str	r3, [r7, #20]
        break;
 8008928:	e00c      	b.n	8008944 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800892a:	f7fc fc93 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 800892e:	6178      	str	r0, [r7, #20]
        break;
 8008930:	e008      	b.n	8008944 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008936:	617b      	str	r3, [r7, #20]
        break;
 8008938:	e004      	b.n	8008944 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	76bb      	strb	r3, [r7, #26]
        break;
 8008942:	bf00      	nop
    }

    if (pclk != 0U)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	085a      	lsrs	r2, r3, #1
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	441a      	add	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b0f      	cmp	r3, #15
 8008962:	d909      	bls.n	8008978 <UART_SetConfig+0x3f4>
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896a:	d205      	bcs.n	8008978 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60da      	str	r2, [r3, #12]
 8008976:	e001      	b.n	800897c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008988:	7ebb      	ldrb	r3, [r7, #26]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3720      	adds	r7, #32
 800898e:	46bd      	mov	sp, r7
 8008990:	bdb0      	pop	{r4, r5, r7, pc}
 8008992:	bf00      	nop
 8008994:	00f42400 	.word	0x00f42400

08008998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01a      	beq.n	8008aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a96:	d10a      	bne.n	8008aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	605a      	str	r2, [r3, #4]
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008aec:	f7f9 fc9e 	bl	800242c <HAL_GetTick>
 8008af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d10e      	bne.n	8008b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f82d 	bl	8008b6e <UART_WaitOnFlagUntilTimeout>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e023      	b.n	8008b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d10e      	bne.n	8008b4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f817 	bl	8008b6e <UART_WaitOnFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e00d      	b.n	8008b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b09c      	sub	sp, #112	; 0x70
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b7e:	e0a5      	b.n	8008ccc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	f000 80a1 	beq.w	8008ccc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8a:	f7f9 fc4f 	bl	800242c <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d302      	bcc.n	8008ba0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d13e      	bne.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e6      	bne.n	8008ba0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	663b      	str	r3, [r7, #96]	; 0x60
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e5      	bne.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e067      	b.n	8008cee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d04f      	beq.n	8008ccc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3a:	d147      	bne.n	8008ccc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
 8008c66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e6      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	613b      	str	r3, [r7, #16]
   return(result);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f023 0301 	bic.w	r3, r3, #1
 8008c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3308      	adds	r3, #8
 8008c96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c98:	623a      	str	r2, [r7, #32]
 8008c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	69f9      	ldr	r1, [r7, #28]
 8008c9e:	6a3a      	ldr	r2, [r7, #32]
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e5      	bne.n	8008c78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e010      	b.n	8008cee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69da      	ldr	r2, [r3, #28]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	bf0c      	ite	eq
 8008cdc:	2301      	moveq	r3, #1
 8008cde:	2300      	movne	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	f43f af4a 	beq.w	8008b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3770      	adds	r7, #112	; 0x70
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b096      	sub	sp, #88	; 0x58
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	4613      	mov	r3, r2
 8008d04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2222      	movs	r2, #34	; 0x22
 8008d20:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d02b      	beq.n	8008d82 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	4a42      	ldr	r2, [pc, #264]	; (8008e38 <UART_Start_Receive_DMA+0x140>)
 8008d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	4a41      	ldr	r2, [pc, #260]	; (8008e3c <UART_Start_Receive_DMA+0x144>)
 8008d38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3e:	4a40      	ldr	r2, [pc, #256]	; (8008e40 <UART_Start_Receive_DMA+0x148>)
 8008d40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d46:	2200      	movs	r2, #0
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3324      	adds	r3, #36	; 0x24
 8008d54:	4619      	mov	r1, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	f7fb f9b9 	bl	80040d4 <HAL_DMA_Start_IT>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2210      	movs	r2, #16
 8008d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e055      	b.n	8008e2e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d018      	beq.n	8008dc4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da6:	657b      	str	r3, [r7, #84]	; 0x54
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008db2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e6      	bne.n	8008d92 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	653b      	str	r3, [r7, #80]	; 0x50
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3308      	adds	r3, #8
 8008de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008de4:	637a      	str	r2, [r7, #52]	; 0x34
 8008de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e5      	bne.n	8008dc4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	613b      	str	r3, [r7, #16]
   return(result);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3308      	adds	r3, #8
 8008e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e18:	623a      	str	r2, [r7, #32]
 8008e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1c:	69f9      	ldr	r1, [r7, #28]
 8008e1e:	6a3a      	ldr	r2, [r7, #32]
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e5      	bne.n	8008df8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3758      	adds	r7, #88	; 0x58
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	0800900d 	.word	0x0800900d
 8008e3c:	08009131 	.word	0x08009131
 8008e40:	08009169 	.word	0x08009169

08008e44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b089      	sub	sp, #36	; 0x24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	61bb      	str	r3, [r7, #24]
 8008e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6979      	ldr	r1, [r7, #20]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	613b      	str	r3, [r7, #16]
   return(result);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008e84:	bf00      	nop
 8008e86:	3724      	adds	r7, #36	; 0x24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b095      	sub	sp, #84	; 0x54
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8008eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e6      	bne.n	8008e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e5      	bne.n	8008eca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d118      	bne.n	8008f38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f023 0310 	bic.w	r3, r3, #16
 8008f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	6979      	ldr	r1, [r7, #20]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	613b      	str	r3, [r7, #16]
   return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008f4a:	bf00      	nop
 8008f4c:	3754      	adds	r7, #84	; 0x54
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b090      	sub	sp, #64	; 0x40
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d137      	bne.n	8008fe2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	623b      	str	r3, [r7, #32]
   return(result);
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3308      	adds	r3, #8
 8008f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e5      	bne.n	8008f7a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	69b9      	ldr	r1, [r7, #24]
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	e841 2300 	strex	r3, r2, [r1]
 8008fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e6      	bne.n	8008fae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fe0:	e002      	b.n	8008fe8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008fe2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fe4:	f7f8 fd10 	bl	8001a08 <HAL_UART_TxCpltCallback>
}
 8008fe8:	bf00      	nop
 8008fea:	3740      	adds	r7, #64	; 0x40
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fa96 	bl	8008530 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b09c      	sub	sp, #112	; 0x70
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d170      	bne.n	800910a <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800902a:	2200      	movs	r2, #0
 800902c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800903e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009044:	66bb      	str	r3, [r7, #104]	; 0x68
 8009046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800904e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009050:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800905c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e6      	bne.n	8009030 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	667b      	str	r3, [r7, #100]	; 0x64
 800907a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009082:	647a      	str	r2, [r7, #68]	; 0x44
 8009084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3308      	adds	r3, #8
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	623b      	str	r3, [r7, #32]
   return(result);
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ac:	663b      	str	r3, [r7, #96]	; 0x60
 80090ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090b6:	633a      	str	r2, [r7, #48]	; 0x30
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090cc:	2220      	movs	r2, #32
 80090ce:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d118      	bne.n	800910a <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f023 0310 	bic.w	r3, r3, #16
 80090ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f6:	61fb      	str	r3, [r7, #28]
 80090f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	69b9      	ldr	r1, [r7, #24]
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	617b      	str	r3, [r7, #20]
   return(result);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e6      	bne.n	80090d8 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800910a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910e:	2b01      	cmp	r3, #1
 8009110:	d107      	bne.n	8009122 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009114:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009118:	4619      	mov	r1, r3
 800911a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800911c:	f7ff fa26 	bl	800856c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009120:	e002      	b.n	8009128 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8009122:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009124:	f7ff fa0e 	bl	8008544 <HAL_UART_RxCpltCallback>
}
 8009128:	bf00      	nop
 800912a:	3770      	adds	r7, #112	; 0x70
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009142:	2b01      	cmp	r3, #1
 8009144:	d109      	bne.n	800915a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800914c:	085b      	lsrs	r3, r3, #1
 800914e:	b29b      	uxth	r3, r3
 8009150:	4619      	mov	r1, r3
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff fa0a 	bl	800856c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009158:	e002      	b.n	8009160 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7ff f9fc 	bl	8008558 <HAL_UART_RxHalfCpltCallback>
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800917a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009180:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918c:	2b80      	cmp	r3, #128	; 0x80
 800918e:	d109      	bne.n	80091a4 <UART_DMAError+0x3c>
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b21      	cmp	r3, #33	; 0x21
 8009194:	d106      	bne.n	80091a4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2200      	movs	r2, #0
 800919a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800919e:	6978      	ldr	r0, [r7, #20]
 80091a0:	f7ff fe50 	bl	8008e44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ae:	2b40      	cmp	r3, #64	; 0x40
 80091b0:	d109      	bne.n	80091c6 <UART_DMAError+0x5e>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b22      	cmp	r3, #34	; 0x22
 80091b6:	d106      	bne.n	80091c6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f7ff fe65 	bl	8008e90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	f043 0210 	orr.w	r2, r3, #16
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091d6:	6978      	ldr	r0, [r7, #20]
 80091d8:	f7f8 fc0c 	bl	80019f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091dc:	bf00      	nop
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7f8 fbf6 	bl	80019f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	60bb      	str	r3, [r7, #8]
   return(result);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6979      	ldr	r1, [r7, #20]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	613b      	str	r3, [r7, #16]
   return(result);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e6      	bne.n	8009218 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7f8 fbd6 	bl	8001a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800925c:	bf00      	nop
 800925e:	3720      	adds	r7, #32
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <__libc_init_array>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	4d0d      	ldr	r5, [pc, #52]	; (80092b0 <__libc_init_array+0x38>)
 800927c:	4c0d      	ldr	r4, [pc, #52]	; (80092b4 <__libc_init_array+0x3c>)
 800927e:	1b64      	subs	r4, r4, r5
 8009280:	10a4      	asrs	r4, r4, #2
 8009282:	2600      	movs	r6, #0
 8009284:	42a6      	cmp	r6, r4
 8009286:	d109      	bne.n	800929c <__libc_init_array+0x24>
 8009288:	4d0b      	ldr	r5, [pc, #44]	; (80092b8 <__libc_init_array+0x40>)
 800928a:	4c0c      	ldr	r4, [pc, #48]	; (80092bc <__libc_init_array+0x44>)
 800928c:	f000 f820 	bl	80092d0 <_init>
 8009290:	1b64      	subs	r4, r4, r5
 8009292:	10a4      	asrs	r4, r4, #2
 8009294:	2600      	movs	r6, #0
 8009296:	42a6      	cmp	r6, r4
 8009298:	d105      	bne.n	80092a6 <__libc_init_array+0x2e>
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a0:	4798      	blx	r3
 80092a2:	3601      	adds	r6, #1
 80092a4:	e7ee      	b.n	8009284 <__libc_init_array+0xc>
 80092a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092aa:	4798      	blx	r3
 80092ac:	3601      	adds	r6, #1
 80092ae:	e7f2      	b.n	8009296 <__libc_init_array+0x1e>
 80092b0:	08009338 	.word	0x08009338
 80092b4:	08009338 	.word	0x08009338
 80092b8:	08009338 	.word	0x08009338
 80092bc:	0800933c 	.word	0x0800933c

080092c0 <memset>:
 80092c0:	4402      	add	r2, r0
 80092c2:	4603      	mov	r3, r0
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d100      	bne.n	80092ca <memset+0xa>
 80092c8:	4770      	bx	lr
 80092ca:	f803 1b01 	strb.w	r1, [r3], #1
 80092ce:	e7f9      	b.n	80092c4 <memset+0x4>

080092d0 <_init>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr

080092dc <_fini>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr
