
JCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b4  080087b4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087bc  080087bc  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087bc  080087bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080087c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000028  080087ec  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  080087ec  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c372  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f6  00000000  00000000  0003c3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00040c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023607  00000000  00000000  00042110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ae3  00000000  00000000  00065717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbca3  00000000  00000000  0007e1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159e9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e34  00000000  00000000  00159ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000028 	.word	0x20000028
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008754 	.word	0x08008754

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	08008754 	.word	0x08008754

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CheckErrorsEnc>:
volatile bool COF = 0;											// if 1 - invalid angle data, AS5048 internal error
volatile bool OCF = 1;											// always must be 1, if isn't - AS5048 internal error.
volatile bool EncoderErrorFlag = 0;

void CheckErrorsEnc()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	comp_high = (AGCDiagnosticValue[0] & 0x08);					// bitmask for comp_high flag
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <CheckErrorsEnc+0xb8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <CheckErrorsEnc+0xbc>)
 80004dc:	701a      	strb	r2, [r3, #0]
	comp_low = (AGCDiagnosticValue[0] & 0x04);					// bitmask for comp_low flag
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <CheckErrorsEnc+0xb8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <CheckErrorsEnc+0xc0>)
 80004f2:	701a      	strb	r2, [r3, #0]
	COF = (AGCDiagnosticValue[0] & 0x02);						// bitmask for COF flag
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <CheckErrorsEnc+0xb8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000508:	701a      	strb	r2, [r3, #0]
	OCF = (AGCDiagnosticValue[0] & 0x01);						// bitmask for OCF flag
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <CheckErrorsEnc+0xb8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <CheckErrorsEnc+0xc8>)
 800051e:	701a      	strb	r2, [r3, #0]

	// Set/reset LED if we have/don't have an error
	if(comp_high == 1 || comp_low == 1 || COF == 1 || OCF == 0)
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <CheckErrorsEnc+0xbc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d111      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <CheckErrorsEnc+0xc0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10c      	bne.n	800054e <CheckErrorsEnc+0x8a>
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <CheckErrorsEnc+0xc8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <CheckErrorsEnc+0x9e>
	{
		EnableAlarmLED();
 800054e:	f000 f917 	bl	8000780 <EnableAlarmLED>
		JCUState.Errors |= ERROR_ENCODER_MAGNET;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <CheckErrorsEnc+0xcc>)
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	e009      	b.n	8000576 <CheckErrorsEnc+0xb2>
	}
	else
	{
		DisableAlarmLED();
 8000562:	f000 f919 	bl	8000798 <DisableAlarmLED>
		JCUState.Errors &=~ ERROR_ENCODER_MAGNET;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000572:	801a      	strh	r2, [r3, #0]
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000048 	.word	0x20000048
 8000580:	2000004a 	.word	0x2000004a
 8000584:	2000004b 	.word	0x2000004b
 8000588:	2000004c 	.word	0x2000004c
 800058c:	2000000a 	.word	0x2000000a
 8000590:	20000128 	.word	0x20000128

08000594 <ParityOk>:

//--------------Calculate PARITY EVEN bit-----------------
bool ParityOk(uint16_t scancode)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]

	uint16_t parity = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
	// checking 15 bits for EVEN Parity
	for (uint8_t i = 0; i < 15; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	e00d      	b.n	80005c4 <ParityOk+0x30>
	{
		if(scancode & 0x01)										// see if LSB is 1
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <ParityOk+0x24>
		{
			parity++;											// if it 1 add counter of "ones"
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
		}
		scancode = scancode >> 1;								// shift to next bit
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 15; i++)
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	3301      	adds	r3, #1
 80005c2:	737b      	strb	r3, [r7, #13]
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	2b0e      	cmp	r3, #14
 80005c8:	d9ee      	bls.n	80005a8 <ParityOk+0x14>
	}

	parity = parity & 0x01;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	81fb      	strh	r3, [r7, #14]
	// Compare calculated parity and the MSB of received DATA, return "1" if they are the same
	return (parity == scancode);
 80005d2:	89fa      	ldrh	r2, [r7, #14]
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <EncoderRoutine>:
//-------------------------------------------------------



void EncoderRoutine(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	switch(EncoderState)
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <EncoderRoutine+0x114>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	f200 8081 	bhi.w	80006fc <EncoderRoutine+0x110>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <EncoderRoutine+0x14>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000621 	.word	0x08000621
 8000604:	080006fb 	.word	0x080006fb
 8000608:	08000641 	.word	0x08000641
 800060c:	080006fb 	.word	0x080006fb
 8000610:	08000661 	.word	0x08000661
 8000614:	080006cf 	.word	0x080006cf
 8000618:	080006fb 	.word	0x080006fb
 800061c:	080006ef 	.word	0x080006ef
	{
		case (ENCODER_CLEAR_ERRORS):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f003 fe6e 	bl	8004308 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadErrorFlagsAddress, Angle, SIZE);
 800062c:	2302      	movs	r3, #2
 800062e:	4a35      	ldr	r2, [pc, #212]	; (8000704 <EncoderRoutine+0x118>)
 8000630:	4935      	ldr	r1, [pc, #212]	; (8000708 <EncoderRoutine+0x11c>)
 8000632:	4836      	ldr	r0, [pc, #216]	; (800070c <EncoderRoutine+0x120>)
 8000634:	f005 f8ae 	bl	8005794 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ERRORS;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <EncoderRoutine+0x114>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
		break;
 800063e:	e05d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ERRORS):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_WAIT_ANGLE):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f003 fe5e 	bl	8004308 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, AGCDiagnosticAddress, Angle, SIZE);			// read  read angle, and sent request to read errors, so that next communication we would have error information
 800064c:	2302      	movs	r3, #2
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <EncoderRoutine+0x118>)
 8000650:	492f      	ldr	r1, [pc, #188]	; (8000710 <EncoderRoutine+0x124>)
 8000652:	482e      	ldr	r0, [pc, #184]	; (800070c <EncoderRoutine+0x120>)
 8000654:	f005 f89e 	bl	8005794 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ANGLE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <EncoderRoutine+0x114>)
 800065a:	2203      	movs	r2, #3
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e04d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ANGLE):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_ANGLE):
			temp = (Angle[0] << 8) + Angle[1];
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EncoderRoutine+0x118>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <EncoderRoutine+0x118>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <EncoderRoutine+0x128>)
 8000676:	801a      	strh	r2, [r3, #0]
			if (ParityOk(temp))										// check parity, if angular data was corrupted
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EncoderRoutine+0x128>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff89 	bl	8000594 <ParityOk>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d015      	beq.n	80006b4 <EncoderRoutine+0xc8>
			{
				JCUState.Errors &=~ ERROR_ENCODER_PARITY;
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <EncoderRoutine+0x12c>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f023 0302 	bic.w	r3, r3, #2
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EncoderRoutine+0x12c>)
 8000694:	801a      	strh	r2, [r3, #0]
				temp &= 0x3FFF;										// remove status bits from angle information
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <EncoderRoutine+0x128>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <EncoderRoutine+0x128>)
 80006a2:	801a      	strh	r2, [r3, #0]
				JCUState.Angle = temp;								// update angle with latest value
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <EncoderRoutine+0x128>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <EncoderRoutine+0x12c>)
 80006aa:	805a      	strh	r2, [r3, #2]
				EncoderState = ENCODER_WAIT_DIAGNOSTIC;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EncoderRoutine+0x114>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	701a      	strb	r2, [r3, #0]
				break;
 80006b2:	e023      	b.n	80006fc <EncoderRoutine+0x110>
			}
			else
			{
				//JCUState.Angle = 0;
				DisableMotor();
 80006b4:	f000 fcf4 	bl	80010a0 <DisableMotor>
				JCUState.Errors |= ERROR_ENCODER_PARITY;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <EncoderRoutine+0x12c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <EncoderRoutine+0x12c>)
 80006c4:	801a      	strh	r2, [r3, #0]
				EncoderState = ENCODER_CLEAR_ERRORS;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <EncoderRoutine+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				break;
 80006cc:	e016      	b.n	80006fc <EncoderRoutine+0x110>
			}

		case (ENCODER_WAIT_DIAGNOSTIC):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f003 fe17 	bl	8004308 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadAngle, AGCDiagnosticValue, SIZE);		// read data about error, and sent request to read angle, so that next communication we would have actual angle information
 80006da:	2302      	movs	r3, #2
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <EncoderRoutine+0x130>)
 80006de:	4910      	ldr	r1, [pc, #64]	; (8000720 <EncoderRoutine+0x134>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <EncoderRoutine+0x120>)
 80006e2:	f005 f857 	bl	8005794 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_DIAGNOSTIC;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <EncoderRoutine+0x114>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	701a      	strb	r2, [r3, #0]
		break;
 80006ec:	e006      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_DIAGNOSTIC):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_DIAGNOSTIC):
			CheckErrorsEnc();
 80006ee:	f7ff fee9 	bl	80004c4 <CheckErrorsEnc>
			EncoderState = ENCODER_WAIT_ANGLE;
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <EncoderRoutine+0x114>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e000      	b.n	80006fc <EncoderRoutine+0x110>
		break;
 80006fa:	bf00      	nop
	}
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000124 	.word	0x20000124
 8000704:	20000044 	.word	0x20000044
 8000708:	20000004 	.word	0x20000004
 800070c:	200003e4 	.word	0x200003e4
 8000710:	20000008 	.word	0x20000008
 8000714:	20000126 	.word	0x20000126
 8000718:	20000128 	.word	0x20000128
 800071c:	20000048 	.word	0x20000048
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);				// put CS high again after end of data transfer
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f003 fde8 	bl	8004308 <HAL_GPIO_WritePin>
	if (EncoderState == ENCODER_LOCK_ERRORS)
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d103      	bne.n	8000748 <HAL_SPI_TxRxCpltCallback+0x24>
		EncoderState = ENCODER_WAIT_ANGLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e012      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_ANGLE)
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d103      	bne.n	8000758 <HAL_SPI_TxRxCpltCallback+0x34>
		EncoderState = ENCODER_BUSY_ANGLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000752:	2204      	movs	r2, #4
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e00a      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_DIAGNOSTIC)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b06      	cmp	r3, #6
 800075e:	d103      	bne.n	8000768 <HAL_SPI_TxRxCpltCallback+0x44>
		EncoderState = ENCODER_BUSY_DIAGNOSTIC;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000762:	2207      	movs	r2, #7
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else
		EncoderState = ENCODER_CLEAR_ERRORS;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

	EncoderRoutine();																// process data which we have just read
 800076e:	f7ff ff3d 	bl	80005ec <EncoderRoutine>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000124 	.word	0x20000124

08000780 <EnableAlarmLED>:

void EnableAlarmLED(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <EnableAlarmLED+0x14>)
 800078c:	f003 fdbc 	bl	8004308 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	48000800 	.word	0x48000800

08000798 <DisableAlarmLED>:

void DisableAlarmLED(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <DisableAlarmLED+0x14>)
 80007a4:	f003 fdb0 	bl	8004308 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000800 	.word	0x48000800

080007b0 <ModbusRTURoutine>:
 * 43.5 us data is sent, 8 bytes
 */


void ModbusRTURoutine(uint8_t *pBUFFER, uint8_t Length)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
 80007bc:	466b      	mov	r3, sp
 80007be:	461d      	mov	r5, r3
	//Length = BufferSize - hdma_usart1_rx.Instance->CNDTR;
	/*
	 * create temporary variables for ModBus parcing
	 */
	uint16_t CRCCalc = 0;							// CRC which will be calculated
 80007c0:	2300      	movs	r3, #0
 80007c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t CRCValue = 0;							// CRC which was sent by Master
 80007c4:	2300      	movs	r3, #0
 80007c6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t ModbusFunction = 0;						// Master modbus function (what action slave should do)
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t RequestedAddress = 0;					// started address which Master wants to read
 80007ce:	2300      	movs	r3, #0
 80007d0:	843b      	strh	r3, [r7, #32]
	uint16_t AmountofRead = 0;						// amount of registers which master wants to read
 80007d2:	2300      	movs	r3, #0
 80007d4:	83fb      	strh	r3, [r7, #30]
	uint16_t AmountofWrite = 0;						// amount of registers which master wants to write
 80007d6:	2300      	movs	r3, #0
 80007d8:	83bb      	strh	r3, [r7, #28]
	uint8_t ByteCount = 0;							// amount of BYTEs which will be sent in response
 80007da:	2300      	movs	r3, #0
 80007dc:	76fb      	strb	r3, [r7, #27]
	uint16_t CRCforResponse	= 0;					// CRC will be calculated for response data
 80007de:	2300      	movs	r3, #0
 80007e0:	833b      	strh	r3, [r7, #24]
	uint8_t temp[Length];							// temporary array which we are gonna use to process incoming data
 80007e2:	78fc      	ldrb	r4, [r7, #3]
 80007e4:	4623      	mov	r3, r4
 80007e6:	3b01      	subs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	b2e0      	uxtb	r0, r4
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	f04f 0200 	mov.w	r2, #0
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	00cb      	lsls	r3, r1, #3
 80007fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007fe:	00c2      	lsls	r2, r0, #3
 8000800:	b2e0      	uxtb	r0, r4
 8000802:	f04f 0100 	mov.w	r1, #0
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	00cb      	lsls	r3, r1, #3
 8000810:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000814:	00c2      	lsls	r2, r0, #3
 8000816:	4623      	mov	r3, r4
 8000818:	3307      	adds	r3, #7
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	ebad 0d03 	sub.w	sp, sp, r3
 8000822:	466b      	mov	r3, sp
 8000824:	3300      	adds	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
	uint16_t *ptemp16bitJCUConfig = pJCUConfig;		// temporary pointer to shift between data which should be read or written pJCUConfig
 8000828:	4ba0      	ldr	r3, [pc, #640]	; (8000aac <ModbusRTURoutine+0x2fc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *ptemp16bitJCUState = pJCUState;		// temporary pointer to shift between data which should be read or written pJCUState
 800082e:	4ba0      	ldr	r3, [pc, #640]	; (8000ab0 <ModbusRTURoutine+0x300>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	633b      	str	r3, [r7, #48]	; 0x30

	// putting all data to the temp array
	for (uint8_t i = 0; i < Length; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800083a:	e00d      	b.n	8000858 <ModbusRTURoutine+0xa8>
	{
		temp [i] = pBUFFER[i];
 800083c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	441a      	add	r2, r3
 8000844:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000848:	7811      	ldrb	r1, [r2, #0]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < Length; i++)
 800084e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000852:	3301      	adds	r3, #1
 8000854:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000858:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3ec      	bcc.n	800083c <ModbusRTURoutine+0x8c>
	}

	// comparing received and calculated CRCs

	CRCValue = temp[Length-1];
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	3b01      	subs	r3, #1
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue <<= 8;
 800086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue = CRCValue + temp[Length-2];
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	3b02      	subs	r3, #2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	b29a      	uxth	r2, r3
 800087c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800087e:	4413      	add	r3, r2
 8000880:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCCalc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&temp, (Length-2));
 8000882:	6939      	ldr	r1, [r7, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	3b02      	subs	r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	488a      	ldr	r0, [pc, #552]	; (8000ab4 <ModbusRTURoutine+0x304>)
 800088c:	f002 ffc2 	bl	8003814 <HAL_CRC_Calculate>
 8000890:	4603      	mov	r3, r0
 8000892:	84fb      	strh	r3, [r7, #38]	; 0x26

	// If data was not corrupted (CRC is ok)
	//if (1)
	if (CRCCalc == CRCValue)
 8000894:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 825b 	bne.w	8000d54 <ModbusRTURoutine+0x5a4>
	{
		// Check if the message for us
		if (temp[0] == SLAVE_ID)
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4293      	cmp	r3, r2
 80008a6:	f040 8245 	bne.w	8000d34 <ModbusRTURoutine+0x584>
		{
			// this packet for us, let's read it
			// Defining the modbus function
			ModbusFunction = temp[1];
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			switch (ModbusFunction)
 80008b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b6:	3b03      	subs	r3, #3
 80008b8:	2b0d      	cmp	r3, #13
 80008ba:	f200 8237 	bhi.w	8000d2c <ModbusRTURoutine+0x57c>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <ModbusRTURoutine+0x114>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008fd 	.word	0x080008fd
 80008c8:	08000a2d 	.word	0x08000a2d
 80008cc:	08000d2d 	.word	0x08000d2d
 80008d0:	08000b81 	.word	0x08000b81
 80008d4:	08000d2d 	.word	0x08000d2d
 80008d8:	08000d2d 	.word	0x08000d2d
 80008dc:	08000d2d 	.word	0x08000d2d
 80008e0:	08000d2d 	.word	0x08000d2d
 80008e4:	08000d2d 	.word	0x08000d2d
 80008e8:	08000d2d 	.word	0x08000d2d
 80008ec:	08000d2d 	.word	0x08000d2d
 80008f0:	08000d2d 	.word	0x08000d2d
 80008f4:	08000d2d 	.word	0x08000d2d
 80008f8:	08000c01 	.word	0x08000c01
			{
				case READ_AOHR:
				// Read JCU parameters which Master has set (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	b29b      	uxth	r3, r3
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b29a      	uxth	r2, r3
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	78db      	ldrb	r3, [r3, #3]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000910:	8c3a      	ldrh	r2, [r7, #32]
 8000912:	4b69      	ldr	r3, [pc, #420]	; (8000ab8 <ModbusRTURoutine+0x308>)
 8000914:	4413      	add	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800091a:	4413      	add	r3, r2
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c

					// Defining how many Holding registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	b29b      	uxth	r3, r3
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b29a      	uxth	r2, r3
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	b29b      	uxth	r3, r3
 800092e:	4413      	add	r3, r2
 8000930:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000932:	8bfb      	ldrh	r3, [r7, #30]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 800093a:	8c3b      	ldrh	r3, [r7, #32]
 800093c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000940:	4293      	cmp	r3, r2
 8000942:	d96f      	bls.n	8000a24 <ModbusRTURoutine+0x274>
 8000944:	8c3b      	ldrh	r3, [r7, #32]
 8000946:	f649 4256 	movw	r2, #40022	; 0x9c56
 800094a:	4293      	cmp	r3, r2
 800094c:	d86a      	bhi.n	8000a24 <ModbusRTURoutine+0x274>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofRead) <= TOTAL_AOHR))
 800094e:	8c3b      	ldrh	r3, [r7, #32]
 8000950:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000954:	3b41      	subs	r3, #65	; 0x41
 8000956:	8bfa      	ldrh	r2, [r7, #30]
 8000958:	4413      	add	r3, r2
 800095a:	2b16      	cmp	r3, #22
 800095c:	dc62      	bgt.n	8000a24 <ModbusRTURoutine+0x274>
					{
						TxData[0] = SLAVE_ID;
 800095e:	2201      	movs	r2, #1
 8000960:	4b56      	ldr	r3, [pc, #344]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000962:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000964:	4a55      	ldr	r2, [pc, #340]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800096a:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 800096c:	4a53      	ldr	r2, [pc, #332]	; (8000abc <ModbusRTURoutine+0x30c>)
 800096e:	7efb      	ldrb	r3, [r7, #27]
 8000970:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<ByteCount; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000978:	e01f      	b.n	80009ba <ModbusRTURoutine+0x20a>
						{
							uint16_t tempvalue = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	81bb      	strh	r3, [r7, #12]
							tempvalue = *ptemp16bitJCUConfig;
 800097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 4] = tempvalue;
 8000984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000988:	3302      	adds	r3, #2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	89ba      	ldrh	r2, [r7, #12]
 800098e:	b2d1      	uxtb	r1, r2
 8000990:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000992:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000994:	89bb      	ldrh	r3, [r7, #12]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 3] = tempvalue;
 800099a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	3303      	adds	r3, #3
 80009a2:	89ba      	ldrh	r2, [r7, #12]
 80009a4:	b2d1      	uxtb	r1, r2
 80009a6:	4a45      	ldr	r2, [pc, #276]	; (8000abc <ModbusRTURoutine+0x30c>)
 80009a8:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUConfig++;
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	3302      	adds	r3, #2
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i++)
 80009b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009b4:	3301      	adds	r3, #1
 80009b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80009ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80009be:	7efb      	ldrb	r3, [r7, #27]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d3da      	bcc.n	800097a <ModbusRTURoutine+0x1ca>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 80009c4:	7efb      	ldrb	r3, [r7, #27]
 80009c6:	3303      	adds	r3, #3
 80009c8:	461a      	mov	r2, r3
 80009ca:	493c      	ldr	r1, [pc, #240]	; (8000abc <ModbusRTURoutine+0x30c>)
 80009cc:	4839      	ldr	r0, [pc, #228]	; (8000ab4 <ModbusRTURoutine+0x304>)
 80009ce:	f002 ff21 	bl	8003814 <HAL_CRC_Calculate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 80009d6:	7efb      	ldrb	r3, [r7, #27]
 80009d8:	3303      	adds	r3, #3
 80009da:	8b3a      	ldrh	r2, [r7, #24]
 80009dc:	b2d1      	uxtb	r1, r2
 80009de:	4a37      	ldr	r2, [pc, #220]	; (8000abc <ModbusRTURoutine+0x30c>)
 80009e0:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 80009e2:	8b3b      	ldrh	r3, [r7, #24]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 80009e8:	7efb      	ldrb	r3, [r7, #27]
 80009ea:	3304      	adds	r3, #4
 80009ec:	8b3a      	ldrh	r2, [r7, #24]
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a32      	ldr	r2, [pc, #200]	; (8000abc <ModbusRTURoutine+0x30c>)
 80009f2:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 80009f4:	bf00      	nop
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <ModbusRTURoutine+0x310>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a04:	d0f7      	beq.n	80009f6 <ModbusRTURoutine+0x246>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2108      	movs	r1, #8
 8000a0a:	482e      	ldr	r0, [pc, #184]	; (8000ac4 <ModbusRTURoutine+0x314>)
 8000a0c:	f003 fc7c 	bl	8004308 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000a10:	7efb      	ldrb	r3, [r7, #27]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	3305      	adds	r3, #5
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4928      	ldr	r1, [pc, #160]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <ModbusRTURoutine+0x310>)
 8000a1e:	f006 fe43 	bl	80076a8 <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 8000a22:	e1a1      	b.n	8000d68 <ModbusRTURoutine+0x5b8>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000a24:	2002      	movs	r0, #2
 8000a26:	f000 f9b1 	bl	8000d8c <ModbusExceptionHandler>
					break;
 8000a2a:	e19d      	b.n	8000d68 <ModbusRTURoutine+0x5b8>

				case READ_AIR:
				// Read JCU parameters (errors/Angle/speed/torque/temperature)

					// Defining the first address of input registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	78db      	ldrb	r3, [r3, #3]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					ptemp16bitJCUState += RequestedAddress - ADDRESS_JCU_ERRORS;
 8000a40:	8c3a      	ldrh	r2, [r7, #32]
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <ModbusRTURoutine+0x318>)
 8000a44:	4413      	add	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a4a:	4413      	add	r3, r2
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30

					// Defining how many input registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	795b      	ldrb	r3, [r3, #5]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4413      	add	r3, r2
 8000a60:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000a62:	8bfb      	ldrh	r3, [r7, #30]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the input Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_JCU_ERRORS) && (RequestedAddress <= ADDRESS_JCU_TEMP))
 8000a6a:	8c3b      	ldrh	r3, [r7, #32]
 8000a6c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a70:	4293      	cmp	r3, r2
 8000a72:	f240 8081 	bls.w	8000b78 <ModbusRTURoutine+0x3c8>
 8000a76:	8c3b      	ldrh	r3, [r7, #32]
 8000a78:	f247 5235 	movw	r2, #30005	; 0x7535
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d87b      	bhi.n	8000b78 <ModbusRTURoutine+0x3c8>
							&& (((RequestedAddress - ADDRESS_JCU_ERRORS) + AmountofRead) <= TOTAL_AIR))
 8000a80:	8c3b      	ldrh	r3, [r7, #32]
 8000a82:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000a86:	3b31      	subs	r3, #49	; 0x31
 8000a88:	8bfa      	ldrh	r2, [r7, #30]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	dc73      	bgt.n	8000b78 <ModbusRTURoutine+0x3c8>
					{
						TxData[0] = SLAVE_ID;
 8000a90:	2201      	movs	r2, #1
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000a94:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a9c:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <ModbusRTURoutine+0x30c>)
 8000aa0:	7efb      	ldrb	r3, [r7, #27]
 8000aa2:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<AmountofRead; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000aaa:	e02f      	b.n	8000b0c <ModbusRTURoutine+0x35c>
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000010 	.word	0x20000010
 8000ab4:	200001b4 	.word	0x200001b4
 8000ab8:	7fff63bf 	.word	0x7fff63bf
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	20000314 	.word	0x20000314
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	7fff8acf 	.word	0x7fff8acf
						{
							uint16_t tempvalue = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
							tempvalue = *ptemp16bitJCUState;
 8000ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 4] = tempvalue;
 8000ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ada:	3302      	adds	r3, #2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	89fa      	ldrh	r2, [r7, #14]
 8000ae0:	b2d1      	uxtb	r1, r2
 8000ae2:	4aa4      	ldr	r2, [pc, #656]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000ae4:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 3] = tempvalue;
 8000aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	3303      	adds	r3, #3
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	b2d1      	uxtb	r1, r2
 8000af8:	4a9e      	ldr	r2, [pc, #632]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000afa:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUState++;
 8000afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afe:	3302      	adds	r3, #2
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
						for (uint8_t i=0; i<AmountofRead; i++)
 8000b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b06:	3301      	adds	r3, #1
 8000b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	8bfa      	ldrh	r2, [r7, #30]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8d9      	bhi.n	8000acc <ModbusRTURoutine+0x31c>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000b18:	7efb      	ldrb	r3, [r7, #27]
 8000b1a:	3303      	adds	r3, #3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4995      	ldr	r1, [pc, #596]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000b20:	4895      	ldr	r0, [pc, #596]	; (8000d78 <ModbusRTURoutine+0x5c8>)
 8000b22:	f002 fe77 	bl	8003814 <HAL_CRC_Calculate>
 8000b26:	4603      	mov	r3, r0
 8000b28:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000b2a:	7efb      	ldrb	r3, [r7, #27]
 8000b2c:	3303      	adds	r3, #3
 8000b2e:	8b3a      	ldrh	r2, [r7, #24]
 8000b30:	b2d1      	uxtb	r1, r2
 8000b32:	4a90      	ldr	r2, [pc, #576]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000b34:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000b36:	8b3b      	ldrh	r3, [r7, #24]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000b3c:	7efb      	ldrb	r3, [r7, #27]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	8b3a      	ldrh	r2, [r7, #24]
 8000b42:	b2d1      	uxtb	r1, r2
 8000b44:	4a8b      	ldr	r2, [pc, #556]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000b46:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000b48:	bf00      	nop
 8000b4a:	4b8c      	ldr	r3, [pc, #560]	; (8000d7c <ModbusRTURoutine+0x5cc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b58:	d0f7      	beq.n	8000b4a <ModbusRTURoutine+0x39a>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	4888      	ldr	r0, [pc, #544]	; (8000d80 <ModbusRTURoutine+0x5d0>)
 8000b60:	f003 fbd2 	bl	8004308 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000b64:	7efb      	ldrb	r3, [r7, #27]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3305      	adds	r3, #5
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4981      	ldr	r1, [pc, #516]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <ModbusRTURoutine+0x5cc>)
 8000b72:	f006 fd99 	bl	80076a8 <HAL_UART_Transmit_DMA>
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}

					break;
 8000b76:	e0f7      	b.n	8000d68 <ModbusRTURoutine+0x5b8>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f000 f907 	bl	8000d8c <ModbusExceptionHandler>
					break;
 8000b7e:	e0f3      	b.n	8000d68 <ModbusRTURoutine+0x5b8>

				case WRITE_SINGLE_AOHR:
				// Write Single parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					RequestedAddress = (temp[2] << 8) + temp[3];
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	78db      	ldrb	r3, [r3, #3]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000b94:	8c3a      	ldrh	r2, [r7, #32]
 8000b96:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <ModbusRTURoutine+0x5d4>)
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b9e:	4413      	add	r3, r2
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c

					/*
					 * Check if there is no such error:
					 * 1. the address of the holding Register is correct
					 */
					if ((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000ba2:	8c3b      	ldrh	r3, [r7, #32]
 8000ba4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d924      	bls.n	8000bf6 <ModbusRTURoutine+0x446>
 8000bac:	8c3b      	ldrh	r3, [r7, #32]
 8000bae:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d81f      	bhi.n	8000bf6 <ModbusRTURoutine+0x446>
					{
						*ptemp16bitJCUConfig = (temp[4] << 8) + temp[5];
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	801a      	strh	r2, [r3, #0]

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	486b      	ldr	r0, [pc, #428]	; (8000d80 <ModbusRTURoutine+0x5d0>)
 8000bd4:	f003 fb98 	bl	8004308 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, RxData, Length);
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	496a      	ldr	r1, [pc, #424]	; (8000d88 <ModbusRTURoutine+0x5d8>)
 8000be0:	4866      	ldr	r0, [pc, #408]	; (8000d7c <ModbusRTURoutine+0x5cc>)
 8000be2:	f006 fd61 	bl	80076a8 <HAL_UART_Transmit_DMA>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000be6:	8c3b      	ldrh	r3, [r7, #32]
 8000be8:	f649 4244 	movw	r2, #40004	; 0x9c44
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d106      	bne.n	8000bfe <ModbusRTURoutine+0x44e>
						{
							CheckStatusRegister();
 8000bf0:	f000 f972 	bl	8000ed8 <CheckStatusRegister>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000bf4:	e003      	b.n	8000bfe <ModbusRTURoutine+0x44e>
					}
					// if there are errors in request:
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 f8c8 	bl	8000d8c <ModbusExceptionHandler>
					}
					break;
 8000bfc:	e0b4      	b.n	8000d68 <ModbusRTURoutine+0x5b8>
 8000bfe:	e0b3      	b.n	8000d68 <ModbusRTURoutine+0x5b8>

				case WRITE_MULTIPLE_AOHR:
				// Write multiple parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to write (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	78db      	ldrb	r3, [r3, #3]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000c14:	8c3a      	ldrh	r2, [r7, #32]
 8000c16:	4b5b      	ldr	r3, [pc, #364]	; (8000d84 <ModbusRTURoutine+0x5d4>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c1e:	4413      	add	r3, r2
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
					// Defining how many Holding registers master wants to read
					AmountofWrite = (temp[4] << 8) + temp[5];
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	795b      	ldrb	r3, [r3, #5]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	83bb      	strh	r3, [r7, #28]
					ByteCount = temp[6];
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	799b      	ldrb	r3, [r3, #6]
 8000c3a:	76fb      	strb	r3, [r7, #27]
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to write does not exceed amount possible infromation
					 * 3. Check if master quantity of Bytes in message is equal (quantity of register) * 2
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000c3c:	8c3b      	ldrh	r3, [r7, #32]
 8000c3e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d96e      	bls.n	8000d24 <ModbusRTURoutine+0x574>
 8000c46:	8c3b      	ldrh	r3, [r7, #32]
 8000c48:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d869      	bhi.n	8000d24 <ModbusRTURoutine+0x574>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofWrite) <= TOTAL_AOHR)
 8000c50:	8c3b      	ldrh	r3, [r7, #32]
 8000c52:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000c56:	3b41      	subs	r3, #65	; 0x41
 8000c58:	8bba      	ldrh	r2, [r7, #28]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2b16      	cmp	r3, #22
 8000c5e:	dc61      	bgt.n	8000d24 <ModbusRTURoutine+0x574>
							&& (ByteCount == AmountofWrite*2))
 8000c60:	7efa      	ldrb	r2, [r7, #27]
 8000c62:	8bbb      	ldrh	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d15c      	bne.n	8000d24 <ModbusRTURoutine+0x574>
					{
						//uint8_t *ptemp8bit = (uint8_t*) ptemp16bitJCUState;			// for more convenient shifting of bytes during writing, we are creating 8 bit pointer

						for (uint8_t i=0; i<ByteCount; i+=2)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000c70:	e019      	b.n	8000ca6 <ModbusRTURoutine+0x4f6>
						{
							*ptemp16bitJCUConfig = (temp[i+7] << 8) + temp[i+8];
 8000c72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c76:	3307      	adds	r3, #7
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c86:	3308      	adds	r3, #8
 8000c88:	6939      	ldr	r1, [r7, #16]
 8000c8a:	5ccb      	ldrb	r3, [r1, r3]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	801a      	strh	r2, [r3, #0]
							ptemp16bitJCUConfig++;
 8000c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c98:	3302      	adds	r3, #2
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i+=2)
 8000c9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000ca6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000caa:	7efb      	ldrb	r3, [r7, #27]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3e0      	bcc.n	8000c72 <ModbusRTURoutine+0x4c2>
						}

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						for (uint8_t i = 0; i < 6; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000cb6:	e00c      	b.n	8000cd2 <ModbusRTURoutine+0x522>
						{
							TxData[i] = temp[i];
 8000cb8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000cbc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000cc0:	6939      	ldr	r1, [r7, #16]
 8000cc2:	5c89      	ldrb	r1, [r1, r2]
 8000cc4:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < 6; i++)
 8000cc8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000cd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d9ee      	bls.n	8000cb8 <ModbusRTURoutine+0x508>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+2));
 8000cda:	7efb      	ldrb	r3, [r7, #27]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4924      	ldr	r1, [pc, #144]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000ce2:	4825      	ldr	r0, [pc, #148]	; (8000d78 <ModbusRTURoutine+0x5c8>)
 8000ce4:	f002 fd96 	bl	8003814 <HAL_CRC_Calculate>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+2] = CRCforResponse;
 8000cec:	7efb      	ldrb	r3, [r7, #27]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	8b3a      	ldrh	r2, [r7, #24]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000cf6:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000cf8:	8b3b      	ldrh	r3, [r7, #24]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000cfe:	7efb      	ldrb	r3, [r7, #27]
 8000d00:	3303      	adds	r3, #3
 8000d02:	8b3a      	ldrh	r2, [r7, #24]
 8000d04:	b2d1      	uxtb	r1, r2
 8000d06:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000d08:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	481c      	ldr	r0, [pc, #112]	; (8000d80 <ModbusRTURoutine+0x5d0>)
 8000d10:	f003 fafa 	bl	8004308 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, WRITE_MULTIPLE_AOHR_BYTES_RESPONSE);
 8000d14:	2208      	movs	r2, #8
 8000d16:	4917      	ldr	r1, [pc, #92]	; (8000d74 <ModbusRTURoutine+0x5c4>)
 8000d18:	4818      	ldr	r0, [pc, #96]	; (8000d7c <ModbusRTURoutine+0x5cc>)
 8000d1a:	f006 fcc5 	bl	80076a8 <HAL_UART_Transmit_DMA>
						CheckStatusRegister();												// could be improved if we can check, was this register updated by master or not
 8000d1e:	f000 f8db 	bl	8000ed8 <CheckStatusRegister>
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000d22:	e021      	b.n	8000d68 <ModbusRTURoutine+0x5b8>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 f831 	bl	8000d8c <ModbusExceptionHandler>
					break;
 8000d2a:	e01d      	b.n	8000d68 <ModbusRTURoutine+0x5b8>

				default:
					// Modbus Exception 0x01 - Illegal Function
					ModbusExceptionHandler(MODBUS_ILLEGAL_FUNCTION);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 f82d 	bl	8000d8c <ModbusExceptionHandler>
					break;
 8000d32:	e019      	b.n	8000d68 <ModbusRTURoutine+0x5b8>
			}

		}
		else if(temp[0] == SLAVE_ID_BROADCAST)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d014      	beq.n	8000d68 <ModbusRTURoutine+0x5b8>
		}
		else
		{
			// do nothing
			// wait new packet
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <ModbusRTURoutine+0x5d0>)
 8000d44:	f003 fae0 	bl	8004308 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	490f      	ldr	r1, [pc, #60]	; (8000d88 <ModbusRTURoutine+0x5d8>)
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <ModbusRTURoutine+0x5cc>)
 8000d4e:	f006 fd29 	bl	80077a4 <HAL_UART_Receive_DMA>
 8000d52:	e009      	b.n	8000d68 <ModbusRTURoutine+0x5b8>
	}
	else
	{
		// do nothing
		// wait new packet
		HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <ModbusRTURoutine+0x5d0>)
 8000d5a:	f003 fad5 	bl	8004308 <HAL_GPIO_WritePin>
		HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000d5e:	2264      	movs	r2, #100	; 0x64
 8000d60:	4909      	ldr	r1, [pc, #36]	; (8000d88 <ModbusRTURoutine+0x5d8>)
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <ModbusRTURoutine+0x5cc>)
 8000d64:	f006 fd1e 	bl	80077a4 <HAL_UART_Receive_DMA>
 8000d68:	46ad      	mov	sp, r5
	}



}
 8000d6a:	bf00      	nop
 8000d6c:	3738      	adds	r7, #56	; 0x38
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bdb0      	pop	{r4, r5, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000c0 	.word	0x200000c0
 8000d78:	200001b4 	.word	0x200001b4
 8000d7c:	20000314 	.word	0x20000314
 8000d80:	48000400 	.word	0x48000400
 8000d84:	7fff63bf 	.word	0x7fff63bf
 8000d88:	2000005c 	.word	0x2000005c

08000d8c <ModbusExceptionHandler>:

void ModbusExceptionHandler(uint8_t ExceptionCode)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	}
	else if (ExceptionCode == MODBUS_ILLEGAL_DATA_ADDRESS)
	{

	}
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <UpdatePWM>:
uint16_t counter = 0;
float PosError;
float prevPosError;

void UpdatePWM(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dae:	483f      	ldr	r0, [pc, #252]	; (8000eac <UpdatePWM+0x108>)
 8000db0:	f003 fac2 	bl	8004338 <HAL_GPIO_TogglePin>

	// 1. Measuring error position
	PosError = JCUConfig.TargetAngel - JCUState.Angle;
 8000db4:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <UpdatePWM+0x10c>)
 8000db6:	889b      	ldrh	r3, [r3, #4]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <UpdatePWM+0x110>)
 8000dbc:	885b      	ldrh	r3, [r3, #2]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <UpdatePWM+0x114>)
 8000dca:	edc3 7a00 	vstr	s15, [r3]

	// 2. Proportional
	float Proportional = JCUConfig.KpPossitionLoop * PosError;
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <UpdatePWM+0x10c>)
 8000dd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <UpdatePWM+0x114>)
 8000dd6:	edd3 7a00 	vldr	s15, [r3]
 8000dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dde:	edc7 7a03 	vstr	s15, [r7, #12]

	float Integral = 0;
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]

	float Derivative = 0;
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]

	float PID = Proportional + Integral + Derivative;
 8000dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e02:	edc7 7a00 	vstr	s15, [r7]

	if (PID >= 0)
 8000e06:	edd7 7a00 	vldr	s15, [r7]
 8000e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	db1d      	blt.n	8000e50 <UpdatePWM+0xac>
	{
		PID = 500 + PID;
 8000e14:	edd7 7a00 	vldr	s15, [r7]
 8000e18:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000ebc <UpdatePWM+0x118>
 8000e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e20:	edc7 7a00 	vstr	s15, [r7]
		if (PID < MAX_DUTY_CYCLE)
 8000e24:	edd7 7a00 	vldr	s15, [r7]
 8000e28:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000ec0 <UpdatePWM+0x11c>
 8000e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e34:	d509      	bpl.n	8000e4a <UpdatePWM+0xa6>
			PWMValue = PID;
 8000e36:	edd7 7a00 	vldr	s15, [r7]
 8000e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3e:	ee17 3a90 	vmov	r3, s15
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <UpdatePWM+0x120>)
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	e01f      	b.n	8000e8a <UpdatePWM+0xe6>
		else
			PID = MAX_DUTY_CYCLE;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <UpdatePWM+0x124>)
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	e01c      	b.n	8000e8a <UpdatePWM+0xe6>
	}
	else
	{
		PID = 500 + PID;
 8000e50:	edd7 7a00 	vldr	s15, [r7]
 8000e54:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000ebc <UpdatePWM+0x118>
 8000e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e5c:	edc7 7a00 	vstr	s15, [r7]
		if (PID > MIN_DUTY_CYCLE)
 8000e60:	edd7 7a00 	vldr	s15, [r7]
 8000e64:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000ecc <UpdatePWM+0x128>
 8000e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e70:	dd09      	ble.n	8000e86 <UpdatePWM+0xe2>
			PWMValue = PID;
 8000e72:	edd7 7a00 	vldr	s15, [r7]
 8000e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <UpdatePWM+0x120>)
 8000e82:	801a      	strh	r2, [r3, #0]
 8000e84:	e001      	b.n	8000e8a <UpdatePWM+0xe6>
		else
			PID = MIN_DUTY_CYCLE;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <UpdatePWM+0x12c>)
 8000e88:	603b      	str	r3, [r7, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000 - PWMValue);
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <UpdatePWM+0x120>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <UpdatePWM+0x130>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMValue);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <UpdatePWM+0x120>)
 8000e9a:	881a      	ldrh	r2, [r3, #0]
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <UpdatePWM+0x130>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	20000134 	.word	0x20000134
 8000eb4:	20000128 	.word	0x20000128
 8000eb8:	20000164 	.word	0x20000164
 8000ebc:	43fa0000 	.word	0x43fa0000
 8000ec0:	44610000 	.word	0x44610000
 8000ec4:	20000014 	.word	0x20000014
 8000ec8:	44610000 	.word	0x44610000
 8000ecc:	42c80000 	.word	0x42c80000
 8000ed0:	42c80000 	.word	0x42c80000
 8000ed4:	20000398 	.word	0x20000398

08000ed8 <CheckStatusRegister>:

void CheckStatusRegister(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	// Check bits in status register ONLY which could be written by Master.
	if 	(CHECK_BIT(JCUConfig.StatusRegister, ENABLE_MOTOR_Pos))
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <CheckStatusRegister+0x94>)
 8000ede:	88db      	ldrh	r3, [r3, #6]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d009      	beq.n	8000efc <CheckStatusRegister+0x24>
	{
		if (MotorState == MOTOR_DISABLED)			// enable motor if it is not enabled
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <CheckStatusRegister+0x98>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10e      	bne.n	8000f0e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_ENABLED;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <CheckStatusRegister+0x98>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
			EnableMotor();
 8000ef6:	f000 f8ab 	bl	8001050 <EnableMotor>
 8000efa:	e008      	b.n	8000f0e <CheckStatusRegister+0x36>
		}
	}
	else
	{
		if (MotorState != MOTOR_DISABLED)
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <CheckStatusRegister+0x98>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_DISABLED;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <CheckStatusRegister+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
			DisableMotor();
 8000f0a:	f000 f8c9 	bl	80010a0 <DisableMotor>
		}
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, SET_BRAKE_Pos))
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <CheckStatusRegister+0x94>)
 8000f10:	88db      	ldrh	r3, [r3, #6]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
	{
		// should  i reset brake??
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, GO_TO_TARGET_POSITION_Pos))
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <CheckStatusRegister+0x94>)
 8000f1a:	88db      	ldrh	r3, [r3, #6]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <CheckStatusRegister+0x5a>
	{
		if (MotorState == MOTOR_ENABLED)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <CheckStatusRegister+0x98>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d102      	bne.n	8000f32 <CheckStatusRegister+0x5a>
		{
			MotorState = MOTOR_RUN;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <CheckStatusRegister+0x98>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
	else
	{
		// decide what to do here
	}

	if (CHECK_BIT(JCUConfig.StatusRegister, STOP_MOTOR_Pos))
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <CheckStatusRegister+0x94>)
 8000f34:	88db      	ldrh	r3, [r3, #6]
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d013      	beq.n	8000f66 <CheckStatusRegister+0x8e>
	{
		JCUConfig.StatusRegister &=~ GO_TO_TARGET_POSITION;				// not go to target position anymore
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <CheckStatusRegister+0x94>)
 8000f40:	88db      	ldrh	r3, [r3, #6]
 8000f42:	f023 0308 	bic.w	r3, r3, #8
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <CheckStatusRegister+0x94>)
 8000f4a:	80da      	strh	r2, [r3, #6]
		// 1. Terminate PID
		MotorState = MOTOR_ENABLED;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <CheckStatusRegister+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
		// 2. set PWM 50%
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <CheckStatusRegister+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <CheckStatusRegister+0x9c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000134 	.word	0x20000134
 8000f70:	20000125 	.word	0x20000125
 8000f74:	20000398 	.word	0x20000398

08000f78 <RunMotor>:

void RunMotor(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

	EncoderRoutine();
 8000f7c:	f7ff fb36 	bl	80005ec <EncoderRoutine>

	HAL_ADC_Start_IT(&hadc1);
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <RunMotor+0x2c>)
 8000f82:	f001 fbd3 	bl	800272c <HAL_ADC_Start_IT>

	JCUState.Speed = SpeedCalculation();
 8000f86:	f000 f813 	bl	8000fb0 <SpeedCalculation>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <RunMotor+0x30>)
 8000f90:	809a      	strh	r2, [r3, #4]

	if (MotorState == MOTOR_RUN)
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <RunMotor+0x34>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d101      	bne.n	8000f9e <RunMotor+0x26>
	{
		UpdatePWM();
 8000f9a:	f7ff ff03 	bl	8000da4 <UpdatePWM>
	}

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000220 	.word	0x20000220
 8000fa8:	20000128 	.word	0x20000128
 8000fac:	20000125 	.word	0x20000125

08000fb0 <SpeedCalculation>:


int16_t SpeedCalculation(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	if (counter < 9)
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <SpeedCalculation+0x88>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d810      	bhi.n	8000fde <SpeedCalculation+0x2e>
	{
		counter++;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <SpeedCalculation+0x88>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <SpeedCalculation+0x88>)
 8000fc6:	801a      	strh	r2, [r3, #0]
		AveragePosititon = (JCUState.Angle/4) + AveragePosititon;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <SpeedCalculation+0x8c>)
 8000fca:	885b      	ldrh	r3, [r3, #2]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <SpeedCalculation+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <SpeedCalculation+0x90>)
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e024      	b.n	8001028 <SpeedCalculation+0x78>
	}
	else
	{
		counter = 0;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <SpeedCalculation+0x88>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	801a      	strh	r2, [r3, #0]
		AveragePosititon = AveragePosititon + JCUState.Angle;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SpeedCalculation+0x8c>)
 8000fe6:	885b      	ldrh	r3, [r3, #2]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <SpeedCalculation+0x90>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <SpeedCalculation+0x90>)
 8000ff2:	6013      	str	r3, [r2, #0]
		AveragePosititon = AveragePosititon/10;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <SpeedCalculation+0x90>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <SpeedCalculation+0x94>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <SpeedCalculation+0x90>)
 8001002:	6013      	str	r3, [r2, #0]
		AverageSpeed = (AveragePosititon - PreviousAngle);
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <SpeedCalculation+0x90>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <SpeedCalculation+0x98>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <SpeedCalculation+0x9c>)
 8001016:	801a      	strh	r2, [r3, #0]
		PreviousAngle = AveragePosititon;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <SpeedCalculation+0x90>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <SpeedCalculation+0x98>)
 8001020:	801a      	strh	r2, [r3, #0]
		AveragePosititon = 0;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <SpeedCalculation+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
	}


	return AverageSpeed;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <SpeedCalculation+0x9c>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000058 	.word	0x20000058
 800103c:	20000128 	.word	0x20000128
 8001040:	20000054 	.word	0x20000054
 8001044:	cccccccd 	.word	0xcccccccd
 8001048:	2000004e 	.word	0x2000004e
 800104c:	20000050 	.word	0x20000050

08001050 <EnableMotor>:

void EnableMotor(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim1);
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <EnableMotor+0x48>)
 8001056:	f005 f823 	bl	80060a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <EnableMotor+0x48>)
 800105e:	f005 f8f9 	bl	8006254 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8001062:	2100      	movs	r1, #0
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <EnableMotor+0x48>)
 8001066:	f006 f847 	bl	80070f8 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800106a:	2104      	movs	r1, #4
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <EnableMotor+0x48>)
 800106e:	f005 f8f1 	bl	8006254 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8001072:	2104      	movs	r1, #4
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <EnableMotor+0x48>)
 8001076:	f006 f83f 	bl	80070f8 <HAL_TIMEx_PWMN_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <EnableMotor+0x48>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <EnableMotor+0x48>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
	MotorState = MOTOR_ENABLED;
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <EnableMotor+0x4c>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000398 	.word	0x20000398
 800109c:	20000125 	.word	0x20000125

080010a0 <DisableMotor>:

void DisableMotor(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <DisableMotor+0x34>)
 80010a6:	f005 f84f 	bl	8006148 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80010aa:	2100      	movs	r1, #0
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <DisableMotor+0x34>)
 80010ae:	f005 f9f5 	bl	800649c <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 80010b2:	2100      	movs	r1, #0
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <DisableMotor+0x34>)
 80010b6:	f006 f8ef 	bl	8007298 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80010ba:	2104      	movs	r1, #4
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <DisableMotor+0x34>)
 80010be:	f005 f9ed 	bl	800649c <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_2);
 80010c2:	2104      	movs	r1, #4
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <DisableMotor+0x34>)
 80010c6:	f006 f8e7 	bl	8007298 <HAL_TIMEx_PWMN_Stop_IT>
	MotorState = MOTOR_DISABLED;
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <DisableMotor+0x38>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000398 	.word	0x20000398
 80010d8:	20000125 	.word	0x20000125

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 ff8d 	bl	8001ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f838 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f000 faba 	bl	8001660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ec:	f000 fa3a 	bl	8001564 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80010f0:	f000 fa80 	bl	80015f4 <MX_DMA_Init>
  MX_ADC1_Init();
 80010f4:	f000 f882 	bl	80011fc <MX_ADC1_Init>
  MX_TIM1_Init();
 80010f8:	f000 f950 	bl	800139c <MX_TIM1_Init>
  MX_SPI1_Init();
 80010fc:	f000 f910 	bl	8001320 <MX_SPI1_Init>
  MX_CRC_Init();
 8001100:	f000 f8e0 	bl	80012c4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001104:	f000 f9e6 	bl	80014d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // disable interrupt of DMA - half of reveive
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <main+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <main+0x68>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0204 	bic.w	r2, r2, #4
 8001116:	601a      	str	r2, [r3, #0]

  hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <main+0x68>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2264      	movs	r2, #100	; 0x64
 800111e:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001120:	2264      	movs	r2, #100	; 0x64
 8001122:	4909      	ldr	r1, [pc, #36]	; (8001148 <main+0x6c>)
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <main+0x70>)
 8001126:	f006 fb3d 	bl	80077a4 <HAL_UART_Receive_DMA>


  /*
   * Test part
   */
  JCUConfig.KpPossitionLoop = 0.2;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <main+0x74>)
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <main+0x78>)
 800112e:	615a      	str	r2, [r3, #20]
  JCUConfig.TargetAngel = 8000;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <main+0x74>)
 8001132:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001136:	809a      	strh	r2, [r3, #4]
  JCUConfig.StatusRegister = 0x01;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <main+0x74>)
 800113a:	2201      	movs	r2, #1
 800113c:	80da      	strh	r2, [r3, #6]
  CheckStatusRegister();
 800113e:	f7ff fecb 	bl	8000ed8 <CheckStatusRegister>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x66>
 8001144:	20000284 	.word	0x20000284
 8001148:	2000005c 	.word	0x2000005c
 800114c:	20000314 	.word	0x20000314
 8001150:	20000134 	.word	0x20000134
 8001154:	3e4ccccd 	.word	0x3e4ccccd

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b096      	sub	sp, #88	; 0x58
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2244      	movs	r2, #68	; 0x44
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f007 faec 	bl	8008744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800117a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800117e:	f003 f903 	bl	8004388 <HAL_PWREx_ControlVoltageScaling>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001188:	f000 fb6a 	bl	8001860 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2310      	movs	r3, #16
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011a6:	230a      	movs	r3, #10
 80011a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011aa:	2307      	movs	r3, #7
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 f93a 	bl	8004434 <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011c6:	f000 fb4b 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2303      	movs	r3, #3
 80011d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	2104      	movs	r1, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fd46 	bl	8004c74 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ee:	f000 fb37 	bl	8001860 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3758      	adds	r7, #88	; 0x58
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001214:	4a29      	ldr	r2, [pc, #164]	; (80012bc <MX_ADC1_Init+0xc0>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_ADC1_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_ADC1_Init+0xbc>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001232:	2204      	movs	r2, #4
 8001234:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001238:	2200      	movs	r2, #0
 800123a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_ADC1_Init+0xbc>)
 800123e:	2200      	movs	r2, #0
 8001240:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001244:	2201      	movs	r2, #1
 8001246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_ADC1_Init+0xbc>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001252:	2200      	movs	r2, #0
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001258:	2200      	movs	r2, #0
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_ADC1_Init+0xbc>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001266:	2200      	movs	r2, #0
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_ADC1_Init+0xbc>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001272:	4811      	ldr	r0, [pc, #68]	; (80012b8 <MX_ADC1_Init+0xbc>)
 8001274:	f001 f912 	bl	800249c <HAL_ADC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800127e:	f000 faef 	bl	8001860 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_ADC1_Init+0xc4>)
 8001284:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001286:	2306      	movs	r3, #6
 8001288:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800128a:	2302      	movs	r3, #2
 800128c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800128e:	237f      	movs	r3, #127	; 0x7f
 8001290:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001292:	2304      	movs	r3, #4
 8001294:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_ADC1_Init+0xbc>)
 80012a0:	f001 fcce 	bl	8002c40 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012aa:	f000 fad9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000220 	.word	0x20000220
 80012bc:	50040000 	.word	0x50040000
 80012c0:	2e300800 	.word	0x2e300800

080012c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	hcrc.Instance = CRC;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_CRC_Init+0x54>)
 80012ca:	4a14      	ldr	r2, [pc, #80]	; (800131c <MX_CRC_Init+0x58>)
 80012cc:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_CRC_Init+0x54>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_CRC_Init+0x54>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_CRC_Init+0x54>)
 80012dc:	2220      	movs	r2, #32
 80012de:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_CRC_Init+0x54>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	619a      	str	r2, [r3, #24]
	hcrc.Init.GeneratingPolynomial = 0x8005;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_CRC_Init+0x54>)
 80012e8:	f248 0205 	movw	r2, #32773	; 0x8005
 80012ec:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_CRC_Init+0x54>)
 80012f0:	2208      	movs	r2, #8
 80012f2:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0xFFFF;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_CRC_Init+0x54>)
 80012f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fa:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_CRC_Init+0x54>)
 80012fe:	2201      	movs	r2, #1
 8001300:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_CRC_Init+0x54>)
 8001304:	f002 fa22 	bl	800374c <HAL_CRC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_CRC_Init+0x4e>
	{
	Error_Handler();
 800130e:	f000 faa7 	bl	8001860 <Error_Handler>

  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001b4 	.word	0x200001b4
 800131c:	40023000 	.word	0x40023000

08001320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_SPI1_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_SPI1_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_SPI1_Init+0x74>)
 800132c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_SPI1_Init+0x74>)
 800133a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800133e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_SPI1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_SPI1_Init+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_SPI1_Init+0x74>)
 800134e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001352:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_SPI1_Init+0x74>)
 8001356:	2218      	movs	r2, #24
 8001358:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_SPI1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_SPI1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_SPI1_Init+0x74>)
 800136e:	2207      	movs	r2, #7
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_SPI1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_SPI1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_SPI1_Init+0x74>)
 8001380:	f004 f964 	bl	800564c <HAL_SPI_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 fa69 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200003e4 	.word	0x200003e4
 8001398:	40013000 	.word	0x40013000

0800139c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b096      	sub	sp, #88	; 0x58
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	222c      	movs	r2, #44	; 0x2c
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f007 f9bb 	bl	8008744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <MX_TIM1_Init+0x130>)
 80013d0:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <MX_TIM1_Init+0x134>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <MX_TIM1_Init+0x130>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_TIM1_Init+0x130>)
 80013dc:	2220      	movs	r2, #32
 80013de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <MX_TIM1_Init+0x130>)
 80013e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_TIM1_Init+0x130>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <MX_TIM1_Init+0x130>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_TIM1_Init+0x130>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fa:	4834      	ldr	r0, [pc, #208]	; (80014cc <MX_TIM1_Init+0x130>)
 80013fc:	f004 fed3 	bl	80061a6 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 fa2b 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800141a:	4619      	mov	r1, r3
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <MX_TIM1_Init+0x130>)
 800141e:	f005 ffd3 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001428:	f000 fa1a 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	; (80014cc <MX_TIM1_Init+0x130>)
 8001452:	f005 fa11 	bl	8006878 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800145c:	f000 fa00 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001464:	2204      	movs	r2, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <MX_TIM1_Init+0x130>)
 800146a:	f005 fa05 	bl	8006878 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001474:	f000 f9f4 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001484:	230a      	movs	r3, #10
 8001486:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM1_Init+0x130>)
 80014ae:	f005 fff1 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80014b8:	f000 f9d2 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM1_Init+0x130>)
 80014be:	f000 faf7 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3758      	adds	r7, #88	; 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000398 	.word	0x20000398
 80014d0:	40012c00 	.word	0x40012c00

080014d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <MX_USART1_UART_Init+0x84>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3000000;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <MX_USART1_UART_Init+0x88>)
 80014e2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014f8:	220c      	movs	r2, #12
 80014fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_USART1_UART_Init+0x80>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001508:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_USART1_UART_Init+0x80>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	480f      	ldr	r0, [pc, #60]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001518:	f006 f877 	bl	800760a <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001522:	f000 f99d 	bl	8001860 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart1.Instance->RTOR = ModbusTimeout;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <MX_USART1_UART_Init+0x8c>)
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	615a      	str	r2, [r3, #20]
  huart1.Instance->CR1 |= USART_CR1_RTOIE;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800153e:	601a      	str	r2, [r3, #0]
  huart1.Instance->CR2 |= USART_CR2_RTOEN;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <MX_USART1_UART_Init+0x80>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800154e:	605a      	str	r2, [r3, #4]



  /* USER CODE END USART1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000314 	.word	0x20000314
 8001558:	40013800 	.word	0x40013800
 800155c:	002dc6c0 	.word	0x002dc6c0
 8001560:	20000018 	.word	0x20000018

08001564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 800156a:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <MX_USART2_UART_Init+0x84>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 8001570:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <MX_USART2_UART_Init+0x88>)
 8001572:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 8001588:	220c      	movs	r2, #12
 800158a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 8001594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001598:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015a8:	f006 f82f 	bl	800760a <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015b2:	f000 f955 	bl	8001860 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart2.Instance->RTOR = ModbusTimeout;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <MX_USART2_UART_Init+0x8c>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	615a      	str	r2, [r3, #20]
  huart2.Instance->CR1 |= USART_CR1_RTOIE;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015ce:	601a      	str	r2, [r3, #0]
  huart2.Instance->CR2 |= USART_CR2_RTOEN;
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <MX_USART2_UART_Init+0x80>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE END USART2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000448 	.word	0x20000448
 80015e8:	40004400 	.word	0x40004400
 80015ec:	001e8480 	.word	0x001e8480
 80015f0:	20000018 	.word	0x20000018

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_DMA_Init+0x68>)
 80015fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_DMA_Init+0x68>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6493      	str	r3, [r2, #72]	; 0x48
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_DMA_Init+0x68>)
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200e      	movs	r0, #14
 8001618:	f002 f861 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800161c:	200e      	movs	r0, #14
 800161e:	f002 f87a 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200f      	movs	r0, #15
 8001628:	f002 f859 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800162c:	200f      	movs	r0, #15
 800162e:	f002 f872 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2010      	movs	r0, #16
 8001638:	f002 f851 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800163c:	2010      	movs	r0, #16
 800163e:	f002 f86a 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2011      	movs	r0, #17
 8001648:	f002 f849 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800164c:	2011      	movs	r0, #17
 800164e:	f002 f862 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b32      	ldr	r3, [pc, #200]	; (8001740 <MX_GPIO_Init+0xe0>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a31      	ldr	r2, [pc, #196]	; (8001740 <MX_GPIO_Init+0xe0>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <MX_GPIO_Init+0xe0>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <MX_GPIO_Init+0xe0>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <MX_GPIO_Init+0xe0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MX_GPIO_Init+0xe0>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <MX_GPIO_Init+0xe0>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a25      	ldr	r2, [pc, #148]	; (8001740 <MX_GPIO_Init+0xe0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <MX_GPIO_Init+0xe0>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <MX_GPIO_Init+0xe4>)
 80016c6:	f002 fe1f 	bl	8004308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2110      	movs	r1, #16
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f002 fe19 	bl	8004308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_FC_Pin|LED_WHITE_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2118      	movs	r1, #24
 80016da:	481b      	ldr	r0, [pc, #108]	; (8001748 <MX_GPIO_Init+0xe8>)
 80016dc:	f002 fe14 	bl	8004308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 80016e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <MX_GPIO_Init+0xe4>)
 80016fa:	f002 fc9b 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80016fe:	2310      	movs	r3, #16
 8001700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f002 fc8c 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_FC_Pin LED_WHITE_Pin */
  GPIO_InitStruct.Pin = RS485_FC_Pin|LED_WHITE_Pin;
 800171c:	2318      	movs	r3, #24
 800171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_GPIO_Init+0xe8>)
 8001734:	f002 fc7e 	bl	8004034 <HAL_GPIO_Init>

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	48000800 	.word	0x48000800
 8001748:	48000400 	.word	0x48000400

0800174c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	RunMotor();
 8001754:	f7ff fc10 	bl	8000f78 <RunMotor>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	JCUState.Torque = HAL_ADC_GetValue(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f001 f894 	bl	8002896 <HAL_ADC_GetValue>
 800176e:	4603      	mov	r3, r0
 8001770:	b21a      	sxth	r2, r3
 8001772:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_ADC_ConvCpltCallback+0x20>)
 8001774:	80da      	strh	r2, [r3, #6]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, JCUState.Torque/4);
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 4096-JCUState.Torque/4);
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000128 	.word	0x20000128

08001784 <EndofBlock>:

void EndofBlock(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	// Check if it is timeout, and no new byte is coming
	if (huart1.Instance->ISR & USART_ISR_RTOF)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <EndofBlock+0x5c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01e      	beq.n	80017d6 <EndofBlock+0x52>
	{
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		uint8_t Length = BUFFSIZE - hdma_usart1_rx.Instance->CNDTR;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <EndofBlock+0x60>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80017a4:	71fb      	strb	r3, [r7, #7]
		__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_RTOF);
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <EndofBlock+0x5c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ae:	621a      	str	r2, [r3, #32]
		//HAL_UART_Abort(&huart1);

		// Check if we received something, but not some glitch on the line
		if (Length>0)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <EndofBlock+0x3e>
		{
			ModbusRTURoutine(RxData, Length);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4619      	mov	r1, r3
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <EndofBlock+0x64>)
 80017bc:	f7fe fff8 	bl	80007b0 <ModbusRTURoutine>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
		}

	}
}
 80017c0:	e009      	b.n	80017d6 <EndofBlock+0x52>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2108      	movs	r1, #8
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <EndofBlock+0x68>)
 80017c8:	f002 fd9e 	bl	8004308 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 80017cc:	2264      	movs	r2, #100	; 0x64
 80017ce:	4906      	ldr	r1, [pc, #24]	; (80017e8 <EndofBlock+0x64>)
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <EndofBlock+0x5c>)
 80017d2:	f005 ffe7 	bl	80077a4 <HAL_UART_Receive_DMA>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000314 	.word	0x20000314
 80017e4:	20000284 	.word	0x20000284
 80017e8:	2000005c 	.word	0x2000005c
 80017ec:	48000400 	.word	0x48000400

080017f0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2108      	movs	r1, #8
 8001810:	480f      	ldr	r0, [pc, #60]	; (8001850 <HAL_UART_TxCpltCallback+0x4c>)
 8001812:	f002 fd79 	bl	8004308 <HAL_GPIO_WritePin>
	// disable DMA for reseting DMA's counter, after enable again
	__HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_UART_TxCpltCallback+0x50>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_UART_TxCpltCallback+0x50>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_UART_TxCpltCallback+0x50>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(&hdma_usart1_rx);
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_UART_TxCpltCallback+0x50>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_UART_TxCpltCallback+0x50>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 800183e:	2264      	movs	r2, #100	; 0x64
 8001840:	4905      	ldr	r1, [pc, #20]	; (8001858 <HAL_UART_TxCpltCallback+0x54>)
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <HAL_UART_TxCpltCallback+0x58>)
 8001844:	f005 ffae 	bl	80077a4 <HAL_UART_Receive_DMA>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	48000400 	.word	0x48000400
 8001854:	20000284 	.word	0x20000284
 8001858:	2000005c 	.word	0x2000005c
 800185c:	20000314 	.word	0x20000314

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x44>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_MspInit+0x44>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6613      	str	r3, [r2, #96]	; 0x60
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x44>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x44>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x44>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x44>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09e      	sub	sp, #120	; 0x78
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2254      	movs	r2, #84	; 0x54
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f006 ff35 	bl	8008744 <memset>
  if(hadc->Instance==ADC1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <HAL_ADC_MspInit+0xd0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d14b      	bne.n	800197c <HAL_ADC_MspInit+0xc8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018ee:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80018f0:	2302      	movs	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 80018f8:	230a      	movs	r3, #10
 80018fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018fc:	2307      	movs	r3, #7
 80018fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001904:	2302      	movs	r3, #2
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fbb4 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800191e:	f7ff ff9f 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_ADC_MspInit+0xd4>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_ADC_MspInit+0xd4>)
 8001928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_ADC_MspInit+0xd4>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_ADC_MspInit+0xd4>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <HAL_ADC_MspInit+0xd4>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_ADC_MspInit+0xd4>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001956:	230b      	movs	r3, #11
 8001958:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f002 fb64 	bl	8004034 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2012      	movs	r0, #18
 8001972:	f001 feb4 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001976:	2012      	movs	r0, #18
 8001978:	f001 fecd 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	3778      	adds	r7, #120	; 0x78
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	50040000 	.word	0x50040000
 8001988:	40021000 	.word	0x40021000

0800198c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_CRC_MspInit+0x38>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10b      	bne.n	80019b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	6493      	str	r3, [r2, #72]	; 0x48
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023000 	.word	0x40023000
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <HAL_SPI_MspInit+0x90>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d131      	bne.n	8001a52 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_SPI_MspInit+0x94>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8001a1e:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a30:	2305      	movs	r3, #5
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f002 faf9 	bl	8004034 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2023      	movs	r0, #35	; 0x23
 8001a48:	f001 fe49 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a4c:	2023      	movs	r0, #35	; 0x23
 8001a4e:	f001 fe62 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x44>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d113      	bne.n	8001a9e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_PWM_MspInit+0x48>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_TIM_PWM_MspInit+0x48>)
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a80:	6613      	str	r3, [r2, #96]	; 0x60
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_PWM_MspInit+0x48>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2019      	movs	r0, #25
 8001a94:	f001 fe23 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a98:	2019      	movs	r0, #25
 8001a9a:	f001 fe3c 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d139      	bne.n	8001b46 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b02:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f002 fa87 	bl	8004034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b26:	2301      	movs	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001b42:	f002 fa77 	bl	8004034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000400 	.word	0x48000400

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0a0      	sub	sp, #128	; 0x80
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	2254      	movs	r2, #84	; 0x54
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f006 fde1 	bl	8008744 <memset>
  if(huart->Instance==USART1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4aa1      	ldr	r2, [pc, #644]	; (8001e0c <HAL_UART_MspInit+0x2b0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	f040 8091 	bne.w	8001cb0 <HAL_UART_MspInit+0x154>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fa70 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ba6:	f7ff fe5b 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001baa:	4b99      	ldr	r3, [pc, #612]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	4a98      	ldr	r2, [pc, #608]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb6:	4b96      	ldr	r3, [pc, #600]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b93      	ldr	r3, [pc, #588]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bce:	4b90      	ldr	r3, [pc, #576]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bda:	23c0      	movs	r3, #192	; 0xc0
 8001bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bea:	2307      	movs	r3, #7
 8001bec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4887      	ldr	r0, [pc, #540]	; (8001e14 <HAL_UART_MspInit+0x2b8>)
 8001bf6:	f002 fa1d 	bl	8004034 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001bfa:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001bfc:	4a87      	ldr	r2, [pc, #540]	; (8001e1c <HAL_UART_MspInit+0x2c0>)
 8001bfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001c00:	4b85      	ldr	r3, [pc, #532]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c02:	2202      	movs	r2, #2
 8001c04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c06:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0c:	4b82      	ldr	r3, [pc, #520]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c12:	4b81      	ldr	r3, [pc, #516]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c18:	4b7f      	ldr	r3, [pc, #508]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1e:	4b7e      	ldr	r3, [pc, #504]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c24:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2a:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c30:	4879      	ldr	r0, [pc, #484]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c32:	f001 ff89 	bl	8003b48 <HAL_DMA_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001c3c:	f7ff fe10 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a75      	ldr	r2, [pc, #468]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c44:	671a      	str	r2, [r3, #112]	; 0x70
 8001c46:	4a74      	ldr	r2, [pc, #464]	; (8001e18 <HAL_UART_MspInit+0x2bc>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001c4c:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c4e:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <HAL_UART_MspInit+0x2c8>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b6e      	ldr	r3, [pc, #440]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c70:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c76:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c82:	4867      	ldr	r0, [pc, #412]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c84:	f001 ff60 	bl	8003b48 <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8001c8e:	f7ff fde7 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a62      	ldr	r2, [pc, #392]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c96:	66da      	str	r2, [r3, #108]	; 0x6c
 8001c98:	4a61      	ldr	r2, [pc, #388]	; (8001e20 <HAL_UART_MspInit+0x2c4>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2025      	movs	r0, #37	; 0x25
 8001ca4:	f001 fd1b 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ca8:	2025      	movs	r0, #37	; 0x25
 8001caa:	f001 fd34 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cae:	e0a8      	b.n	8001e02 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_UART_MspInit+0x2cc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f040 80a3 	bne.w	8001e02 <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 f9d9 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8001cd4:	f7ff fdc4 	bl	8001860 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_UART_MspInit+0x2b4>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d26:	f002 f985 	bl	8004034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f002 f973 	bl	8004034 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_UART_MspInit+0x2d4>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d56:	2202      	movs	r2, #2
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d84:	4829      	ldr	r0, [pc, #164]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d86:	f001 fedf 	bl	8003b48 <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8001d90:	f7ff fd66 	bl	8001860 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d98:	671a      	str	r2, [r3, #112]	; 0x70
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_UART_MspInit+0x2d0>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_UART_MspInit+0x2dc>)
 8001da4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dae:	2210      	movs	r2, #16
 8001db0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dd8:	f001 feb6 	bl	8003b48 <HAL_DMA_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8001de2:	f7ff fd3d 	bl	8001860 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dea:	66da      	str	r2, [r3, #108]	; 0x6c
 8001dec:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_UART_MspInit+0x2d8>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	2026      	movs	r0, #38	; 0x26
 8001df8:	f001 fc71 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfc:	2026      	movs	r0, #38	; 0x26
 8001dfe:	f001 fc8a 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3780      	adds	r7, #128	; 0x80
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	20000284 	.word	0x20000284
 8001e1c:	40020058 	.word	0x40020058
 8001e20:	200001d8 	.word	0x200001d8
 8001e24:	40020044 	.word	0x40020044
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	2000016c 	.word	0x2000016c
 8001e30:	4002006c 	.word	0x4002006c
 8001e34:	200002cc 	.word	0x200002cc
 8001e38:	40020080 	.word	0x40020080

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <NMI_Handler+0x4>

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f90e 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA1_Channel4_IRQHandler+0x10>)
 8001e96:	f001 ffee 	bl	8003e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001d8 	.word	0x200001d8

08001ea4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <DMA1_Channel5_IRQHandler+0x10>)
 8001eaa:	f001 ffe4 	bl	8003e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000284 	.word	0x20000284

08001eb8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <DMA1_Channel6_IRQHandler+0x10>)
 8001ebe:	f001 ffda 	bl	8003e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000016c 	.word	0x2000016c

08001ecc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA1_Channel7_IRQHandler+0x10>)
 8001ed2:	f001 ffd0 	bl	8003e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002cc 	.word	0x200002cc

08001ee0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <ADC1_IRQHandler+0x10>)
 8001ee6:	f000 fce3 	bl	80028b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000220 	.word	0x20000220

08001ef4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001efa:	f004 fb9d 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000398 	.word	0x20000398

08001f08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <SPI1_IRQHandler+0x10>)
 8001f0e:	f003 fcf1 	bl	80058f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200003e4 	.word	0x200003e4

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	EndofBlock();
 8001f20:	f7ff fc30 	bl	8001784 <EndofBlock>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <USART1_IRQHandler+0x14>)
 8001f26:	f005 fc81 	bl	800782c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000314 	.word	0x20000314

08001f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <USART2_IRQHandler+0x10>)
 8001f3a:	f005 fc77 	bl	800782c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000448 	.word	0x20000448

08001f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <SystemInit+0x5c>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <SystemInit+0x5c>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <SystemInit+0x60>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <SystemInit+0x60>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <SystemInit+0x60>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <SystemInit+0x60>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <SystemInit+0x60>)
 8001f74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <SystemInit+0x60>)
 8001f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <SystemInit+0x60>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <SystemInit+0x60>)
 8001f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SystemInit+0x60>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00
 8001fa8:	40021000 	.word	0x40021000

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff ffca 	bl	8001f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fb6:	e003      	b.n	8001fc0 <LoopCopyDataInit>

08001fb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fbe:	3104      	adds	r1, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fc8:	d3f6      	bcc.n	8001fb8 <CopyDataInit>
	ldr	r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fcc:	e002      	b.n	8001fd4 <LoopFillZerobss>

08001fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fd0:	f842 3b04 	str.w	r3, [r2], #4

08001fd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fd8:	d3f9      	bcc.n	8001fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f006 fb8f 	bl	80086fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7ff f87d 	bl	80010dc <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001fe8:	080087c4 	.word	0x080087c4
	ldr	r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ff0:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8001ff4:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8001ff8:	200004d0 	.word	0x200004d0

08001ffc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <CAN1_RX0_IRQHandler>

08001ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f001 fb5d 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200e:	2000      	movs	r0, #0
 8002010:	f000 f80e 	bl	8002030 <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	e001      	b.n	8002024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002020:	f7ff fc24 	bl	800186c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002024:	79fb      	ldrb	r3, [r7, #7]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_InitTick+0x6c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d023      	beq.n	800208c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_InitTick+0x70>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_InitTick+0x6c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fb69 	bl	8003732 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d809      	bhi.n	8002080 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f001 fb33 	bl	80036de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_InitTick+0x74>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e007      	b.n	8002090 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e004      	b.n	8002090 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e001      	b.n	8002090 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000024 	.word	0x20000024
 80020a0:	2000001c 	.word	0x2000001c
 80020a4:	20000020 	.word	0x20000020

080020a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x20>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x24>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_IncTick+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000024 	.word	0x20000024
 80020cc:	200004cc 	.word	0x200004cc

080020d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_GetTick+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200004cc 	.word	0x200004cc

080020e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	609a      	str	r2, [r3, #8]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3360      	adds	r3, #96	; 0x60
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <LL_ADC_SetOffset+0x44>)
 8002172:	4013      	ands	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	4313      	orrs	r3, r2
 8002180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	03fff000 	.word	0x03fff000

08002198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	461a      	mov	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3360      	adds	r3, #96	; 0x60
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3330      	adds	r3, #48	; 0x30
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	211f      	movs	r1, #31
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	f003 011f 	and.w	r1, r3, #31
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	431a      	orrs	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800229e:	b480      	push	{r7}
 80022a0:	b087      	sub	sp, #28
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3314      	adds	r3, #20
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	0e5b      	lsrs	r3, r3, #25
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	0d1b      	lsrs	r3, r3, #20
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2107      	movs	r1, #7
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	0d1b      	lsrs	r3, r3, #20
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	431a      	orrs	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0318 	and.w	r3, r3, #24
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002318:	40d9      	lsrs	r1, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	400b      	ands	r3, r1
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	0007ffff 	.word	0x0007ffff

0800233c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800234c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6093      	str	r3, [r2, #8]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d101      	bne.n	800237a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023c4:	d101      	bne.n	80023ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <LL_ADC_IsEnabled+0x18>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <LL_ADC_IsEnabled+0x1a>
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002436:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d101      	bne.n	8002466 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b08      	cmp	r3, #8
 8002486:	d101      	bne.n	800248c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e12c      	b.n	8002710 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff f9f5 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff3f 	bl	8002360 <LL_ADC_IsDeepPowerDownEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff25 	bl	800233c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff5a 	bl	80023b0 <LL_ADC_IsInternalRegulatorEnabled>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d115      	bne.n	800252e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff3e 	bl	8002388 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800250c:	4b82      	ldr	r3, [pc, #520]	; (8002718 <HAL_ADC_Init+0x27c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	4a82      	ldr	r2, [pc, #520]	; (800271c <HAL_ADC_Init+0x280>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002520:	e002      	b.n	8002528 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff3c 	bl	80023b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff75 	bl	800244e <LL_ADC_REG_IsConversionOngoing>
 8002564:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80c5 	bne.w	80026fe <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80c1 	bne.w	80026fe <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002584:	f043 0202 	orr.w	r2, r3, #2
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff35 	bl	8002400 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800259c:	4860      	ldr	r0, [pc, #384]	; (8002720 <HAL_ADC_Init+0x284>)
 800259e:	f7ff ff2f 	bl	8002400 <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4619      	mov	r1, r3
 80025ae:	485d      	ldr	r0, [pc, #372]	; (8002724 <HAL_ADC_Init+0x288>)
 80025b0:	f7ff fd9a 	bl	80020e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e5b      	ldrb	r3, [r3, #25]
 80025b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	045b      	lsls	r3, r3, #17
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <HAL_ADC_Init+0x28c>)
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff12 	bl	800244e <LL_ADC_REG_IsConversionOngoing>
 800262a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff1f 	bl	8002474 <LL_ADC_INJ_IsConversionOngoing>
 8002636:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d13d      	bne.n	80026ba <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d13a      	bne.n	80026ba <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002648:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002650:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002660:	f023 0302 	bic.w	r3, r3, #2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	69b9      	ldr	r1, [r7, #24]
 800266a:	430b      	orrs	r3, r1
 800266c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002674:	2b01      	cmp	r3, #1
 8002676:	d118      	bne.n	80026aa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800269a:	430a      	orrs	r2, r1
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	611a      	str	r2, [r3, #16]
 80026a8:	e007      	b.n	80026ba <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10c      	bne.n	80026dc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f023 010f 	bic.w	r1, r3, #15
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
 80026da:	e007      	b.n	80026ec <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020f 	bic.w	r2, r2, #15
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f023 0303 	bic.w	r3, r3, #3
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
 80026fc:	e007      	b.n	800270e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800270e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000001c 	.word	0x2000001c
 800271c:	053e2d63 	.word	0x053e2d63
 8002720:	50040000 	.word	0x50040000
 8002724:	50040300 	.word	0x50040300
 8002728:	fff0c007 	.word	0xfff0c007

0800272c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe88 	bl	800244e <LL_ADC_REG_IsConversionOngoing>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 80a1 	bne.w	8002888 <HAL_ADC_Start_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_ADC_Start_IT+0x28>
 8002750:	2302      	movs	r3, #2
 8002752:	e09c      	b.n	800288e <HAL_ADC_Start_IT+0x162>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fe4f 	bl	8003400 <ADC_Enable>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 8088 	bne.w	800287e <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f023 0206 	bic.w	r2, r3, #6
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	659a      	str	r2, [r3, #88]	; 0x58
 800279a:	e002      	b.n	80027a2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	221c      	movs	r2, #28
 80027a8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 021c 	bic.w	r2, r2, #28
 80027c0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d108      	bne.n	80027dc <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0208 	orr.w	r2, r2, #8
 80027d8:	605a      	str	r2, [r3, #4]
          break;
 80027da:	e008      	b.n	80027ee <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0204 	orr.w	r2, r2, #4
 80027ea:	605a      	str	r2, [r3, #4]
          break;
 80027ec:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0210 	orr.w	r2, r2, #16
 8002804:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02d      	beq.n	8002870 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800281c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d110      	bne.n	800284e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0220 	bic.w	r2, r2, #32
 800283a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800284a:	605a      	str	r2, [r3, #4]
            break;
 800284c:	e011      	b.n	8002872 <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0220 	orr.w	r2, r2, #32
 800286c:	605a      	str	r2, [r3, #4]
            break;
 800286e:	e000      	b.n	8002872 <HAL_ADC_Start_IT+0x146>
        }
      }
 8002870:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fdd5 	bl	8002426 <LL_ADC_REG_StartConversion>
 800287c:	e006      	b.n	800288c <HAL_ADC_Start_IT+0x160>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002886:	e001      	b.n	800288c <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_ADC_IRQHandler+0x56>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fe0b 	bl	8003514 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_ADC_IRQHandler+0x6a>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05e      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d059      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fc55 	bl	80021fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03e      	beq.n	80029d4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d135      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b08      	cmp	r3, #8
 8002974:	d12e      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fd67 	bl	800244e <LL_ADC_REG_IsConversionOngoing>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11a      	bne.n	80029bc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 020c 	bic.w	r2, r2, #12
 8002994:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d112      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
 80029ba:	e00b      	b.n	80029d4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fe fec3 	bl	8001760 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	220c      	movs	r2, #12
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x146>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d072      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d06d      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fc26 	bl	8002278 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a2c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fbe1 	bl	80021fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a38:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d047      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_ADC_IRQHandler+0x1b2>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03f      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d13a      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d133      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d12e      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fcf8 	bl	8002474 <LL_ADC_INJ_IsConversionOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11a      	bne.n	8002ac0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d112      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
 8002abe:	e00b      	b.n	8002ad8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fcf3 	bl	80034c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2260      	movs	r2, #96	; 0x60
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d011      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x264>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f886 	bl	8002c18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x294>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fcd9 	bl	80034ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x2c4>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fccb 	bl	8003500 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x324>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d025      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e008      	b.n	8002ba8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10e      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f830 	bl	8002c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d018      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x360>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f043 0208 	orr.w	r2, r3, #8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c08:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fc64 	bl	80034d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0b6      	sub	sp, #216	; 0xd8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x22>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e3b9      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x796>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fbed 	bl	800244e <LL_ADC_REG_IsConversionOngoing>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 839e 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d824      	bhi.n	8002cce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	3b02      	subs	r3, #2
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d81b      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x86>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <HAL_ADC_ConfigChannel+0x54>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cad 	.word	0x08002cad
 8002c9c:	08002cb5 	.word	0x08002cb5
 8002ca0:	08002cbd 	.word	0x08002cbd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	605a      	str	r2, [r3, #4]
          break;
 8002caa:	e011      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2212      	movs	r2, #18
 8002cb0:	605a      	str	r2, [r3, #4]
          break;
 8002cb2:	e00d      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	605a      	str	r2, [r3, #4]
          break;
 8002cba:	e009      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc2:	605a      	str	r2, [r3, #4]
          break;
 8002cc4:	e004      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2206      	movs	r2, #6
 8002cca:	605a      	str	r2, [r3, #4]
          break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002cce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f7ff fa9f 	bl	8002220 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fbb1 	bl	800244e <LL_ADC_REG_IsConversionOngoing>
 8002cec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fbbd 	bl	8002474 <LL_ADC_INJ_IsConversionOngoing>
 8002cfa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 81a6 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 81a1 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f7ff fabd 	bl	800229e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	08db      	lsrs	r3, r3, #3
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00a      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6919      	ldr	r1, [r3, #16]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d56:	f7ff f9fb 	bl	8002150 <LL_ADC_SetOffset>
 8002d5a:	e17b      	b.n	8003054 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fa18 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x148>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fa0d 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 021f 	and.w	r2, r3, #31
 8002d86:	e01e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x186>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fa02 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e004      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x19e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	e018      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1d0>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e004      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f9d1 	bl	80021c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f9b5 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x20e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f9aa 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	e01e      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x24c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f99f 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e004      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x264>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	e018      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x296>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e004      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f96e 	bl	80021c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f952 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x2d4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2102      	movs	r1, #2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff f947 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	e01e      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x312>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff f93c 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002f42:	2320      	movs	r3, #32
 8002f44:	e004      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x32a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	e016      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x358>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e004      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff f90d 	bl	80021c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2103      	movs	r1, #3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f8f1 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x396>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff f8e6 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	e017      	b.n	8003006 <HAL_ADC_ConfigChannel+0x3c6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2103      	movs	r1, #3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff f8db 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ff0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_ADC_ConfigChannel+0x3de>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	e011      	b.n	8003042 <HAL_ADC_ConfigChannel+0x402>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800302c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e003      	b.n	8003042 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800303a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003042:	429a      	cmp	r2, r3
 8003044:	d106      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	2103      	movs	r1, #3
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f8b8 	bl	80021c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f9d1 	bl	8002400 <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 813f 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	461a      	mov	r2, r3
 8003074:	f7ff f93e 	bl	80022f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a8e      	ldr	r2, [pc, #568]	; (80032b8 <HAL_ADC_ConfigChannel+0x678>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 8130 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x46c>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2b09      	cmp	r3, #9
 80030a2:	bf94      	ite	ls
 80030a4:	2301      	movls	r3, #1
 80030a6:	2300      	movhi	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e019      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x4a0>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80030c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2b09      	cmp	r3, #9
 80030d8:	bf94      	ite	ls
 80030da:	2301      	movls	r3, #1
 80030dc:	2300      	movhi	r3, #0
 80030de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d079      	beq.n	80031d8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d107      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x4c0>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	3301      	adds	r3, #1
 80030f8:	069b      	lsls	r3, r3, #26
 80030fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fe:	e015      	b.n	800312c <HAL_ADC_ConfigChannel+0x4ec>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800311c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	069b      	lsls	r3, r3, #26
 8003128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_ADC_ConfigChannel+0x50c>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	3301      	adds	r3, #1
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	e017      	b.n	800317c <HAL_ADC_ConfigChannel+0x53c>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800315a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003164:	2320      	movs	r3, #32
 8003166:	e003      	b.n	8003170 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	ea42 0103 	orr.w	r1, r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x562>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	0e9b      	lsrs	r3, r3, #26
 8003192:	3301      	adds	r3, #1
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	051b      	lsls	r3, r3, #20
 80031a0:	e018      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x594>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80031be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d4:	430b      	orrs	r3, r1
 80031d6:	e080      	b.n	80032da <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x5b4>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	e015      	b.n	8003220 <HAL_ADC_ConfigChannel+0x5e0>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x600>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	3301      	adds	r3, #1
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	e017      	b.n	8003270 <HAL_ADC_ConfigChannel+0x630>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	61fb      	str	r3, [r7, #28]
  return result;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003258:	2320      	movs	r3, #32
 800325a:	e003      	b.n	8003264 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3301      	adds	r3, #1
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	ea42 0103 	orr.w	r1, r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_ADC_ConfigChannel+0x65c>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0e9b      	lsrs	r3, r3, #26
 8003286:	3301      	adds	r3, #1
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	3b1e      	subs	r3, #30
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800329a:	e01d      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x698>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	613b      	str	r3, [r7, #16]
  return result;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e005      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x684>
 80032b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	3b1e      	subs	r3, #30
 80032d2:	051b      	lsls	r3, r3, #20
 80032d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d8:	430b      	orrs	r3, r1
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6892      	ldr	r2, [r2, #8]
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fe ffdd 	bl	800229e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_ADC_ConfigChannel+0x7a0>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d06c      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f0:	483c      	ldr	r0, [pc, #240]	; (80033e4 <HAL_ADC_ConfigChannel+0x7a4>)
 80032f2:	f7fe ff1f 	bl	8002134 <LL_ADC_GetCommonPathInternalCh>
 80032f6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3a      	ldr	r2, [pc, #232]	; (80033e8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d127      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d121      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a35      	ldr	r2, [pc, #212]	; (80033ec <HAL_ADC_ConfigChannel+0x7ac>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d157      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003322:	4619      	mov	r1, r3
 8003324:	482f      	ldr	r0, [pc, #188]	; (80033e4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003326:	f7fe fef2 	bl	800210e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_ADC_ConfigChannel+0x7b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003344:	e002      	b.n	800334c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3b01      	subs	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f9      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003352:	e03a      	b.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_ADC_ConfigChannel+0x7b8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d113      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x746>
 800335e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_ADC_ConfigChannel+0x7ac>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d12a      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337c:	4619      	mov	r1, r3
 800337e:	4819      	ldr	r0, [pc, #100]	; (80033e4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003380:	f7fe fec5 	bl	800210e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003384:	e021      	b.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <HAL_ADC_ConfigChannel+0x7bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d11c      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d116      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <HAL_ADC_ConfigChannel+0x7ac>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d111      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ae:	4619      	mov	r1, r3
 80033b0:	480c      	ldr	r0, [pc, #48]	; (80033e4 <HAL_ADC_ConfigChannel+0x7a4>)
 80033b2:	f7fe feac 	bl	800210e <LL_ADC_SetCommonPathInternalCh>
 80033b6:	e008      	b.n	80033ca <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	37d8      	adds	r7, #216	; 0xd8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	80080000 	.word	0x80080000
 80033e4:	50040300 	.word	0x50040300
 80033e8:	c7520000 	.word	0xc7520000
 80033ec:	50040000 	.word	0x50040000
 80033f0:	2000001c 	.word	0x2000001c
 80033f4:	053e2d63 	.word	0x053e2d63
 80033f8:	cb840000 	.word	0xcb840000
 80033fc:	80000001 	.word	0x80000001

08003400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fff7 	bl	8002400 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d14d      	bne.n	80034b4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <ADC_Enable+0xc0>)
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f043 0210 	orr.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e039      	b.n	80034b6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe ffc6 	bl	80023d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800344c:	f7fe fe40 	bl	80020d0 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003452:	e028      	b.n	80034a6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe ffd1 	bl	8002400 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe ffb5 	bl	80023d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800346e:	f7fe fe2f 	bl	80020d0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d914      	bls.n	80034a6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d00d      	beq.n	80034a6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e007      	b.n	80034b6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d1cf      	bne.n	8003454 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	8000003f 	.word	0x8000003f

080034c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff29 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff3e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff31 	bl	800358c <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e054      	b.n	8003808 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7f5b      	ldrb	r3, [r3, #29]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe f90c 	bl	800198c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	791b      	ldrb	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_CRC_Init+0xc4>)
 8003788:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0218 	bic.w	r2, r2, #24
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	e00c      	b.n	80037b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f948 	bl	8003a3c <HAL_CRCEx_Polynomial_Set>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e028      	b.n	8003808 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	795b      	ldrb	r3, [r3, #5]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f04f 32ff 	mov.w	r2, #4294967295
 80037c6:	611a      	str	r2, [r3, #16]
 80037c8:	e004      	b.n	80037d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6912      	ldr	r2, [r2, #16]
 80037d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	04c11db7 	.word	0x04c11db7

08003814 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2202      	movs	r2, #2
 8003828:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d006      	beq.n	8003850 <HAL_CRC_Calculate+0x3c>
 8003842:	2b03      	cmp	r3, #3
 8003844:	d829      	bhi.n	800389a <HAL_CRC_Calculate+0x86>
 8003846:	2b01      	cmp	r3, #1
 8003848:	d019      	beq.n	800387e <HAL_CRC_Calculate+0x6a>
 800384a:	2b02      	cmp	r3, #2
 800384c:	d01e      	beq.n	800388c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800384e:	e024      	b.n	800389a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e00a      	b.n	800386c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d3f0      	bcc.n	8003856 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
      break;
 800387c:	e00e      	b.n	800389c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f812 	bl	80038ac <CRC_Handle_8>
 8003888:	6138      	str	r0, [r7, #16]
      break;
 800388a:	e007      	b.n	800389c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f899 	bl	80039c8 <CRC_Handle_16>
 8003896:	6138      	str	r0, [r7, #16]
      break;
 8003898:	e000      	b.n	800389c <HAL_CRC_Calculate+0x88>
      break;
 800389a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80038a2:	693b      	ldr	r3, [r7, #16]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e023      	b.n	8003906 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	3301      	adds	r3, #1
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	440b      	add	r3, r1
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80038d8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	440b      	add	r3, r1
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80038e8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	3303      	adds	r3, #3
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	440b      	add	r3, r1
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80038fc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80038fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	429a      	cmp	r2, r3
 800390e:	d3d6      	bcc.n	80038be <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d04d      	beq.n	80039b6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	4413      	add	r3, r2
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d116      	bne.n	800396c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4413      	add	r3, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	b21a      	sxth	r2, r3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3301      	adds	r3, #1
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	440b      	add	r3, r1
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b21b      	sxth	r3, r3
 800395a:	4313      	orrs	r3, r2
 800395c:	b21b      	sxth	r3, r3
 800395e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	8b7a      	ldrh	r2, [r7, #26]
 800396a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b03      	cmp	r3, #3
 8003974:	d11f      	bne.n	80039b6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	b21a      	sxth	r2, r3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	3301      	adds	r3, #1
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	440b      	add	r3, r1
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b21b      	sxth	r3, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	b21b      	sxth	r3, r3
 8003996:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	8b7a      	ldrh	r2, [r7, #26]
 80039a2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4413      	add	r3, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3724      	adds	r7, #36	; 0x24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e013      	b.n	8003a02 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4413      	add	r3, r2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3302      	adds	r3, #2
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	440b      	add	r3, r1
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3301      	adds	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3e6      	bcc.n	80039da <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	4413      	add	r3, r2
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a4c:	231f      	movs	r3, #31
 8003a4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a50:	bf00      	nop
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	613a      	str	r2, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_CRCEx_Polynomial_Set+0x16>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b18      	cmp	r3, #24
 8003a74:	d846      	bhi.n	8003b04 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003b0b 	.word	0x08003b0b
 8003a80:	08003b05 	.word	0x08003b05
 8003a84:	08003b05 	.word	0x08003b05
 8003a88:	08003b05 	.word	0x08003b05
 8003a8c:	08003b05 	.word	0x08003b05
 8003a90:	08003b05 	.word	0x08003b05
 8003a94:	08003b05 	.word	0x08003b05
 8003a98:	08003b05 	.word	0x08003b05
 8003a9c:	08003af9 	.word	0x08003af9
 8003aa0:	08003b05 	.word	0x08003b05
 8003aa4:	08003b05 	.word	0x08003b05
 8003aa8:	08003b05 	.word	0x08003b05
 8003aac:	08003b05 	.word	0x08003b05
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003b05 	.word	0x08003b05
 8003ab8:	08003b05 	.word	0x08003b05
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003b05 	.word	0x08003b05
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003ae1 	.word	0x08003ae1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d913      	bls.n	8003b0e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003aea:	e010      	b.n	8003b0e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b07      	cmp	r3, #7
 8003af0:	d90f      	bls.n	8003b12 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003af6:	e00c      	b.n	8003b12 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d90b      	bls.n	8003b16 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b02:	e008      	b.n	8003b16 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
      break;
 8003b08:	e006      	b.n	8003b18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e004      	b.n	8003b18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b16:	bf00      	nop
  }
  if (status == HAL_OK)
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 0118 	bic.w	r1, r3, #24
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e098      	b.n	8003c8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_DMA_Init+0x150>)
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d80f      	bhi.n	8003b86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <HAL_DMA_Init+0x154>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_DMA_Init+0x158>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a48      	ldr	r2, [pc, #288]	; (8003ca4 <HAL_DMA_Init+0x15c>)
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
 8003b84:	e00e      	b.n	8003ba4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_DMA_Init+0x160>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a43      	ldr	r2, [pc, #268]	; (8003ca0 <HAL_DMA_Init+0x158>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	009a      	lsls	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a42      	ldr	r2, [pc, #264]	; (8003cac <HAL_DMA_Init+0x164>)
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfe:	d039      	beq.n	8003c74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <HAL_DMA_Init+0x15c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d11a      	bne.n	8003c40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_DMA_Init+0x168>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f003 031c 	and.w	r3, r3, #28
 8003c16:	210f      	movs	r1, #15
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4924      	ldr	r1, [pc, #144]	; (8003cb0 <HAL_DMA_Init+0x168>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <HAL_DMA_Init+0x168>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f003 031c 	and.w	r3, r3, #28
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	491d      	ldr	r1, [pc, #116]	; (8003cb0 <HAL_DMA_Init+0x168>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
 8003c3e:	e019      	b.n	8003c74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	f003 031c 	and.w	r3, r3, #28
 8003c4c:	210f      	movs	r1, #15
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	4917      	ldr	r1, [pc, #92]	; (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f003 031c 	and.w	r3, r3, #28
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	4911      	ldr	r1, [pc, #68]	; (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40020407 	.word	0x40020407
 8003c9c:	bffdfff8 	.word	0xbffdfff8
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	bffdfbf8 	.word	0xbffdfbf8
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	400200a8 	.word	0x400200a8
 8003cb4:	400204a8 	.word	0x400204a8

08003cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DMA_Start_IT+0x20>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e04b      	b.n	8003d70 <HAL_DMA_Start_IT+0xb8>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d13a      	bne.n	8003d62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f95f 	bl	8003fd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 020e 	orr.w	r2, r2, #14
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e00f      	b.n	8003d50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 020a 	orr.w	r2, r2, #10
 8003d4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e005      	b.n	8003d6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 020e 	bic.w	r2, r2, #14
 8003db0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 021c 	and.w	r2, r3, #28
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d005      	beq.n	8003e18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e029      	b.n	8003e6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 020e 	bic.w	r2, r2, #14
 8003e26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f003 021c 	and.w	r2, r3, #28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
    }
  }
  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f003 031c 	and.w	r3, r3, #28
 8003e96:	2204      	movs	r2, #4
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d026      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x7a>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d021      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0204 	bic.w	r2, r2, #4
 8003ec8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f003 021c 	and.w	r2, r3, #28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8003edc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d071      	beq.n	8003fca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003eee:	e06c      	b.n	8003fca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	f003 031c 	and.w	r3, r3, #28
 8003ef8:	2202      	movs	r2, #2
 8003efa:	409a      	lsls	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d02e      	beq.n	8003f62 <HAL_DMA_IRQHandler+0xec>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d029      	beq.n	8003f62 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020a 	bic.w	r2, r2, #10
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f003 021c 	and.w	r2, r3, #28
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2102      	movs	r1, #2
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d038      	beq.n	8003fca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f60:	e033      	b.n	8003fca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f003 031c 	and.w	r3, r3, #28
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d02a      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x156>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d025      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 020e 	bic.w	r2, r2, #14
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f003 021c 	and.w	r2, r3, #28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
}
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f003 021c 	and.w	r2, r3, #28
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2101      	movs	r1, #1
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b10      	cmp	r3, #16
 8004004:	d108      	bne.n	8004018 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004016:	e007      	b.n	8004028 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004042:	e148      	b.n	80042d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2101      	movs	r1, #1
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 813a 	beq.w	80042d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d00b      	beq.n	800407c <HAL_GPIO_Init+0x48>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d007      	beq.n	800407c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004070:	2b11      	cmp	r3, #17
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b12      	cmp	r3, #18
 800407a:	d130      	bne.n	80040de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040b2:	2201      	movs	r2, #1
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0201 	and.w	r2, r3, #1
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0xea>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b12      	cmp	r3, #18
 800411c:	d123      	bne.n	8004166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	08da      	lsrs	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3208      	adds	r2, #8
 8004126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	220f      	movs	r2, #15
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	08da      	lsrs	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3208      	adds	r2, #8
 8004160:	6939      	ldr	r1, [r7, #16]
 8004162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	2203      	movs	r2, #3
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0203 	and.w	r2, r3, #3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8094 	beq.w	80042d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a8:	4b52      	ldr	r3, [pc, #328]	; (80042f4 <HAL_GPIO_Init+0x2c0>)
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	4a51      	ldr	r2, [pc, #324]	; (80042f4 <HAL_GPIO_Init+0x2c0>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6613      	str	r3, [r2, #96]	; 0x60
 80041b4:	4b4f      	ldr	r3, [pc, #316]	; (80042f4 <HAL_GPIO_Init+0x2c0>)
 80041b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041c0:	4a4d      	ldr	r2, [pc, #308]	; (80042f8 <HAL_GPIO_Init+0x2c4>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	3302      	adds	r3, #2
 80041c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	220f      	movs	r2, #15
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041ea:	d00d      	beq.n	8004208 <HAL_GPIO_Init+0x1d4>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a43      	ldr	r2, [pc, #268]	; (80042fc <HAL_GPIO_Init+0x2c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <HAL_GPIO_Init+0x1d0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a42      	ldr	r2, [pc, #264]	; (8004300 <HAL_GPIO_Init+0x2cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_GPIO_Init+0x1cc>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e004      	b.n	800420a <HAL_GPIO_Init+0x1d6>
 8004200:	2307      	movs	r3, #7
 8004202:	e002      	b.n	800420a <HAL_GPIO_Init+0x1d6>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_GPIO_Init+0x1d6>
 8004208:	2300      	movs	r3, #0
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	f002 0203 	and.w	r2, r2, #3
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	4093      	lsls	r3, r2
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800421a:	4937      	ldr	r1, [pc, #220]	; (80042f8 <HAL_GPIO_Init+0x2c4>)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	3302      	adds	r3, #2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004228:	4b36      	ldr	r3, [pc, #216]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	43db      	mvns	r3, r3
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	43db      	mvns	r3, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4013      	ands	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004276:	4a23      	ldr	r2, [pc, #140]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	43db      	mvns	r3, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <HAL_GPIO_Init+0x2d0>)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3301      	adds	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f aeaf 	bne.w	8004044 <HAL_GPIO_Init+0x10>
  }
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40010000 	.word	0x40010000
 80042fc:	48000400 	.word	0x48000400
 8004300:	48000800 	.word	0x48000800
 8004304:	40010400 	.word	0x40010400

08004308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
 8004314:	4613      	mov	r3, r2
 8004316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004318:	787b      	ldrb	r3, [r7, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004324:	e002      	b.n	800432c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	43d9      	mvns	r1, r3
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	400b      	ands	r3, r1
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	619a      	str	r2, [r3, #24]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_PWREx_GetVoltageRange+0x18>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40007000 	.word	0x40007000

08004388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004396:	d130      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004398:	4b23      	ldr	r3, [pc, #140]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a4:	d038      	beq.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ae:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2232      	movs	r2, #50	; 0x32
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043cc:	e002      	b.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d102      	bne.n	80043e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f2      	bne.n	80043ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f4:	d110      	bne.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e00f      	b.n	800441a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d007      	beq.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004410:	4a05      	ldr	r2, [pc, #20]	; (8004428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40007000 	.word	0x40007000
 800442c:	2000001c 	.word	0x2000001c
 8004430:	431bde83 	.word	0x431bde83

08004434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f000 bc11 	b.w	8004c6a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004448:	4ba0      	ldr	r3, [pc, #640]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004452:	4b9e      	ldr	r3, [pc, #632]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80e4 	beq.w	8004632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_RCC_OscConfig+0x4c>
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	f040 808b 	bne.w	800458e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b01      	cmp	r3, #1
 800447c:	f040 8087 	bne.w	800458e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004480:	4b92      	ldr	r3, [pc, #584]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x64>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e3e8      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	4b8b      	ldr	r3, [pc, #556]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_RCC_OscConfig+0x7e>
 80044a8:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b0:	e005      	b.n	80044be <HAL_RCC_OscConfig+0x8a>
 80044b2:	4b86      	ldr	r3, [pc, #536]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044be:	4293      	cmp	r3, r2
 80044c0:	d223      	bcs.n	800450a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fd7a 	bl	8004fc0 <RCC_SetFlashLatencyFromMSIRange>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e3c9      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d6:	4b7d      	ldr	r3, [pc, #500]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7c      	ldr	r2, [pc, #496]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b7a      	ldr	r3, [pc, #488]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4977      	ldr	r1, [pc, #476]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f4:	4b75      	ldr	r3, [pc, #468]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	4972      	ldr	r1, [pc, #456]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	e025      	b.n	8004556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800450a:	4b70      	ldr	r3, [pc, #448]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6f      	ldr	r2, [pc, #444]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004510:	f043 0308 	orr.w	r3, r3, #8
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6d      	ldr	r3, [pc, #436]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	496a      	ldr	r1, [pc, #424]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004528:	4b68      	ldr	r3, [pc, #416]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	4965      	ldr	r1, [pc, #404]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fd3a 	bl	8004fc0 <RCC_SetFlashLatencyFromMSIRange>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e389      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004556:	f000 fc6f 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	495a      	ldr	r1, [pc, #360]	; (80046d0 <HAL_RCC_OscConfig+0x29c>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	4a58      	ldr	r2, [pc, #352]	; (80046d4 <HAL_RCC_OscConfig+0x2a0>)
 8004574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004576:	4b58      	ldr	r3, [pc, #352]	; (80046d8 <HAL_RCC_OscConfig+0x2a4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd fd58 	bl	8002030 <HAL_InitTick>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d052      	beq.n	8004630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	e36d      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d032      	beq.n	80045fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004596:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4c      	ldr	r2, [pc, #304]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045a2:	f7fd fd95 	bl	80020d0 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045aa:	f7fd fd91 	bl	80020d0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e356      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045bc:	4b43      	ldr	r3, [pc, #268]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a3f      	ldr	r2, [pc, #252]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045ce:	f043 0308 	orr.w	r3, r3, #8
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	493a      	ldr	r1, [pc, #232]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e6:	4b39      	ldr	r3, [pc, #228]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4935      	ldr	r1, [pc, #212]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
 80045fa:	e01a      	b.n	8004632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045fc:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a32      	ldr	r2, [pc, #200]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004608:	f7fd fd62 	bl	80020d0 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004610:	f7fd fd5e 	bl	80020d0 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e323      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004622:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x1dc>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d073      	beq.n	8004726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d005      	beq.n	8004650 <HAL_RCC_OscConfig+0x21c>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d10e      	bne.n	8004668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d10b      	bne.n	8004668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d063      	beq.n	8004724 <HAL_RCC_OscConfig+0x2f0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d15f      	bne.n	8004724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e300      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d106      	bne.n	8004680 <HAL_RCC_OscConfig+0x24c>
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e01d      	b.n	80046bc <HAL_RCC_OscConfig+0x288>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x270>
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a0c      	ldr	r2, [pc, #48]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x288>
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80046aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a05      	ldr	r2, [pc, #20]	; (80046cc <HAL_RCC_OscConfig+0x298>)
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd fd04 	bl	80020d0 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ca:	e010      	b.n	80046ee <HAL_RCC_OscConfig+0x2ba>
 80046cc:	40021000 	.word	0x40021000
 80046d0:	0800876c 	.word	0x0800876c
 80046d4:	2000001c 	.word	0x2000001c
 80046d8:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fd fcf8 	bl	80020d0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	; 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e2bd      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ee:	4baf      	ldr	r3, [pc, #700]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x2a8>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fd fce8 	bl	80020d0 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd fce4 	bl	80020d0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e2a9      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004716:	4ba5      	ldr	r3, [pc, #660]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x2d0>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d060      	beq.n	80047f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d005      	beq.n	8004744 <HAL_RCC_OscConfig+0x310>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d119      	bne.n	8004772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d116      	bne.n	8004772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004744:	4b99      	ldr	r3, [pc, #612]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_OscConfig+0x328>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e286      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475c:	4b93      	ldr	r3, [pc, #588]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	4990      	ldr	r1, [pc, #576]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004770:	e040      	b.n	80047f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d023      	beq.n	80047c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800477a:	4b8c      	ldr	r3, [pc, #560]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a8b      	ldr	r2, [pc, #556]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fd fca3 	bl	80020d0 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fd fc9f 	bl	80020d0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e264      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a0:	4b82      	ldr	r3, [pc, #520]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	497c      	ldr	r1, [pc, #496]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	e018      	b.n	80047f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80047c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd fc7f 	bl	80020d0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fd fc7b 	bl	80020d0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e240      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e8:	4b70      	ldr	r3, [pc, #448]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03c      	beq.n	800487a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01c      	beq.n	8004842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004808:	4b68      	ldr	r3, [pc, #416]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800480a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480e:	4a67      	ldr	r2, [pc, #412]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd fc5a 	bl	80020d0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004820:	f7fd fc56 	bl	80020d0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e21b      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004832:	4b5e      	ldr	r3, [pc, #376]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <HAL_RCC_OscConfig+0x3ec>
 8004840:	e01b      	b.n	800487a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004842:	4b5a      	ldr	r3, [pc, #360]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004848:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fd fc3d 	bl	80020d0 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485a:	f7fd fc39 	bl	80020d0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1fe      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800486c:	4b4f      	ldr	r3, [pc, #316]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ef      	bne.n	800485a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80a6 	beq.w	80049d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800488c:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10d      	bne.n	80048b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b44      	ldr	r3, [pc, #272]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4a43      	ldr	r2, [pc, #268]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6593      	str	r3, [r2, #88]	; 0x58
 80048a4:	4b41      	ldr	r3, [pc, #260]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b4:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <HAL_RCC_OscConfig+0x57c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d118      	bne.n	80048f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_OscConfig+0x57c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_RCC_OscConfig+0x57c>)
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048cc:	f7fd fc00 	bl	80020d0 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fd fbfc 	bl	80020d0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e1c1      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e6:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_RCC_OscConfig+0x57c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d108      	bne.n	800490c <HAL_RCC_OscConfig+0x4d8>
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800490a:	e024      	b.n	8004956 <HAL_RCC_OscConfig+0x522>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d110      	bne.n	8004936 <HAL_RCC_OscConfig+0x502>
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004934:	e00f      	b.n	8004956 <HAL_RCC_OscConfig+0x522>
 8004936:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800494e:	f023 0304 	bic.w	r3, r3, #4
 8004952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fd fbb7 	bl	80020d0 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fd fbb3 	bl	80020d0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e176      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_OscConfig+0x578>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ed      	beq.n	8004966 <HAL_RCC_OscConfig+0x532>
 800498a:	e01a      	b.n	80049c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fd fba0 	bl	80020d0 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004992:	e00f      	b.n	80049b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fd fb9c 	bl	80020d0 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d906      	bls.n	80049b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e15f      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049b4:	4baa      	ldr	r3, [pc, #680]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e8      	bne.n	8004994 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c2:	7ffb      	ldrb	r3, [r7, #31]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c8:	4ba5      	ldr	r3, [pc, #660]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	4aa4      	ldr	r2, [pc, #656]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 80049ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d03c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01c      	beq.n	8004a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049e8:	4b9d      	ldr	r3, [pc, #628]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 80049ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ee:	4a9c      	ldr	r2, [pc, #624]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd fb6a 	bl	80020d0 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a00:	f7fd fb66 	bl	80020d0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e12b      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a12:	4b93      	ldr	r3, [pc, #588]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ef      	beq.n	8004a00 <HAL_RCC_OscConfig+0x5cc>
 8004a20:	e01b      	b.n	8004a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a22:	4b8f      	ldr	r3, [pc, #572]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a28:	4a8d      	ldr	r2, [pc, #564]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fd fb4d 	bl	80020d0 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3a:	f7fd fb49 	bl	80020d0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e10e      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a4c:	4b84      	ldr	r3, [pc, #528]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ef      	bne.n	8004a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8102 	beq.w	8004c68 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	f040 80c5 	bne.w	8004bf8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a6e:	4b7c      	ldr	r3, [pc, #496]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d12c      	bne.n	8004adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d123      	bne.n	8004adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d11b      	bne.n	8004adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d113      	bne.n	8004adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d109      	bne.n	8004adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d067      	beq.n	8004bac <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d062      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0bb      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004af2:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a5a      	ldr	r2, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004afe:	f7fd fae7 	bl	80020d0 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fd fae3 	bl	80020d0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e0a8      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	4b51      	ldr	r3, [pc, #324]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b24:	4b4e      	ldr	r3, [pc, #312]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	4b4e      	ldr	r3, [pc, #312]	; (8004c64 <HAL_RCC_OscConfig+0x830>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b34:	3a01      	subs	r2, #1
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b3e:	0212      	lsls	r2, r2, #8
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b46:	0852      	lsrs	r2, r2, #1
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	0552      	lsls	r2, r2, #21
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b52:	0852      	lsrs	r2, r2, #1
 8004b54:	3a01      	subs	r2, #1
 8004b56:	0652      	lsls	r2, r2, #25
 8004b58:	4311      	orrs	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b5e:	06d2      	lsls	r2, r2, #27
 8004b60:	430a      	orrs	r2, r1
 8004b62:	493f      	ldr	r1, [pc, #252]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b68:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a3c      	ldr	r2, [pc, #240]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b74:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a39      	ldr	r2, [pc, #228]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b80:	f7fd faa6 	bl	80020d0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fd faa2 	bl	80020d0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e067      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba6:	e05f      	b.n	8004c68 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e05e      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d157      	bne.n	8004c68 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bb8:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc4:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bd0:	f7fd fa7e 	bl	80020d0 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd fa7a 	bl	80020d0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e03f      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bea:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x7a4>
 8004bf6:	e037      	b.n	8004c68 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d02d      	beq.n	8004c5a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c08:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c1c:	f023 0303 	bic.w	r3, r3, #3
 8004c20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd fa4d 	bl	80020d0 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fd fa49 	bl	80020d0 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e00e      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_RCC_OscConfig+0x82c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCC_OscConfig+0x806>
 8004c58:	e006      	b.n	8004c68 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e005      	b.n	8004c6a <HAL_RCC_OscConfig+0x836>
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0c8      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b66      	ldr	r3, [pc, #408]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0207 	bic.w	r2, r3, #7
 8004c9e:	4961      	ldr	r1, [pc, #388]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0b0      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d04c      	beq.n	8004d5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ccc:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d121      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e09e      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d115      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e092      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e086      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0c:	4b46      	ldr	r3, [pc, #280]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e07e      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d1c:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	493f      	ldr	r1, [pc, #252]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2e:	f7fd f9cf 	bl	80020d0 <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d36:	f7fd f9cb 	bl	80020d0 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e066      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 020c 	and.w	r2, r3, #12
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d1eb      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6a:	4b2f      	ldr	r3, [pc, #188]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	492c      	ldr	r1, [pc, #176]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d210      	bcs.n	8004dac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 0207 	bic.w	r2, r3, #7
 8004d92:	4924      	ldr	r1, [pc, #144]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e036      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4918      	ldr	r1, [pc, #96]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4910      	ldr	r1, [pc, #64]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dea:	f000 f825 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004dee:	4602      	mov	r2, r0
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	490c      	ldr	r1, [pc, #48]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	5ccb      	ldrb	r3, [r1, r3]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd f90e 	bl	8002030 <HAL_InitTick>
 8004e14:	4603      	mov	r3, r0
 8004e16:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e18:	7afb      	ldrb	r3, [r7, #11]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40022000 	.word	0x40022000
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	0800876c 	.word	0x0800876c
 8004e30:	2000001c 	.word	0x2000001c
 8004e34:	20000020 	.word	0x20000020

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e46:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e50:	4b3b      	ldr	r3, [pc, #236]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x34>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d121      	bne.n	8004eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d11e      	bne.n	8004eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e6c:	4b34      	ldr	r3, [pc, #208]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e78:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e005      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e88:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e94:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eb0:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ebc:	4b23      	ldr	r3, [pc, #140]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d134      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d003      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0xa6>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8004edc:	e005      	b.n	8004eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ee0:	617b      	str	r3, [r7, #20]
      break;
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ee4:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ee6:	617b      	str	r3, [r7, #20]
      break;
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	617b      	str	r3, [r7, #20]
      break;
 8004eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	3301      	adds	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	fb02 f203 	mul.w	r2, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	0e5b      	lsrs	r3, r3, #25
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	3301      	adds	r3, #1
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f30:	69bb      	ldr	r3, [r7, #24]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	08008784 	.word	0x08008784
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	007a1200 	.word	0x007a1200

08004f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	2000001c 	.word	0x2000001c

08004f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f6c:	f7ff fff0 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4904      	ldr	r1, [pc, #16]	; (8004f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800877c 	.word	0x0800877c

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f98:	f7ff ffda 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0adb      	lsrs	r3, r3, #11
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	0800877c 	.word	0x0800877c

08004fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fd8:	f7ff f9c8 	bl	800436c <HAL_PWREx_GetVoltageRange>
 8004fdc:	6178      	str	r0, [r7, #20]
 8004fde:	e014      	b.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fea:	6593      	str	r3, [r2, #88]	; 0x58
 8004fec:	4b22      	ldr	r3, [pc, #136]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ff8:	f7ff f9b8 	bl	800436c <HAL_PWREx_GetVoltageRange>
 8004ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005008:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d10b      	bne.n	800502a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d919      	bls.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2ba0      	cmp	r3, #160	; 0xa0
 800501c:	d902      	bls.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800501e:	2302      	movs	r3, #2
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	e013      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005024:	2301      	movs	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	e010      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d902      	bls.n	8005036 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005030:	2303      	movs	r3, #3
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	e00a      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d102      	bne.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800503c:	2302      	movs	r3, #2
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	e004      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b70      	cmp	r3, #112	; 0x70
 8005046:	d101      	bne.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005048:	2301      	movs	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 0207 	bic.w	r2, r3, #7
 8005054:	4909      	ldr	r1, [pc, #36]	; (800507c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d001      	beq.n	800506e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40021000 	.word	0x40021000
 800507c:	40022000 	.word	0x40022000

08005080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005088:	2300      	movs	r3, #0
 800508a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800508c:	2300      	movs	r3, #0
 800508e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005098:	2b00      	cmp	r3, #0
 800509a:	d031      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050a4:	d01a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80050a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050aa:	d814      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050b4:	d10f      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80050b6:	4bac      	ldr	r3, [pc, #688]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4aab      	ldr	r2, [pc, #684]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c2:	e00c      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f9cc 	bl	8005468 <RCCEx_PLLSAI1_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050d4:	e003      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	74fb      	strb	r3, [r7, #19]
      break;
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80050dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050e4:	4ba0      	ldr	r3, [pc, #640]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	499d      	ldr	r1, [pc, #628]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050fa:	e001      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8099 	beq.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005112:	4b95      	ldr	r3, [pc, #596]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005128:	4b8f      	ldr	r3, [pc, #572]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	4a8e      	ldr	r2, [pc, #568]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005132:	6593      	str	r3, [r2, #88]	; 0x58
 8005134:	4b8c      	ldr	r3, [pc, #560]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005140:	2301      	movs	r3, #1
 8005142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005144:	4b89      	ldr	r3, [pc, #548]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a88      	ldr	r2, [pc, #544]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800514a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005150:	f7fc ffbe 	bl	80020d0 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005156:	e009      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005158:	f7fc ffba 	bl	80020d0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d902      	bls.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	74fb      	strb	r3, [r7, #19]
        break;
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800516c:	4b7f      	ldr	r3, [pc, #508]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ef      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d155      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800517e:	4b7a      	ldr	r3, [pc, #488]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01e      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	429a      	cmp	r2, r3
 8005198:	d019      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800519a:	4b73      	ldr	r3, [pc, #460]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051a6:	4b70      	ldr	r3, [pc, #448]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	4a6e      	ldr	r2, [pc, #440]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051b6:	4b6c      	ldr	r3, [pc, #432]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051bc:	4a6a      	ldr	r2, [pc, #424]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051c6:	4a68      	ldr	r2, [pc, #416]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d016      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fc ff7a 	bl	80020d0 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051de:	e00b      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fc ff76 	bl	80020d0 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d902      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	74fb      	strb	r3, [r7, #19]
            break;
 80051f6:	e006      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f8:	4b5b      	ldr	r3, [pc, #364]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0ec      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005206:	7cfb      	ldrb	r3, [r7, #19]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800520c:	4b56      	ldr	r3, [pc, #344]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	4953      	ldr	r1, [pc, #332]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005222:	e004      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	74bb      	strb	r3, [r7, #18]
 8005228:	e001      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	7cfb      	ldrb	r3, [r7, #19]
 800522c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522e:	7c7b      	ldrb	r3, [r7, #17]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d105      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005234:	4b4c      	ldr	r3, [pc, #304]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	4a4b      	ldr	r2, [pc, #300]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800524c:	4b46      	ldr	r3, [pc, #280]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4943      	ldr	r1, [pc, #268]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800526e:	4b3e      	ldr	r3, [pc, #248]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f023 020c 	bic.w	r2, r3, #12
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	493a      	ldr	r1, [pc, #232]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005290:	4b35      	ldr	r3, [pc, #212]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	4932      	ldr	r1, [pc, #200]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b2:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	4929      	ldr	r1, [pc, #164]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	4921      	ldr	r1, [pc, #132]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4918      	ldr	r1, [pc, #96]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	4910      	ldr	r1, [pc, #64]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02c      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4907      	ldr	r1, [pc, #28]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005358:	d10a      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4a02      	ldr	r2, [pc, #8]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005364:	60d3      	str	r3, [r2, #12]
 8005366:	e015      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005378:	d10c      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f871 	bl	8005468 <RCCEx_PLLSAI1_Config>
 8005386:	4603      	mov	r3, r0
 8005388:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d028      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a0:	4b30      	ldr	r3, [pc, #192]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	492d      	ldr	r1, [pc, #180]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d106      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ca:	60d3      	str	r3, [r2, #12]
 80053cc:	e011      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	2101      	movs	r1, #1
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f842 	bl	8005468 <RCCEx_PLLSAI1_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80053ee:	7cfb      	ldrb	r3, [r7, #19]
 80053f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01c      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053fe:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	4915      	ldr	r1, [pc, #84]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541c:	d10c      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2102      	movs	r1, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f81f 	bl	8005468 <RCCEx_PLLSAI1_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005452:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800545a:	7cbb      	ldrb	r3, [r7, #18]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40021000 	.word	0x40021000

08005468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005476:	4b74      	ldr	r3, [pc, #464]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005482:	4b71      	ldr	r3, [pc, #452]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0203 	and.w	r2, r3, #3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d10d      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
       ||
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800549a:	4b6b      	ldr	r3, [pc, #428]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
       ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d047      	beq.n	800553e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e044      	b.n	800553e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d018      	beq.n	80054ee <RCCEx_PLLSAI1_Config+0x86>
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d825      	bhi.n	800550c <RCCEx_PLLSAI1_Config+0xa4>
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <RCCEx_PLLSAI1_Config+0x62>
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d009      	beq.n	80054dc <RCCEx_PLLSAI1_Config+0x74>
 80054c8:	e020      	b.n	800550c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ca:	4b5f      	ldr	r3, [pc, #380]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11d      	bne.n	8005512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054da:	e01a      	b.n	8005512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054dc:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e013      	b.n	8005516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ee:	4b56      	ldr	r3, [pc, #344]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fa:	4b53      	ldr	r3, [pc, #332]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550a:	e006      	b.n	800551a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e004      	b.n	800551c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800551a:	bf00      	nop
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005522:	4b49      	ldr	r3, [pc, #292]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	430b      	orrs	r3, r1
 8005538:	4943      	ldr	r1, [pc, #268]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d17c      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005544:	4b40      	ldr	r3, [pc, #256]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a3f      	ldr	r2, [pc, #252]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800554e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005550:	f7fc fdbe 	bl	80020d0 <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005556:	e009      	b.n	800556c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005558:	f7fc fdba 	bl	80020d0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d902      	bls.n	800556c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	73fb      	strb	r3, [r7, #15]
        break;
 800556a:	e005      	b.n	8005578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ef      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d15f      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d110      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005584:	4b30      	ldr	r3, [pc, #192]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800558c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6892      	ldr	r2, [r2, #8]
 8005594:	0211      	lsls	r1, r2, #8
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	06d2      	lsls	r2, r2, #27
 800559c:	430a      	orrs	r2, r1
 800559e:	492a      	ldr	r1, [pc, #168]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	610b      	str	r3, [r1, #16]
 80055a4:	e027      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d112      	bne.n	80055d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ac:	4b26      	ldr	r3, [pc, #152]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	0211      	lsls	r1, r2, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6912      	ldr	r2, [r2, #16]
 80055c2:	0852      	lsrs	r2, r2, #1
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0552      	lsls	r2, r2, #21
 80055c8:	430a      	orrs	r2, r1
 80055ca:	491f      	ldr	r1, [pc, #124]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	610b      	str	r3, [r1, #16]
 80055d0:	e011      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d2:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6952      	ldr	r2, [r2, #20]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0652      	lsls	r2, r2, #25
 80055ee:	430a      	orrs	r2, r1
 80055f0:	4915      	ldr	r1, [pc, #84]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005600:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005602:	f7fc fd65 	bl	80020d0 <HAL_GetTick>
 8005606:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005608:	e009      	b.n	800561e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800560a:	f7fc fd61 	bl	80020d0 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d902      	bls.n	800561e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	73fb      	strb	r3, [r7, #15]
          break;
 800561c:	e005      	b.n	800562a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ef      	beq.n	800560a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4903      	ldr	r1, [pc, #12]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000

0800564c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e095      	b.n	800578a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566e:	d009      	beq.n	8005684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	61da      	str	r2, [r3, #28]
 8005676:	e005      	b.n	8005684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc f994 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056c4:	d902      	bls.n	80056cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e002      	b.n	80056d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056da:	d007      	beq.n	80056ec <HAL_SPI_Init+0xa0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	ea42 0103 	orr.w	r1, r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	f003 0204 	and.w	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005768:	ea42 0103 	orr.w	r1, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SPI_TransmitReceive_IT+0x20>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e091      	b.n	80058d8 <HAL_SPI_TransmitReceive_IT+0x144>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ca:	7dbb      	ldrb	r3, [r7, #22]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d00d      	beq.n	80057ec <HAL_SPI_TransmitReceive_IT+0x58>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d6:	d106      	bne.n	80057e6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_TransmitReceive_IT+0x52>
 80057e0:	7dbb      	ldrb	r3, [r7, #22]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80057e6:	2302      	movs	r3, #2
 80057e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057ea:	e070      	b.n	80058ce <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_SPI_TransmitReceive_IT+0x6a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_SPI_TransmitReceive_IT+0x6a>
 80057f8:	887b      	ldrh	r3, [r7, #2]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005802:	e064      	b.n	80058ce <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b04      	cmp	r3, #4
 800580e:	d003      	beq.n	8005818 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2205      	movs	r2, #5
 8005814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	887a      	ldrh	r2, [r7, #2]
 800582e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	887a      	ldrh	r2, [r7, #2]
 800583a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	887a      	ldrh	r2, [r7, #2]
 8005842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800584e:	d906      	bls.n	800585e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005854:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a23      	ldr	r2, [pc, #140]	; (80058e8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800585a:	651a      	str	r2, [r3, #80]	; 0x50
 800585c:	e005      	b.n	800586a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a22      	ldr	r2, [pc, #136]	; (80058ec <HAL_SPI_TransmitReceive_IT+0x158>)
 8005862:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005868:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005872:	d802      	bhi.n	800587a <HAL_SPI_TransmitReceive_IT+0xe6>
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d908      	bls.n	800588c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	e007      	b.n	800589c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800589a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80058aa:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d008      	beq.n	80058cc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e000      	b.n	80058ce <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80058cc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	08005c97 	.word	0x08005c97
 80058e8:	08005cfd 	.word	0x08005cfd
 80058ec:	08005b47 	.word	0x08005b47
 80058f0:	08005c05 	.word	0x08005c05

080058f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	099b      	lsrs	r3, r3, #6
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	099b      	lsrs	r3, r3, #6
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
    return;
 8005936:	e0d7      	b.n	8005ae8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_SPI_IRQHandler+0x66>
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	09db      	lsrs	r3, r3, #7
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
    return;
 8005958:	e0c6      	b.n	8005ae8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_SPI_IRQHandler+0x8c>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80b4 	beq.w	8005ae8 <HAL_SPI_IRQHandler+0x1f4>
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80ad 	beq.w	8005ae8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d023      	beq.n	80059e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d011      	beq.n	80059ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	e00b      	b.n	80059e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	693b      	ldr	r3, [r7, #16]
        return;
 80059e0:	e082      	b.n	8005ae8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a28:	f043 0208 	orr.w	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a30:	2300      	movs	r3, #0
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d04f      	beq.n	8005ae6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_SPI_IRQHandler+0x17e>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d034      	beq.n	8005adc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0203 	bic.w	r2, r2, #3
 8005a80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d011      	beq.n	8005aae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_SPI_IRQHandler+0x1fc>)
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe f9ac 	bl	8003df4 <HAL_DMA_Abort_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d016      	beq.n	8005ae4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <HAL_SPI_IRQHandler+0x1fc>)
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe f996 	bl	8003df4 <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005ada:	e003      	b.n	8005ae4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f813 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ae2:	e000      	b.n	8005ae6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005ae4:	bf00      	nop
    return;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08005b1d 	.word	0x08005b1d

08005af4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ffe5 	bl	8005b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d923      	bls.n	8005ba2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	b292      	uxth	r2, r2
 8005b66:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b02      	subs	r3, #2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11f      	bne.n	8005bd0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	e016      	b.n	8005bd0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f103 020c 	add.w	r2, r3, #12
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10f      	bne.n	8005bfc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa10 	bl	800601c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d912      	bls.n	8005c3c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b02      	subs	r3, #2
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c3a:	e012      	b.n	8005c62 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d110      	bne.n	8005c8e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9c7 	bl	800601c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	b292      	uxth	r2, r2
 8005caa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	1c9a      	adds	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f994 	bl	800601c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	881a      	ldrh	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	1c9a      	adds	r2, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d110      	bne.n	8005d54 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d40:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f964 	bl	800601c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d6c:	f7fc f9b0 	bl	80020d0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4413      	add	r3, r2
 8005d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d7c:	f7fc f9a8 	bl	80020d0 <HAL_GetTick>
 8005d80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	015b      	lsls	r3, r3, #5
 8005d88:	0d1b      	lsrs	r3, r3, #20
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d92:	e054      	b.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d050      	beq.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d9c:	f7fc f998 	bl	80020d0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d902      	bls.n	8005db2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d13d      	bne.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dca:	d111      	bne.n	8005df0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	d004      	beq.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d107      	bne.n	8005df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d10f      	bne.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e017      	b.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4013      	ands	r3, r2
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d19b      	bne.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000001c 	.word	0x2000001c

08005e6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e7a:	f7fc f929 	bl	80020d0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	4413      	add	r3, r2
 8005e88:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e8a:	f7fc f921 	bl	80020d0 <HAL_GetTick>
 8005e8e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e90:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	00da      	lsls	r2, r3, #3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	0d1b      	lsrs	r3, r3, #20
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ea8:	e062      	b.n	8005f70 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005eb0:	d109      	bne.n	8005ec6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005ec4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d050      	beq.n	8005f70 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ece:	f7fc f8ff 	bl	80020d0 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d902      	bls.n	8005ee4 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d13d      	bne.n	8005f60 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efc:	d111      	bne.n	8005f22 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f06:	d004      	beq.n	8005f12 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f10:	d107      	bne.n	8005f22 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2a:	d10f      	bne.n	8005f4c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e010      	b.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d194      	bne.n	8005eaa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000001c 	.word	0x2000001c

08005f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff ff5f 	bl	8005e6c <SPI_WaitFifoStateUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e027      	b.n	8006014 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2180      	movs	r1, #128	; 0x80
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff fec4 	bl	8005d5c <SPI_WaitFlagStateUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e014      	b.n	8006014 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff ff38 	bl	8005e6c <SPI_WaitFifoStateUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e000      	b.n	8006014 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006024:	f7fc f854 	bl	80020d0 <HAL_GetTick>
 8006028:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0220 	bic.w	r2, r2, #32
 8006038:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	2164      	movs	r1, #100	; 0x64
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ffa6 	bl	8005f90 <SPI_EndRxTxTransaction>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604e:	f043 0220 	orr.w	r2, r3, #32
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	2b00      	cmp	r3, #0
 800605c:	d115      	bne.n	800608a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b04      	cmp	r3, #4
 8006068:	d107      	bne.n	800607a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fd3e 	bl	8005af4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006078:	e00e      	b.n	8006098 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fa fb4e 	bl	8000724 <HAL_SPI_TxRxCpltCallback>
}
 8006088:	e006      	b.n	8006098 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fd38 	bl	8005b08 <HAL_SPI_ErrorCallback>
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d001      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e03b      	b.n	8006130 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a19      	ldr	r2, [pc, #100]	; (800613c <HAL_TIM_Base_Start_IT+0x9c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_TIM_Base_Start_IT+0x4e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e2:	d004      	beq.n	80060ee <HAL_TIM_Base_Start_IT+0x4e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a15      	ldr	r2, [pc, #84]	; (8006140 <HAL_TIM_Base_Start_IT+0xa0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d115      	bne.n	800611a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_TIM_Base_Start_IT+0xa4>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d015      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x8c>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006106:	d011      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006118:	e008      	b.n	800612c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e000      	b.n	800612e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40012c00 	.word	0x40012c00
 8006140:	40014000 	.word	0x40014000
 8006144:	00010007 	.word	0x00010007

08006148 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	f241 1311 	movw	r3, #4369	; 0x1111
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10f      	bne.n	8006190 <HAL_TIM_Base_Stop_IT+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	f240 4344 	movw	r3, #1092	; 0x444
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <HAL_TIM_Base_Stop_IT+0x48>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e049      	b.n	800624c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fb fc49 	bl	8001a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f000 fc7f 	bl	8006ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d109      	bne.n	8006278 <HAL_TIM_PWM_Start_IT+0x24>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	e03c      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b04      	cmp	r3, #4
 800627c:	d109      	bne.n	8006292 <HAL_TIM_PWM_Start_IT+0x3e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b01      	cmp	r3, #1
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e02f      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d109      	bne.n	80062ac <HAL_TIM_PWM_Start_IT+0x58>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e022      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x9e>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d109      	bne.n	80062c6 <HAL_TIM_PWM_Start_IT+0x72>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	bf14      	ite	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	2300      	moveq	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	e015      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x9e>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d109      	bne.n	80062e0 <HAL_TIM_PWM_Start_IT+0x8c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e008      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x9e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0c4      	b.n	8006484 <HAL_TIM_PWM_Start_IT+0x230>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start_IT+0xb6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	e023      	b.n	8006352 <HAL_TIM_PWM_Start_IT+0xfe>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start_IT+0xc6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006318:	e01b      	b.n	8006352 <HAL_TIM_PWM_Start_IT+0xfe>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b08      	cmp	r3, #8
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start_IT+0xd6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006328:	e013      	b.n	8006352 <HAL_TIM_PWM_Start_IT+0xfe>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Start_IT+0xe6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006338:	e00b      	b.n	8006352 <HAL_TIM_PWM_Start_IT+0xfe>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b10      	cmp	r3, #16
 800633e:	d104      	bne.n	800634a <HAL_TIM_PWM_Start_IT+0xf6>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	e003      	b.n	8006352 <HAL_TIM_PWM_Start_IT+0xfe>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d841      	bhi.n	80063dc <HAL_TIM_PWM_Start_IT+0x188>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <HAL_TIM_PWM_Start_IT+0x10c>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006395 	.word	0x08006395
 8006364:	080063dd 	.word	0x080063dd
 8006368:	080063dd 	.word	0x080063dd
 800636c:	080063dd 	.word	0x080063dd
 8006370:	080063a7 	.word	0x080063a7
 8006374:	080063dd 	.word	0x080063dd
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080063dd 	.word	0x080063dd
 8006380:	080063b9 	.word	0x080063b9
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063dd 	.word	0x080063dd
 800638c:	080063dd 	.word	0x080063dd
 8006390:	080063cb 	.word	0x080063cb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0202 	orr.w	r2, r2, #2
 80063a2:	60da      	str	r2, [r3, #12]
      break;
 80063a4:	e01b      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0204 	orr.w	r2, r2, #4
 80063b4:	60da      	str	r2, [r3, #12]
      break;
 80063b6:	e012      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	60da      	str	r2, [r3, #12]
      break;
 80063c8:	e009      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0210 	orr.w	r2, r2, #16
 80063d8:	60da      	str	r2, [r3, #12]
      break;
 80063da:	e000      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80063dc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fe60 	bl	80070ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a26      	ldr	r2, [pc, #152]	; (800648c <HAL_TIM_PWM_Start_IT+0x238>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_TIM_PWM_Start_IT+0x1b6>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a25      	ldr	r2, [pc, #148]	; (8006490 <HAL_TIM_PWM_Start_IT+0x23c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_TIM_PWM_Start_IT+0x1b6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_TIM_PWM_Start_IT+0x240>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_TIM_PWM_Start_IT+0x1ba>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <HAL_TIM_PWM_Start_IT+0x1bc>
 800640e:	2300      	movs	r3, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a18      	ldr	r2, [pc, #96]	; (800648c <HAL_TIM_PWM_Start_IT+0x238>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d009      	beq.n	8006442 <HAL_TIM_PWM_Start_IT+0x1ee>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006436:	d004      	beq.n	8006442 <HAL_TIM_PWM_Start_IT+0x1ee>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a14      	ldr	r2, [pc, #80]	; (8006490 <HAL_TIM_PWM_Start_IT+0x23c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d115      	bne.n	800646e <HAL_TIM_PWM_Start_IT+0x21a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <HAL_TIM_PWM_Start_IT+0x244>)
 800644a:	4013      	ands	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b06      	cmp	r3, #6
 8006452:	d015      	beq.n	8006480 <HAL_TIM_PWM_Start_IT+0x22c>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645a:	d011      	beq.n	8006480 <HAL_TIM_PWM_Start_IT+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646c:	e008      	b.n	8006480 <HAL_TIM_PWM_Start_IT+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e000      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0x22e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40014000 	.word	0x40014000
 8006494:	40014400 	.word	0x40014400
 8006498:	00010007 	.word	0x00010007

0800649c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d841      	bhi.n	8006530 <HAL_TIM_PWM_Stop_IT+0x94>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <HAL_TIM_PWM_Stop_IT+0x18>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064e9 	.word	0x080064e9
 80064b8:	08006531 	.word	0x08006531
 80064bc:	08006531 	.word	0x08006531
 80064c0:	08006531 	.word	0x08006531
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	08006531 	.word	0x08006531
 80064cc:	08006531 	.word	0x08006531
 80064d0:	08006531 	.word	0x08006531
 80064d4:	0800650d 	.word	0x0800650d
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006531 	.word	0x08006531
 80064e0:	08006531 	.word	0x08006531
 80064e4:	0800651f 	.word	0x0800651f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0202 	bic.w	r2, r2, #2
 80064f6:	60da      	str	r2, [r3, #12]
      break;
 80064f8:	e01b      	b.n	8006532 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0204 	bic.w	r2, r2, #4
 8006508:	60da      	str	r2, [r3, #12]
      break;
 800650a:	e012      	b.n	8006532 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0208 	bic.w	r2, r2, #8
 800651a:	60da      	str	r2, [r3, #12]
      break;
 800651c:	e009      	b.n	8006532 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0210 	bic.w	r2, r2, #16
 800652c:	60da      	str	r2, [r3, #12]
      break;
 800652e:	e000      	b.n	8006532 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006530:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fdb6 	bl	80070ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a39      	ldr	r2, [pc, #228]	; (800662c <HAL_TIM_PWM_Stop_IT+0x190>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_TIM_PWM_Stop_IT+0xc2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a38      	ldr	r2, [pc, #224]	; (8006630 <HAL_TIM_PWM_Stop_IT+0x194>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_TIM_PWM_Stop_IT+0xc2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a36      	ldr	r2, [pc, #216]	; (8006634 <HAL_TIM_PWM_Stop_IT+0x198>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_Stop_IT+0xc6>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <HAL_TIM_PWM_Stop_IT+0xc8>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d017      	beq.n	8006598 <HAL_TIM_PWM_Stop_IT+0xfc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a1a      	ldr	r2, [r3, #32]
 800656e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10f      	bne.n	8006598 <HAL_TIM_PWM_Stop_IT+0xfc>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f240 4344 	movw	r3, #1092	; 0x444
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d107      	bne.n	8006598 <HAL_TIM_PWM_Stop_IT+0xfc>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a1a      	ldr	r2, [r3, #32]
 800659e:	f241 1311 	movw	r3, #4369	; 0x1111
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <HAL_TIM_PWM_Stop_IT+0x12c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	f240 4344 	movw	r3, #1092	; 0x444
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_TIM_PWM_Stop_IT+0x12c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <HAL_TIM_PWM_Stop_IT+0x13c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d6:	e023      	b.n	8006620 <HAL_TIM_PWM_Stop_IT+0x184>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d104      	bne.n	80065e8 <HAL_TIM_PWM_Stop_IT+0x14c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e6:	e01b      	b.n	8006620 <HAL_TIM_PWM_Stop_IT+0x184>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d104      	bne.n	80065f8 <HAL_TIM_PWM_Stop_IT+0x15c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f6:	e013      	b.n	8006620 <HAL_TIM_PWM_Stop_IT+0x184>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	d104      	bne.n	8006608 <HAL_TIM_PWM_Stop_IT+0x16c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006606:	e00b      	b.n	8006620 <HAL_TIM_PWM_Stop_IT+0x184>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b10      	cmp	r3, #16
 800660c:	d104      	bne.n	8006618 <HAL_TIM_PWM_Stop_IT+0x17c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006616:	e003      	b.n	8006620 <HAL_TIM_PWM_Stop_IT+0x184>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40014000 	.word	0x40014000
 8006634:	40014400 	.word	0x40014400

08006638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b02      	cmp	r3, #2
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0202 	mvn.w	r2, #2
 8006664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa16 	bl	8006aac <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa08 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa19 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d122      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d11b      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0204 	mvn.w	r2, #4
 80066b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f9ec 	bl	8006aac <HAL_TIM_IC_CaptureCallback>
 80066d4:	e005      	b.n	80066e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9de 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f9ef 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b08      	cmp	r3, #8
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0208 	mvn.w	r2, #8
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2204      	movs	r2, #4
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9c2 	bl	8006aac <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9b4 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f9c5 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b10      	cmp	r3, #16
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0210 	mvn.w	r2, #16
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2208      	movs	r2, #8
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f998 	bl	8006aac <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f98a 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f99b 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10e      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0201 	mvn.w	r2, #1
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa ffc8 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d10e      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d107      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fed8 	bl	8007598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f6:	d10e      	bne.n	8006816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d107      	bne.n	8006816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800680e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fecb 	bl	80075ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d10e      	bne.n	8006842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b40      	cmp	r3, #64	; 0x40
 8006830:	d107      	bne.n	8006842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f949 	bl	8006ad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b20      	cmp	r3, #32
 800684e:	d10e      	bne.n	800686e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b20      	cmp	r3, #32
 800685c:	d107      	bne.n	800686e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0220 	mvn.w	r2, #32
 8006866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fe8b 	bl	8007584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800688e:	2302      	movs	r3, #2
 8006890:	e0fd      	b.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b14      	cmp	r3, #20
 800689e:	f200 80f0 	bhi.w	8006a82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006a83 	.word	0x08006a83
 80068b0:	08006a83 	.word	0x08006a83
 80068b4:	08006a83 	.word	0x08006a83
 80068b8:	0800693d 	.word	0x0800693d
 80068bc:	08006a83 	.word	0x08006a83
 80068c0:	08006a83 	.word	0x08006a83
 80068c4:	08006a83 	.word	0x08006a83
 80068c8:	0800697f 	.word	0x0800697f
 80068cc:	08006a83 	.word	0x08006a83
 80068d0:	08006a83 	.word	0x08006a83
 80068d4:	08006a83 	.word	0x08006a83
 80068d8:	080069bf 	.word	0x080069bf
 80068dc:	08006a83 	.word	0x08006a83
 80068e0:	08006a83 	.word	0x08006a83
 80068e4:	08006a83 	.word	0x08006a83
 80068e8:	08006a01 	.word	0x08006a01
 80068ec:	08006a83 	.word	0x08006a83
 80068f0:	08006a83 	.word	0x08006a83
 80068f4:	08006a83 	.word	0x08006a83
 80068f8:	08006a41 	.word	0x08006a41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f954 	bl	8006bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0204 	bic.w	r2, r2, #4
 8006926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6999      	ldr	r1, [r3, #24]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	619a      	str	r2, [r3, #24]
      break;
 800693a:	e0a3      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 f9b0 	bl	8006ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6999      	ldr	r1, [r3, #24]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	619a      	str	r2, [r3, #24]
      break;
 800697c:	e082      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fa09 	bl	8006d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0208 	orr.w	r2, r2, #8
 8006998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0204 	bic.w	r2, r2, #4
 80069a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69d9      	ldr	r1, [r3, #28]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	61da      	str	r2, [r3, #28]
      break;
 80069bc:	e062      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fa61 	bl	8006e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69d9      	ldr	r1, [r3, #28]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	021a      	lsls	r2, r3, #8
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	61da      	str	r2, [r3, #28]
      break;
 80069fe:	e041      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fa9e 	bl	8006f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0208 	orr.w	r2, r2, #8
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0204 	bic.w	r2, r2, #4
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a3e:	e021      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fad6 	bl	8006ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	021a      	lsls	r2, r3, #8
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a80:	e000      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006a82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop

08006a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <TIM_Base_SetConfig+0xbc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_Base_SetConfig+0x20>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b06:	d108      	bne.n	8006b1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <TIM_Base_SetConfig+0xbc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00b      	beq.n	8006b3a <TIM_Base_SetConfig+0x52>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b28:	d007      	beq.n	8006b3a <TIM_Base_SetConfig+0x52>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <TIM_Base_SetConfig+0xc0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_Base_SetConfig+0x52>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1d      	ldr	r2, [pc, #116]	; (8006bac <TIM_Base_SetConfig+0xc4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d108      	bne.n	8006b4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0c      	ldr	r2, [pc, #48]	; (8006ba4 <TIM_Base_SetConfig+0xbc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_Base_SetConfig+0xa0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ba8 <TIM_Base_SetConfig+0xc0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_Base_SetConfig+0xa0>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <TIM_Base_SetConfig+0xc4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d103      	bne.n	8006b90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	615a      	str	r2, [r3, #20]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400

08006bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f023 0201 	bic.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f023 0302 	bic.w	r3, r3, #2
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <TIM_OC1_SetConfig+0xec>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_OC1_SetConfig+0x70>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <TIM_OC1_SetConfig+0xf0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC1_SetConfig+0x70>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <TIM_OC1_SetConfig+0xf4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10c      	bne.n	8006c3a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0308 	bic.w	r3, r3, #8
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <TIM_OC1_SetConfig+0xec>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d007      	beq.n	8006c52 <TIM_OC1_SetConfig+0xa2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <TIM_OC1_SetConfig+0xf0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_OC1_SetConfig+0xa2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <TIM_OC1_SetConfig+0xf4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d111      	bne.n	8006c76 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400

08006ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0210 	bic.w	r2, r3, #16
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0320 	bic.w	r3, r3, #32
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <TIM_OC2_SetConfig+0xe8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d10d      	bne.n	8006d28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <TIM_OC2_SetConfig+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_OC2_SetConfig+0x98>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <TIM_OC2_SetConfig+0xec>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC2_SetConfig+0x98>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <TIM_OC2_SetConfig+0xf0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d113      	bne.n	8006d68 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400

08006d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <TIM_OC3_SetConfig+0xe4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10d      	bne.n	8006e1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a18      	ldr	r2, [pc, #96]	; (8006e80 <TIM_OC3_SetConfig+0xe4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_OC3_SetConfig+0x96>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a17      	ldr	r2, [pc, #92]	; (8006e84 <TIM_OC3_SetConfig+0xe8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_OC3_SetConfig+0x96>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <TIM_OC3_SetConfig+0xec>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d113      	bne.n	8006e5a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	621a      	str	r2, [r3, #32]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40012c00 	.word	0x40012c00
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40014400 	.word	0x40014400

08006e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	031b      	lsls	r3, r3, #12
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a14      	ldr	r2, [pc, #80]	; (8006f3c <TIM_OC4_SetConfig+0xb0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_OC4_SetConfig+0x74>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <TIM_OC4_SetConfig+0xb4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC4_SetConfig+0x74>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <TIM_OC4_SetConfig+0xb8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d109      	bne.n	8006f14 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	019b      	lsls	r3, r3, #6
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400

08006f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a13      	ldr	r2, [pc, #76]	; (8006fec <TIM_OC5_SetConfig+0xa4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d007      	beq.n	8006fb2 <TIM_OC5_SetConfig+0x6a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a12      	ldr	r2, [pc, #72]	; (8006ff0 <TIM_OC5_SetConfig+0xa8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d003      	beq.n	8006fb2 <TIM_OC5_SetConfig+0x6a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a11      	ldr	r2, [pc, #68]	; (8006ff4 <TIM_OC5_SetConfig+0xac>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d109      	bne.n	8006fc6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400

08006ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	051b      	lsls	r3, r3, #20
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a14      	ldr	r2, [pc, #80]	; (80070a0 <TIM_OC6_SetConfig+0xa8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_OC6_SetConfig+0x6c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <TIM_OC6_SetConfig+0xac>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC6_SetConfig+0x6c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <TIM_OC6_SetConfig+0xb0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d109      	bne.n	8007078 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	029b      	lsls	r3, r3, #10
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400

080070ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2201      	movs	r2, #1
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	401a      	ands	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	431a      	orrs	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
	...

080070f8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_TIMEx_PWMN_Start_IT+0x24>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	bf14      	ite	ne
 8007114:	2301      	movne	r3, #1
 8007116:	2300      	moveq	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	e022      	b.n	8007162 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b04      	cmp	r3, #4
 8007120:	d109      	bne.n	8007136 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	bf14      	ite	ne
 800712e:	2301      	movne	r3, #1
 8007130:	2300      	moveq	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	e015      	b.n	8007162 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b08      	cmp	r3, #8
 800713a:	d109      	bne.n	8007150 <HAL_TIMEx_PWMN_Start_IT+0x58>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	bf14      	ite	ne
 8007148:	2301      	movne	r3, #1
 800714a:	2300      	moveq	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	e008      	b.n	8007162 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e08b      	b.n	8007282 <HAL_TIMEx_PWMN_Start_IT+0x18a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <HAL_TIMEx_PWMN_Start_IT+0x82>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	e013      	b.n	80071a2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b04      	cmp	r3, #4
 800717e:	d104      	bne.n	800718a <HAL_TIMEx_PWMN_Start_IT+0x92>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007188:	e00b      	b.n	80071a2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d104      	bne.n	800719a <HAL_TIMEx_PWMN_Start_IT+0xa2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007198:	e003      	b.n	80071a2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d01b      	beq.n	80071e0 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d821      	bhi.n	80071f2 <HAL_TIMEx_PWMN_Start_IT+0xfa>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_TIMEx_PWMN_Start_IT+0xc4>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d009      	beq.n	80071ce <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80071ba:	e01a      	b.n	80071f2 <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0202 	orr.w	r2, r2, #2
 80071ca:	60da      	str	r2, [r3, #12]
      break;
 80071cc:	e012      	b.n	80071f4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0204 	orr.w	r2, r2, #4
 80071dc:	60da      	str	r2, [r3, #12]
      break;
 80071de:	e009      	b.n	80071f4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0208 	orr.w	r2, r2, #8
 80071ee:	60da      	str	r2, [r3, #12]
      break;
 80071f0:	e000      	b.n	80071f4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 80071f2:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007202:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2204      	movs	r2, #4
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f9d7 	bl	80075c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007220:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a19      	ldr	r2, [pc, #100]	; (800728c <HAL_TIMEx_PWMN_Start_IT+0x194>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <HAL_TIMEx_PWMN_Start_IT+0x148>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d004      	beq.n	8007240 <HAL_TIMEx_PWMN_Start_IT+0x148>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a15      	ldr	r2, [pc, #84]	; (8007290 <HAL_TIMEx_PWMN_Start_IT+0x198>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d115      	bne.n	800726c <HAL_TIMEx_PWMN_Start_IT+0x174>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <HAL_TIMEx_PWMN_Start_IT+0x19c>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b06      	cmp	r3, #6
 8007250:	d015      	beq.n	800727e <HAL_TIMEx_PWMN_Start_IT+0x186>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007258:	d011      	beq.n	800727e <HAL_TIMEx_PWMN_Start_IT+0x186>
    {
      __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726a:	e008      	b.n	800727e <HAL_TIMEx_PWMN_Start_IT+0x186>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e000      	b.n	8007280 <HAL_TIMEx_PWMN_Start_IT+0x188>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40012c00 	.word	0x40012c00
 8007290:	40014000 	.word	0x40014000
 8007294:	00010007 	.word	0x00010007

08007298 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d01b      	beq.n	80072e0 <HAL_TIMEx_PWMN_Stop_IT+0x48>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d821      	bhi.n	80072f2 <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_TIMEx_PWMN_Stop_IT+0x24>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d009      	beq.n	80072ce <HAL_TIMEx_PWMN_Stop_IT+0x36>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80072ba:	e01a      	b.n	80072f2 <HAL_TIMEx_PWMN_Stop_IT+0x5a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0202 	bic.w	r2, r2, #2
 80072ca:	60da      	str	r2, [r3, #12]
      break;
 80072cc:	e012      	b.n	80072f4 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0204 	bic.w	r2, r2, #4
 80072dc:	60da      	str	r2, [r3, #12]
      break;
 80072de:	e009      	b.n	80072f4 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0208 	bic.w	r2, r2, #8
 80072ee:	60da      	str	r2, [r3, #12]
      break;
 80072f0:	e000      	b.n	80072f4 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      break;
 80072f2:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2200      	movs	r2, #0
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f95f 	bl	80075c0 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	f240 4344 	movw	r3, #1092	; 0x444
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <HAL_TIMEx_PWMN_Stop_IT+0x8e>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007324:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10f      	bne.n	8007356 <HAL_TIMEx_PWMN_Stop_IT+0xbe>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a1a      	ldr	r2, [r3, #32]
 800733c:	f240 4344 	movw	r3, #1092	; 0x444
 8007340:	4013      	ands	r3, r2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <HAL_TIMEx_PWMN_Stop_IT+0xbe>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007354:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <HAL_TIMEx_PWMN_Stop_IT+0xee>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	f240 4344 	movw	r3, #1092	; 0x444
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <HAL_TIMEx_PWMN_Stop_IT+0xee>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <HAL_TIMEx_PWMN_Stop_IT+0xfe>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007394:	e013      	b.n	80073be <HAL_TIMEx_PWMN_Stop_IT+0x126>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d104      	bne.n	80073a6 <HAL_TIMEx_PWMN_Stop_IT+0x10e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a4:	e00b      	b.n	80073be <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d104      	bne.n	80073b6 <HAL_TIMEx_PWMN_Stop_IT+0x11e>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073b4:	e003      	b.n	80073be <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e04f      	b.n	8007480 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a21      	ldr	r2, [pc, #132]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a14      	ldr	r2, [pc, #80]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007448:	d004      	beq.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d10c      	bne.n	800746e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	4313      	orrs	r3, r2
 8007464:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40014000 	.word	0x40014000

08007494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e060      	b.n	8007572 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a14      	ldr	r2, [pc, #80]	; (8007580 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d115      	bne.n	8007560 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	051b      	lsls	r3, r3, #20
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00

08007584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2204      	movs	r2, #4
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1a      	ldr	r2, [r3, #32]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a1a      	ldr	r2, [r3, #32]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	fa01 f303 	lsl.w	r3, r1, r3
 80075f8:	431a      	orrs	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e040      	b.n	800769e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fa fa95 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2224      	movs	r2, #36	; 0x24
 8007636:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb1b 	bl	8007c84 <UART_SetConfig>
 800764e:	4603      	mov	r3, r0
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e022      	b.n	800769e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fd1b 	bl	800809c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fda2 	bl	80081e0 <UART_CheckIdleState>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d166      	bne.n	800778c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_UART_Transmit_DMA+0x22>
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e05f      	b.n	800778e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Transmit_DMA+0x34>
 80076d8:	2302      	movs	r3, #2
 80076da:	e058      	b.n	800778e <HAL_UART_Transmit_DMA+0xe6>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2221      	movs	r2, #33	; 0x21
 8007706:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d02b      	beq.n	8007768 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007714:	4a20      	ldr	r2, [pc, #128]	; (8007798 <HAL_UART_Transmit_DMA+0xf0>)
 8007716:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771c:	4a1f      	ldr	r2, [pc, #124]	; (800779c <HAL_UART_Transmit_DMA+0xf4>)
 800771e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007724:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <HAL_UART_Transmit_DMA+0xf8>)
 8007726:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772c:	2200      	movs	r2, #0
 800772e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007738:	4619      	mov	r1, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3328      	adds	r3, #40	; 0x28
 8007740:	461a      	mov	r2, r3
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	f7fc fab8 	bl	8003cb8 <HAL_DMA_Start_IT>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2210      	movs	r2, #16
 8007752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e012      	b.n	800778e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2240      	movs	r2, #64	; 0x40
 800776e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007786:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	e000      	b.n	800778e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 800778c:	2302      	movs	r3, #2
  }
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	080084cd 	.word	0x080084cd
 800779c:	08008521 	.word	0x08008521
 80077a0:	0800860d 	.word	0x0800860d

080077a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d131      	bne.n	800781e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <HAL_UART_Receive_DMA+0x22>
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e02a      	b.n	8007820 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_UART_Receive_DMA+0x34>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e023      	b.n	8007820 <HAL_UART_Receive_DMA+0x7c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <HAL_UART_Receive_DMA+0x84>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00e      	beq.n	800780e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800780c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	461a      	mov	r2, r3
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fda9 	bl	800836c <UART_Start_Receive_DMA>
 800781a:	4603      	mov	r3, r0
 800781c:	e000      	b.n	8007820 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800781e:	2302      	movs	r3, #2
  }
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40008000 	.word	0x40008000

0800782c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007852:	4013      	ands	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d113      	bne.n	8007884 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00e      	beq.n	8007884 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 81ce 	beq.w	8007c16 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
      }
      return;
 8007882:	e1c8      	b.n	8007c16 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80e3 	beq.w	8007a52 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4ba6      	ldr	r3, [pc, #664]	; (8007b34 <HAL_UART_IRQHandler+0x308>)
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 80d8 	beq.w	8007a52 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d010      	beq.n	80078ce <HAL_UART_IRQHandler+0xa2>
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2201      	movs	r2, #1
 80078bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c4:	f043 0201 	orr.w	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d010      	beq.n	80078fa <HAL_UART_IRQHandler+0xce>
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2202      	movs	r2, #2
 80078e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f0:	f043 0204 	orr.w	r2, r3, #4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d010      	beq.n	8007926 <HAL_UART_IRQHandler+0xfa>
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2204      	movs	r2, #4
 8007914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800791c:	f043 0202 	orr.w	r2, r3, #2
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d015      	beq.n	800795c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2208      	movs	r2, #8
 800794a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007952:	f043 0208 	orr.w	r2, r3, #8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007962:	2b00      	cmp	r3, #0
 8007964:	d011      	beq.n	800798a <HAL_UART_IRQHandler+0x15e>
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007980:	f043 0220 	orr.w	r2, r3, #32
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8142 	beq.w	8007c1a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00c      	beq.n	80079ba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d004      	beq.n	80079da <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d031      	beq.n	8007a3e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fd47 	bl	800846e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d123      	bne.n	8007a36 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	4a4b      	ldr	r2, [pc, #300]	; (8007b38 <HAL_UART_IRQHandler+0x30c>)
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fc f9ee 	bl	8003df4 <HAL_DMA_Abort_IT>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	e00f      	b.n	8007a4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7f9 fede 	bl	80017f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	e00b      	b.n	8007a4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7f9 feda 	bl	80017f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	e007      	b.n	8007a4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7f9 fed6 	bl	80017f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a4c:	e0e5      	b.n	8007c1a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4e:	bf00      	nop
    return;
 8007a50:	e0e3      	b.n	8007c1a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	f040 80a9 	bne.w	8007bae <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80a3 	beq.w	8007bae <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 809d 	beq.w	8007bae <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d158      	bne.n	8007b3c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007a94:	893b      	ldrh	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80c1 	beq.w	8007c1e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007aa2:	893a      	ldrh	r2, [r7, #8]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	f080 80ba 	bcs.w	8007c1e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	893a      	ldrh	r2, [r7, #8]
 8007aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d12a      	bne.n	8007b18 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ad0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0201 	bic.w	r2, r2, #1
 8007ae0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0210 	bic.w	r2, r2, #16
 8007b0c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fc f930 	bl	8003d78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f89d 	bl	8007c6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b32:	e074      	b.n	8007c1e <HAL_UART_IRQHandler+0x3f2>
 8007b34:	04000120 	.word	0x04000120
 8007b38:	08008689 	.word	0x08008689
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d063      	beq.n	8007c22 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8007b5a:	897b      	ldrh	r3, [r7, #10]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d060      	beq.n	8007c22 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b6e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0210 	bic.w	r2, r2, #16
 8007ba0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba2:	897b      	ldrh	r3, [r7, #10]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f860 	bl	8007c6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007bac:	e039      	b.n	8007c22 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00d      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x3a8>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fd8a 	bl	80086e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd2:	e029      	b.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00d      	beq.n	8007bfa <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d008      	beq.n	8007bfa <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01a      	beq.n	8007c26 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
    }
    return;
 8007bf8:	e015      	b.n	8007c26 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d011      	beq.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fd50 	bl	80086b4 <UART_EndTransmit_IT>
    return;
 8007c14:	e008      	b.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007c16:	bf00      	nop
 8007c18:	e006      	b.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007c1a:	bf00      	nop
 8007c1c:	e004      	b.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007c1e:	bf00      	nop
 8007c20:	e002      	b.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007c26:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop

08007c30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c84:	b5b0      	push	{r4, r5, r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4baf      	ldr	r3, [pc, #700]	; (8007f6c <UART_SetConfig+0x2e8>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	69f9      	ldr	r1, [r7, #28]
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4aa4      	ldr	r2, [pc, #656]	; (8007f70 <UART_SetConfig+0x2ec>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a9b      	ldr	r2, [pc, #620]	; (8007f74 <UART_SetConfig+0x2f0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d121      	bne.n	8007d4e <UART_SetConfig+0xca>
 8007d0a:	4b9b      	ldr	r3, [pc, #620]	; (8007f78 <UART_SetConfig+0x2f4>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d817      	bhi.n	8007d48 <UART_SetConfig+0xc4>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x9c>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d3d 	.word	0x08007d3d
 8007d28:	08007d37 	.word	0x08007d37
 8007d2c:	08007d43 	.word	0x08007d43
 8007d30:	2301      	movs	r3, #1
 8007d32:	76fb      	strb	r3, [r7, #27]
 8007d34:	e070      	b.n	8007e18 <UART_SetConfig+0x194>
 8007d36:	2302      	movs	r3, #2
 8007d38:	76fb      	strb	r3, [r7, #27]
 8007d3a:	e06d      	b.n	8007e18 <UART_SetConfig+0x194>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	76fb      	strb	r3, [r7, #27]
 8007d40:	e06a      	b.n	8007e18 <UART_SetConfig+0x194>
 8007d42:	2308      	movs	r3, #8
 8007d44:	76fb      	strb	r3, [r7, #27]
 8007d46:	e067      	b.n	8007e18 <UART_SetConfig+0x194>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	76fb      	strb	r3, [r7, #27]
 8007d4c:	e064      	b.n	8007e18 <UART_SetConfig+0x194>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a8a      	ldr	r2, [pc, #552]	; (8007f7c <UART_SetConfig+0x2f8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d132      	bne.n	8007dbe <UART_SetConfig+0x13a>
 8007d58:	4b87      	ldr	r3, [pc, #540]	; (8007f78 <UART_SetConfig+0x2f4>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5e:	f003 030c 	and.w	r3, r3, #12
 8007d62:	2b0c      	cmp	r3, #12
 8007d64:	d828      	bhi.n	8007db8 <UART_SetConfig+0x134>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0xe8>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007da1 	.word	0x08007da1
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007db9 	.word	0x08007db9
 8007d78:	08007db9 	.word	0x08007db9
 8007d7c:	08007dad 	.word	0x08007dad
 8007d80:	08007db9 	.word	0x08007db9
 8007d84:	08007db9 	.word	0x08007db9
 8007d88:	08007db9 	.word	0x08007db9
 8007d8c:	08007da7 	.word	0x08007da7
 8007d90:	08007db9 	.word	0x08007db9
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	08007db3 	.word	0x08007db3
 8007da0:	2300      	movs	r3, #0
 8007da2:	76fb      	strb	r3, [r7, #27]
 8007da4:	e038      	b.n	8007e18 <UART_SetConfig+0x194>
 8007da6:	2302      	movs	r3, #2
 8007da8:	76fb      	strb	r3, [r7, #27]
 8007daa:	e035      	b.n	8007e18 <UART_SetConfig+0x194>
 8007dac:	2304      	movs	r3, #4
 8007dae:	76fb      	strb	r3, [r7, #27]
 8007db0:	e032      	b.n	8007e18 <UART_SetConfig+0x194>
 8007db2:	2308      	movs	r3, #8
 8007db4:	76fb      	strb	r3, [r7, #27]
 8007db6:	e02f      	b.n	8007e18 <UART_SetConfig+0x194>
 8007db8:	2310      	movs	r3, #16
 8007dba:	76fb      	strb	r3, [r7, #27]
 8007dbc:	e02c      	b.n	8007e18 <UART_SetConfig+0x194>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a6b      	ldr	r2, [pc, #428]	; (8007f70 <UART_SetConfig+0x2ec>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d125      	bne.n	8007e14 <UART_SetConfig+0x190>
 8007dc8:	4b6b      	ldr	r3, [pc, #428]	; (8007f78 <UART_SetConfig+0x2f4>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd6:	d017      	beq.n	8007e08 <UART_SetConfig+0x184>
 8007dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ddc:	d817      	bhi.n	8007e0e <UART_SetConfig+0x18a>
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d00b      	beq.n	8007dfc <UART_SetConfig+0x178>
 8007de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de8:	d811      	bhi.n	8007e0e <UART_SetConfig+0x18a>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <UART_SetConfig+0x172>
 8007dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df2:	d006      	beq.n	8007e02 <UART_SetConfig+0x17e>
 8007df4:	e00b      	b.n	8007e0e <UART_SetConfig+0x18a>
 8007df6:	2300      	movs	r3, #0
 8007df8:	76fb      	strb	r3, [r7, #27]
 8007dfa:	e00d      	b.n	8007e18 <UART_SetConfig+0x194>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	76fb      	strb	r3, [r7, #27]
 8007e00:	e00a      	b.n	8007e18 <UART_SetConfig+0x194>
 8007e02:	2304      	movs	r3, #4
 8007e04:	76fb      	strb	r3, [r7, #27]
 8007e06:	e007      	b.n	8007e18 <UART_SetConfig+0x194>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	76fb      	strb	r3, [r7, #27]
 8007e0c:	e004      	b.n	8007e18 <UART_SetConfig+0x194>
 8007e0e:	2310      	movs	r3, #16
 8007e10:	76fb      	strb	r3, [r7, #27]
 8007e12:	e001      	b.n	8007e18 <UART_SetConfig+0x194>
 8007e14:	2310      	movs	r3, #16
 8007e16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a54      	ldr	r2, [pc, #336]	; (8007f70 <UART_SetConfig+0x2ec>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d173      	bne.n	8007f0a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e22:	7efb      	ldrb	r3, [r7, #27]
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d824      	bhi.n	8007e72 <UART_SetConfig+0x1ee>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x1ac>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e55 	.word	0x08007e55
 8007e34:	08007e73 	.word	0x08007e73
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e73 	.word	0x08007e73
 8007e40:	08007e63 	.word	0x08007e63
 8007e44:	08007e73 	.word	0x08007e73
 8007e48:	08007e73 	.word	0x08007e73
 8007e4c:	08007e73 	.word	0x08007e73
 8007e50:	08007e6b 	.word	0x08007e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e54:	f7fd f888 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8007e58:	6178      	str	r0, [r7, #20]
        break;
 8007e5a:	e00f      	b.n	8007e7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e5c:	4b48      	ldr	r3, [pc, #288]	; (8007f80 <UART_SetConfig+0x2fc>)
 8007e5e:	617b      	str	r3, [r7, #20]
        break;
 8007e60:	e00c      	b.n	8007e7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e62:	f7fc ffe9 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8007e66:	6178      	str	r0, [r7, #20]
        break;
 8007e68:	e008      	b.n	8007e7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e6e:	617b      	str	r3, [r7, #20]
        break;
 8007e70:	e004      	b.n	8007e7c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	76bb      	strb	r3, [r7, #26]
        break;
 8007e7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 80fe 	beq.w	8008080 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d305      	bcc.n	8007ea0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d902      	bls.n	8007ea6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	76bb      	strb	r3, [r7, #26]
 8007ea4:	e0ec      	b.n	8008080 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f04f 0100 	mov.w	r1, #0
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	020b      	lsls	r3, r1, #8
 8007eb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ebc:	0202      	lsls	r2, r0, #8
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	6849      	ldr	r1, [r1, #4]
 8007ec2:	0849      	lsrs	r1, r1, #1
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	f04f 0100 	mov.w	r1, #0
 8007eca:	1814      	adds	r4, r2, r0
 8007ecc:	eb43 0501 	adc.w	r5, r3, r1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	4620      	mov	r0, r4
 8007edc:	4629      	mov	r1, r5
 8007ede:	f7f8 f975 	bl	80001cc <__aeabi_uldivmod>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef0:	d308      	bcc.n	8007f04 <UART_SetConfig+0x280>
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ef8:	d204      	bcs.n	8007f04 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	e0bd      	b.n	8008080 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	76bb      	strb	r3, [r7, #26]
 8007f08:	e0ba      	b.n	8008080 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f12:	d168      	bne.n	8007fe6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007f14:	7efb      	ldrb	r3, [r7, #27]
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d834      	bhi.n	8007f84 <UART_SetConfig+0x300>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x29c>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f45 	.word	0x08007f45
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f55 	.word	0x08007f55
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f5b 	.word	0x08007f5b
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f63 	.word	0x08007f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f44:	f7fd f810 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8007f48:	6178      	str	r0, [r7, #20]
        break;
 8007f4a:	e020      	b.n	8007f8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f4c:	f7fd f822 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8007f50:	6178      	str	r0, [r7, #20]
        break;
 8007f52:	e01c      	b.n	8007f8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <UART_SetConfig+0x2fc>)
 8007f56:	617b      	str	r3, [r7, #20]
        break;
 8007f58:	e019      	b.n	8007f8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f5a:	f7fc ff6d 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8007f5e:	6178      	str	r0, [r7, #20]
        break;
 8007f60:	e015      	b.n	8007f8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f66:	617b      	str	r3, [r7, #20]
        break;
 8007f68:	e011      	b.n	8007f8e <UART_SetConfig+0x30a>
 8007f6a:	bf00      	nop
 8007f6c:	efff69f3 	.word	0xefff69f3
 8007f70:	40008000 	.word	0x40008000
 8007f74:	40013800 	.word	0x40013800
 8007f78:	40021000 	.word	0x40021000
 8007f7c:	40004400 	.word	0x40004400
 8007f80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	76bb      	strb	r3, [r7, #26]
        break;
 8007f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d075      	beq.n	8008080 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	005a      	lsls	r2, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	441a      	add	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b0f      	cmp	r3, #15
 8007fb0:	d916      	bls.n	8007fe0 <UART_SetConfig+0x35c>
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb8:	d212      	bcs.n	8007fe0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f023 030f 	bic.w	r3, r3, #15
 8007fc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	89fa      	ldrh	r2, [r7, #14]
 8007fdc:	60da      	str	r2, [r3, #12]
 8007fde:	e04f      	b.n	8008080 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	76bb      	strb	r3, [r7, #26]
 8007fe4:	e04c      	b.n	8008080 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fe6:	7efb      	ldrb	r3, [r7, #27]
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d828      	bhi.n	800803e <UART_SetConfig+0x3ba>
 8007fec:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <UART_SetConfig+0x370>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	0800803f 	.word	0x0800803f
 8008004:	0800802f 	.word	0x0800802f
 8008008:	0800803f 	.word	0x0800803f
 800800c:	0800803f 	.word	0x0800803f
 8008010:	0800803f 	.word	0x0800803f
 8008014:	08008037 	.word	0x08008037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008018:	f7fc ffa6 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 800801c:	6178      	str	r0, [r7, #20]
        break;
 800801e:	e013      	b.n	8008048 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008020:	f7fc ffb8 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8008024:	6178      	str	r0, [r7, #20]
        break;
 8008026:	e00f      	b.n	8008048 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008028:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <UART_SetConfig+0x414>)
 800802a:	617b      	str	r3, [r7, #20]
        break;
 800802c:	e00c      	b.n	8008048 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800802e:	f7fc ff03 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8008032:	6178      	str	r0, [r7, #20]
        break;
 8008034:	e008      	b.n	8008048 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800803a:	617b      	str	r3, [r7, #20]
        break;
 800803c:	e004      	b.n	8008048 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	76bb      	strb	r3, [r7, #26]
        break;
 8008046:	bf00      	nop
    }

    if (pclk != 0U)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d018      	beq.n	8008080 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	085a      	lsrs	r2, r3, #1
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	441a      	add	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	b29b      	uxth	r3, r3
 8008062:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d908      	bls.n	800807c <UART_SetConfig+0x3f8>
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d204      	bcs.n	800807c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e001      	b.n	8008080 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800808c:	7ebb      	ldrb	r3, [r7, #26]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3720      	adds	r7, #32
 8008092:	46bd      	mov	sp, r7
 8008094:	bdb0      	pop	{r4, r5, r7, pc}
 8008096:	bf00      	nop
 8008098:	00f42400 	.word	0x00f42400

0800809c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01a      	beq.n	80081b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819a:	d10a      	bne.n	80081b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	605a      	str	r2, [r3, #4]
  }
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081f0:	f7f9 ff6e 	bl	80020d0 <HAL_GetTick>
 80081f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b08      	cmp	r3, #8
 8008202:	d10e      	bne.n	8008222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f82d 	bl	8008272 <UART_WaitOnFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e023      	b.n	800826a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b04      	cmp	r3, #4
 800822e:	d10e      	bne.n	800824e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f817 	bl	8008272 <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e00d      	b.n	800826a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008282:	e05e      	b.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d05a      	beq.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828c:	f7f9 ff20 	bl	80020d0 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	429a      	cmp	r2, r3
 800829a:	d302      	bcc.n	80082a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d11b      	bne.n	80082da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0201 	bic.w	r2, r2, #1
 80082c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2220      	movs	r2, #32
 80082c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2220      	movs	r2, #32
 80082cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e043      	b.n	8008362 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d02c      	beq.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f6:	d124      	bne.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008300:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008310:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e00f      	b.n	8008362 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69da      	ldr	r2, [r3, #28]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4013      	ands	r3, r2
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	429a      	cmp	r2, r3
 8008350:	bf0c      	ite	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	2300      	movne	r3, #0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	429a      	cmp	r2, r3
 800835e:	d091      	beq.n	8008284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2222      	movs	r2, #34	; 0x22
 8008394:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839a:	2b00      	cmp	r3, #0
 800839c:	d02b      	beq.n	80083f6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a2:	4a25      	ldr	r2, [pc, #148]	; (8008438 <UART_Start_Receive_DMA+0xcc>)
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083aa:	4a24      	ldr	r2, [pc, #144]	; (800843c <UART_Start_Receive_DMA+0xd0>)
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	4a23      	ldr	r2, [pc, #140]	; (8008440 <UART_Start_Receive_DMA+0xd4>)
 80083b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ba:	2200      	movs	r2, #0
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3324      	adds	r3, #36	; 0x24
 80083c8:	4619      	mov	r1, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	461a      	mov	r2, r3
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	f7fb fc71 	bl	8003cb8 <HAL_DMA_Start_IT>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2210      	movs	r2, #16
 80083e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2220      	movs	r2, #32
 80083f0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e01c      	b.n	8008430 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800840c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800842c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	0800853d 	.word	0x0800853d
 800843c:	080085d5 	.word	0x080085d5
 8008440:	0800860d 	.word	0x0800860d

08008444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800845a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008484:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0201 	bic.w	r2, r2, #1
 8008494:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0210 	bic.w	r2, r2, #16
 80084ac:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d114      	bne.n	8008512 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fe:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008510:	e002      	b.n	8008518 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7f9 f976 	bl	8001804 <HAL_UART_TxCpltCallback>
}
 8008518:	bf00      	nop
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fb7e 	bl	8007c30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d12a      	bne.n	80085ae <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800856e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0201 	bic.w	r2, r2, #1
 800857e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859a:	2b01      	cmp	r3, #1
 800859c:	d107      	bne.n	80085ae <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0210 	bic.w	r2, r2, #16
 80085ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d107      	bne.n	80085c6 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085bc:	4619      	mov	r1, r3
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fb54 	bl	8007c6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085c4:	e002      	b.n	80085cc <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff fb3c 	bl	8007c44 <HAL_UART_RxCpltCallback>
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d109      	bne.n	80085fe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085f0:	085b      	lsrs	r3, r3, #1
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	4619      	mov	r1, r3
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fb38 	bl	8007c6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085fc:	e002      	b.n	8008604 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff fb2a 	bl	8007c58 <HAL_UART_RxHalfCpltCallback>
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800861e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008624:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d109      	bne.n	8008648 <UART_DMAError+0x3c>
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b21      	cmp	r3, #33	; 0x21
 8008638:	d106      	bne.n	8008648 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2200      	movs	r2, #0
 800863e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008642:	6978      	ldr	r0, [r7, #20]
 8008644:	f7ff fefe 	bl	8008444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d109      	bne.n	800866a <UART_DMAError+0x5e>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b22      	cmp	r3, #34	; 0x22
 800865a:	d106      	bne.n	800866a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2200      	movs	r2, #0
 8008660:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008664:	6978      	ldr	r0, [r7, #20]
 8008666:	f7ff ff02 	bl	800846e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008670:	f043 0210 	orr.w	r2, r3, #16
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800867a:	6978      	ldr	r0, [r7, #20]
 800867c:	f7f9 f8b8 	bl	80017f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008680:	bf00      	nop
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7f9 f8a2 	bl	80017f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2220      	movs	r2, #32
 80086d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7f9 f893 	bl	8001804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <__libc_init_array>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4d0d      	ldr	r5, [pc, #52]	; (8008734 <__libc_init_array+0x38>)
 8008700:	4c0d      	ldr	r4, [pc, #52]	; (8008738 <__libc_init_array+0x3c>)
 8008702:	1b64      	subs	r4, r4, r5
 8008704:	10a4      	asrs	r4, r4, #2
 8008706:	2600      	movs	r6, #0
 8008708:	42a6      	cmp	r6, r4
 800870a:	d109      	bne.n	8008720 <__libc_init_array+0x24>
 800870c:	4d0b      	ldr	r5, [pc, #44]	; (800873c <__libc_init_array+0x40>)
 800870e:	4c0c      	ldr	r4, [pc, #48]	; (8008740 <__libc_init_array+0x44>)
 8008710:	f000 f820 	bl	8008754 <_init>
 8008714:	1b64      	subs	r4, r4, r5
 8008716:	10a4      	asrs	r4, r4, #2
 8008718:	2600      	movs	r6, #0
 800871a:	42a6      	cmp	r6, r4
 800871c:	d105      	bne.n	800872a <__libc_init_array+0x2e>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	f855 3b04 	ldr.w	r3, [r5], #4
 8008724:	4798      	blx	r3
 8008726:	3601      	adds	r6, #1
 8008728:	e7ee      	b.n	8008708 <__libc_init_array+0xc>
 800872a:	f855 3b04 	ldr.w	r3, [r5], #4
 800872e:	4798      	blx	r3
 8008730:	3601      	adds	r6, #1
 8008732:	e7f2      	b.n	800871a <__libc_init_array+0x1e>
 8008734:	080087bc 	.word	0x080087bc
 8008738:	080087bc 	.word	0x080087bc
 800873c:	080087bc 	.word	0x080087bc
 8008740:	080087c0 	.word	0x080087c0

08008744 <memset>:
 8008744:	4402      	add	r2, r0
 8008746:	4603      	mov	r3, r0
 8008748:	4293      	cmp	r3, r2
 800874a:	d100      	bne.n	800874e <memset+0xa>
 800874c:	4770      	bx	lr
 800874e:	f803 1b01 	strb.w	r1, [r3], #1
 8008752:	e7f9      	b.n	8008748 <memset+0x4>

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
