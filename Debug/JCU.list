
JCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000922c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080093b8  080093b8  000193b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009400  08009400  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009408  08009408  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000024  08009434  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08009434  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef94  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335c  00000000  00000000  0003efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00042348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  000439c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023768  00000000  00000000  00044f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a451  00000000  00000000  00068670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc6a3  00000000  00000000  00082ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  0015f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080093a0 	.word	0x080093a0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	080093a0 	.word	0x080093a0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CheckErrorsEnc>:
volatile bool COF = 0;											// if 1 - invalid angle data, AS5048 internal error
volatile bool OCF = 1;											// always must be 1, if isn't - AS5048 internal error.
volatile bool EncoderErrorFlag = 0;

void CheckErrorsEnc()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	comp_high = (AGCDiagnosticValue[0] & 0x08);					// bitmask for comp_high flag
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <CheckErrorsEnc+0xb8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <CheckErrorsEnc+0xbc>)
 80004dc:	701a      	strb	r2, [r3, #0]
	comp_low = (AGCDiagnosticValue[0] & 0x04);					// bitmask for comp_low flag
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <CheckErrorsEnc+0xb8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <CheckErrorsEnc+0xc0>)
 80004f2:	701a      	strb	r2, [r3, #0]
	COF = (AGCDiagnosticValue[0] & 0x02);						// bitmask for COF flag
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <CheckErrorsEnc+0xb8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000508:	701a      	strb	r2, [r3, #0]
	OCF = (AGCDiagnosticValue[0] & 0x01);						// bitmask for OCF flag
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <CheckErrorsEnc+0xb8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <CheckErrorsEnc+0xc8>)
 800051e:	701a      	strb	r2, [r3, #0]

	// Set/reset LED if we have/don't have an error
	if(comp_high == 1 || comp_low == 1 || COF == 1 || OCF == 0)
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <CheckErrorsEnc+0xbc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d111      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <CheckErrorsEnc+0xc0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10c      	bne.n	800054e <CheckErrorsEnc+0x8a>
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <CheckErrorsEnc+0xc4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <CheckErrorsEnc+0x8a>
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <CheckErrorsEnc+0xc8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <CheckErrorsEnc+0x9e>
	{
		EnableAlarmLED();
 800054e:	f000 f917 	bl	8000780 <EnableAlarmLED>
		JCUState.Errors |= ERROR_ENCODER_MAGNET;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <CheckErrorsEnc+0xcc>)
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	e009      	b.n	8000576 <CheckErrorsEnc+0xb2>
	}
	else
	{
		DisableAlarmLED();
 8000562:	f000 f919 	bl	8000798 <DisableAlarmLED>
		JCUState.Errors &=~ ERROR_ENCODER_MAGNET;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <CheckErrorsEnc+0xcc>)
 8000572:	801a      	strh	r2, [r3, #0]
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000044 	.word	0x20000044
 8000580:	20000046 	.word	0x20000046
 8000584:	20000047 	.word	0x20000047
 8000588:	20000048 	.word	0x20000048
 800058c:	2000000a 	.word	0x2000000a
 8000590:	20000128 	.word	0x20000128

08000594 <ParityOk>:

//--------------Calculate PARITY EVEN bit-----------------
bool ParityOk(uint16_t scancode)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]

	uint16_t parity = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
	// checking 15 bits for EVEN Parity
	for (uint8_t i = 0; i < 15; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	e00d      	b.n	80005c4 <ParityOk+0x30>
	{
		if(scancode & 0x01)										// see if LSB is 1
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <ParityOk+0x24>
		{
			parity++;											// if it 1 add counter of "ones"
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
		}
		scancode = scancode >> 1;								// shift to next bit
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 15; i++)
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	3301      	adds	r3, #1
 80005c2:	737b      	strb	r3, [r7, #13]
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	2b0e      	cmp	r3, #14
 80005c8:	d9ee      	bls.n	80005a8 <ParityOk+0x14>
	}

	parity = parity & 0x01;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	81fb      	strh	r3, [r7, #14]
	// Compare calculated parity and the MSB of received DATA, return "1" if they are the same
	return (parity == scancode);
 80005d2:	89fa      	ldrh	r2, [r7, #14]
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <EncoderRoutine>:
//-------------------------------------------------------



void EncoderRoutine(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	switch(EncoderState)
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <EncoderRoutine+0x114>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	f200 8081 	bhi.w	80006fc <EncoderRoutine+0x110>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <EncoderRoutine+0x14>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000621 	.word	0x08000621
 8000604:	080006fb 	.word	0x080006fb
 8000608:	08000641 	.word	0x08000641
 800060c:	080006fb 	.word	0x080006fb
 8000610:	08000661 	.word	0x08000661
 8000614:	080006cf 	.word	0x080006cf
 8000618:	080006fb 	.word	0x080006fb
 800061c:	080006ef 	.word	0x080006ef
	{
		case (ENCODER_CLEAR_ERRORS):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f004 f8e4 	bl	80047f4 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadErrorFlagsAddress, Angle, SIZE);
 800062c:	2302      	movs	r3, #2
 800062e:	4a35      	ldr	r2, [pc, #212]	; (8000704 <EncoderRoutine+0x118>)
 8000630:	4935      	ldr	r1, [pc, #212]	; (8000708 <EncoderRoutine+0x11c>)
 8000632:	4836      	ldr	r0, [pc, #216]	; (800070c <EncoderRoutine+0x120>)
 8000634:	f005 fb24 	bl	8005c80 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ERRORS;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <EncoderRoutine+0x114>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
		break;
 800063e:	e05d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ERRORS):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_WAIT_ANGLE):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f004 f8d4 	bl	80047f4 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, AGCDiagnosticAddress, Angle, SIZE);			// read  read angle, and sent request to read errors, so that next communication we would have error information
 800064c:	2302      	movs	r3, #2
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <EncoderRoutine+0x118>)
 8000650:	492f      	ldr	r1, [pc, #188]	; (8000710 <EncoderRoutine+0x124>)
 8000652:	482e      	ldr	r0, [pc, #184]	; (800070c <EncoderRoutine+0x120>)
 8000654:	f005 fb14 	bl	8005c80 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_ANGLE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <EncoderRoutine+0x114>)
 800065a:	2203      	movs	r2, #3
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e04d      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_ANGLE):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_ANGLE):
			temp = (Angle[0] << 8) + Angle[1];
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EncoderRoutine+0x118>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <EncoderRoutine+0x118>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <EncoderRoutine+0x128>)
 8000676:	801a      	strh	r2, [r3, #0]
			if (ParityOk(temp))										// check parity, if angular data was corrupted
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EncoderRoutine+0x128>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff89 	bl	8000594 <ParityOk>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d015      	beq.n	80006b4 <EncoderRoutine+0xc8>
			{
				JCUState.Errors &=~ ERROR_ENCODER_PARITY;
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <EncoderRoutine+0x12c>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f023 0302 	bic.w	r3, r3, #2
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EncoderRoutine+0x12c>)
 8000694:	801a      	strh	r2, [r3, #0]
				temp &= 0x3FFF;										// remove status bits from angle information
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <EncoderRoutine+0x128>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <EncoderRoutine+0x128>)
 80006a2:	801a      	strh	r2, [r3, #0]
				JCUState.Angle = temp;								// update angle with latest value
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <EncoderRoutine+0x128>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <EncoderRoutine+0x12c>)
 80006aa:	805a      	strh	r2, [r3, #2]
				EncoderState = ENCODER_WAIT_DIAGNOSTIC;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EncoderRoutine+0x114>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	701a      	strb	r2, [r3, #0]
				break;
 80006b2:	e023      	b.n	80006fc <EncoderRoutine+0x110>
			}
			else
			{
				//JCUState.Angle = 0;
				DisableMotor();
 80006b4:	f000 fde8 	bl	8001288 <DisableMotor>
				JCUState.Errors |= ERROR_ENCODER_PARITY;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <EncoderRoutine+0x12c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <EncoderRoutine+0x12c>)
 80006c4:	801a      	strh	r2, [r3, #0]
				EncoderState = ENCODER_CLEAR_ERRORS;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <EncoderRoutine+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				break;
 80006cc:	e016      	b.n	80006fc <EncoderRoutine+0x110>
			}

		case (ENCODER_WAIT_DIAGNOSTIC):
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f004 f88d 	bl	80047f4 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi1, ReadAngle, AGCDiagnosticValue, SIZE);		// read data about error, and sent request to read angle, so that next communication we would have actual angle information
 80006da:	2302      	movs	r3, #2
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <EncoderRoutine+0x130>)
 80006de:	4910      	ldr	r1, [pc, #64]	; (8000720 <EncoderRoutine+0x134>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <EncoderRoutine+0x120>)
 80006e2:	f005 facd 	bl	8005c80 <HAL_SPI_TransmitReceive_IT>
			EncoderState = ENCODER_LOCK_DIAGNOSTIC;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <EncoderRoutine+0x114>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	701a      	strb	r2, [r3, #0]
		break;
 80006ec:	e006      	b.n	80006fc <EncoderRoutine+0x110>
		case (ENCODER_LOCK_DIAGNOSTIC):
			// if it is locked, wait until it becomes available for new data transfer in interrupt
		break;

		case (ENCODER_BUSY_DIAGNOSTIC):
			CheckErrorsEnc();
 80006ee:	f7ff fee9 	bl	80004c4 <CheckErrorsEnc>
			EncoderState = ENCODER_WAIT_ANGLE;
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <EncoderRoutine+0x114>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e000      	b.n	80006fc <EncoderRoutine+0x110>
		break;
 80006fa:	bf00      	nop
	}
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000120 	.word	0x20000120
 8000704:	20000040 	.word	0x20000040
 8000708:	20000004 	.word	0x20000004
 800070c:	20000434 	.word	0x20000434
 8000710:	20000008 	.word	0x20000008
 8000714:	20000122 	.word	0x20000122
 8000718:	20000128 	.word	0x20000128
 800071c:	20000044 	.word	0x20000044
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);				// put CS high again after end of data transfer
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f004 f85e 	bl	80047f4 <HAL_GPIO_WritePin>
	if (EncoderState == ENCODER_LOCK_ERRORS)
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d103      	bne.n	8000748 <HAL_SPI_TxRxCpltCallback+0x24>
		EncoderState = ENCODER_WAIT_ANGLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e012      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_ANGLE)
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d103      	bne.n	8000758 <HAL_SPI_TxRxCpltCallback+0x34>
		EncoderState = ENCODER_BUSY_ANGLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000752:	2204      	movs	r2, #4
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e00a      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else if (EncoderState == ENCODER_LOCK_DIAGNOSTIC)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b06      	cmp	r3, #6
 800075e:	d103      	bne.n	8000768 <HAL_SPI_TxRxCpltCallback+0x44>
		EncoderState = ENCODER_BUSY_DIAGNOSTIC;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000762:	2207      	movs	r2, #7
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <HAL_SPI_TxRxCpltCallback+0x4a>
	else
		EncoderState = ENCODER_CLEAR_ERRORS;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_SPI_TxRxCpltCallback+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

	EncoderRoutine();																// process data which we have just read
 800076e:	f7ff ff3d 	bl	80005ec <EncoderRoutine>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000120 	.word	0x20000120

08000780 <EnableAlarmLED>:

void EnableAlarmLED(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <EnableAlarmLED+0x14>)
 800078c:	f004 f832 	bl	80047f4 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	48000800 	.word	0x48000800

08000798 <DisableAlarmLED>:

void DisableAlarmLED(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <DisableAlarmLED+0x14>)
 80007a4:	f004 f826 	bl	80047f4 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000800 	.word	0x48000800

080007b0 <ModbusRTURoutine>:
 * 43.5 us data is sent, 8 bytes
 */


void ModbusRTURoutine(uint8_t *pBUFFER, uint8_t Length)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
 80007bc:	466b      	mov	r3, sp
 80007be:	461d      	mov	r5, r3
	//Length = BufferSize - hdma_usart1_rx.Instance->CNDTR;
	/*
	 * create temporary variables for ModBus parcing
	 */
	uint16_t CRCCalc = 0;							// CRC which will be calculated
 80007c0:	2300      	movs	r3, #0
 80007c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t CRCValue = 0;							// CRC which was sent by Master
 80007c4:	2300      	movs	r3, #0
 80007c6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t ModbusFunction = 0;						// Master modbus function (what action slave should do)
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t RequestedAddress = 0;					// started address which Master wants to read
 80007ce:	2300      	movs	r3, #0
 80007d0:	843b      	strh	r3, [r7, #32]
	uint16_t AmountofRead = 0;						// amount of registers which master wants to read
 80007d2:	2300      	movs	r3, #0
 80007d4:	83fb      	strh	r3, [r7, #30]
	uint16_t AmountofWrite = 0;						// amount of registers which master wants to write
 80007d6:	2300      	movs	r3, #0
 80007d8:	83bb      	strh	r3, [r7, #28]
	uint8_t ByteCount = 0;							// amount of BYTEs which will be sent in response
 80007da:	2300      	movs	r3, #0
 80007dc:	76fb      	strb	r3, [r7, #27]
	uint16_t CRCforResponse	= 0;					// CRC will be calculated for response data
 80007de:	2300      	movs	r3, #0
 80007e0:	833b      	strh	r3, [r7, #24]
	uint8_t temp[Length];							// temporary array which we are gonna use to process incoming data
 80007e2:	78fc      	ldrb	r4, [r7, #3]
 80007e4:	4623      	mov	r3, r4
 80007e6:	3b01      	subs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	b2e0      	uxtb	r0, r4
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	f04f 0200 	mov.w	r2, #0
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	00cb      	lsls	r3, r1, #3
 80007fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007fe:	00c2      	lsls	r2, r0, #3
 8000800:	b2e0      	uxtb	r0, r4
 8000802:	f04f 0100 	mov.w	r1, #0
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	00cb      	lsls	r3, r1, #3
 8000810:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000814:	00c2      	lsls	r2, r0, #3
 8000816:	4623      	mov	r3, r4
 8000818:	3307      	adds	r3, #7
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	ebad 0d03 	sub.w	sp, sp, r3
 8000822:	466b      	mov	r3, sp
 8000824:	3300      	adds	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
	uint16_t *ptemp16bitJCUConfig = pJCUConfig;		// temporary pointer to shift between data which should be read or written pJCUConfig
 8000828:	4b9b      	ldr	r3, [pc, #620]	; (8000a98 <ModbusRTURoutine+0x2e8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *ptemp16bitJCUState = pJCUState;		// temporary pointer to shift between data which should be read or written pJCUState
 800082e:	4b9b      	ldr	r3, [pc, #620]	; (8000a9c <ModbusRTURoutine+0x2ec>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	633b      	str	r3, [r7, #48]	; 0x30

	// putting all data to the temp array
	for (uint8_t i = 0; i < Length; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800083a:	e00d      	b.n	8000858 <ModbusRTURoutine+0xa8>
	{
		temp [i] = pBUFFER[i];
 800083c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	441a      	add	r2, r3
 8000844:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000848:	7811      	ldrb	r1, [r2, #0]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < Length; i++)
 800084e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000852:	3301      	adds	r3, #1
 8000854:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000858:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3ec      	bcc.n	800083c <ModbusRTURoutine+0x8c>
	}

	// comparing received and calculated CRCs

	CRCValue = temp[Length-1];
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	3b01      	subs	r3, #1
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue <<= 8;
 800086c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCValue = CRCValue + temp[Length-2];
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	3b02      	subs	r3, #2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	b29a      	uxth	r2, r3
 800087c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800087e:	4413      	add	r3, r2
 8000880:	84bb      	strh	r3, [r7, #36]	; 0x24
	CRCCalc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&temp, (Length-2));
 8000882:	6939      	ldr	r1, [r7, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	3b02      	subs	r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	4885      	ldr	r0, [pc, #532]	; (8000aa0 <ModbusRTURoutine+0x2f0>)
 800088c:	f003 fa38 	bl	8003d00 <HAL_CRC_Calculate>
 8000890:	4603      	mov	r3, r0
 8000892:	84fb      	strh	r3, [r7, #38]	; 0x26

	// If data was not corrupted (CRC is ok)
	//if (1)
	if (CRCCalc == CRCValue)
 8000894:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 830a 	bne.w	8000eb2 <ModbusRTURoutine+0x702>
	{
		// Check if the message for us
		if (temp[0] == SLAVE_ID)
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4293      	cmp	r3, r2
 80008a6:	f040 82f4 	bne.w	8000e92 <ModbusRTURoutine+0x6e2>
		{
			// this packet for us, let's read it
			// Defining the modbus function
			ModbusFunction = temp[1];
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			switch (ModbusFunction)
 80008b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b6:	3b01      	subs	r3, #1
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	f200 82e6 	bhi.w	8000e8a <ModbusRTURoutine+0x6da>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <ModbusRTURoutine+0x114>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	08000905 	.word	0x08000905
 80008c8:	08000e8b 	.word	0x08000e8b
 80008cc:	08000a1b 	.word	0x08000a1b
 80008d0:	08000b6b 	.word	0x08000b6b
 80008d4:	08000ec9 	.word	0x08000ec9
 80008d8:	08000c9d 	.word	0x08000c9d
 80008dc:	08000e8b 	.word	0x08000e8b
 80008e0:	08000e8b 	.word	0x08000e8b
 80008e4:	08000e8b 	.word	0x08000e8b
 80008e8:	08000e8b 	.word	0x08000e8b
 80008ec:	08000e8b 	.word	0x08000e8b
 80008f0:	08000e8b 	.word	0x08000e8b
 80008f4:	08000e8b 	.word	0x08000e8b
 80008f8:	08000e8b 	.word	0x08000e8b
 80008fc:	08000e8b 	.word	0x08000e8b
 8000900:	08000d4d 	.word	0x08000d4d
			{
				case READ_COILS:
					// this part is reading JCUState.StatusRegister bit by bit. Detailed description of each bit(coils) in Motor_Driver.h

					// Defining the first address of coil Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	b29b      	uxth	r3, r3
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b29a      	uxth	r2, r3
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	78db      	ldrb	r3, [r3, #3]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	843b      	strh	r3, [r7, #32]

					// Defining how many coil master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	b29b      	uxth	r3, r3
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b29a      	uxth	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4413      	add	r3, r2
 800092a:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 800092c:	8bfb      	ldrh	r3, [r7, #30]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the coil is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ENABLE_MOTOR_Pos) && (RequestedAddress <= SOFTWARE_RESET_Pos))
 8000934:	8c3b      	ldrh	r3, [r7, #32]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d06b      	beq.n	8000a12 <ModbusRTURoutine+0x262>
 800093a:	8c3b      	ldrh	r3, [r7, #32]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d868      	bhi.n	8000a12 <ModbusRTURoutine+0x262>
							&& (((RequestedAddress - ENABLE_MOTOR_Pos) + AmountofRead) <= TOTAL_COILS))
 8000940:	8c3a      	ldrh	r2, [r7, #32]
 8000942:	8bfb      	ldrh	r3, [r7, #30]
 8000944:	4413      	add	r3, r2
 8000946:	3b01      	subs	r3, #1
 8000948:	2b10      	cmp	r3, #16
 800094a:	d862      	bhi.n	8000a12 <ModbusRTURoutine+0x262>
					{
						TxData[0] = SLAVE_ID;
 800094c:	2201      	movs	r2, #1
 800094e:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000950:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000952:	4a54      	ldr	r2, [pc, #336]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000958:	7053      	strb	r3, [r2, #1]
						//TxData[2] = ByteCount;
						uint16_t tempvalue = JCUConfig.StatusRegister;
 800095a:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <ModbusRTURoutine+0x2f8>)
 800095c:	88db      	ldrh	r3, [r3, #6]
 800095e:	817b      	strh	r3, [r7, #10]
						if (RequestedAddress < 8)
 8000960:	8c3b      	ldrh	r3, [r7, #32]
 8000962:	2b07      	cmp	r3, #7
 8000964:	d819      	bhi.n	800099a <ModbusRTURoutine+0x1ea>
						{

							tempvalue <<= 8 + (8 - RequestedAddress); 	// move one byte, and other bits from byte which we do not need
 8000966:	897a      	ldrh	r2, [r7, #10]
 8000968:	8c3b      	ldrh	r3, [r7, #32]
 800096a:	f1c3 0310 	rsb	r3, r3, #16
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	817b      	strh	r3, [r7, #10]
							tempvalue >>= 8 + (8 - RequestedAddress);	// fill emptiness with zeros on the left
 8000974:	897a      	ldrh	r2, [r7, #10]
 8000976:	8c3b      	ldrh	r3, [r7, #32]
 8000978:	f1c3 0310 	rsb	r3, r3, #16
 800097c:	fa42 f303 	asr.w	r3, r2, r3
 8000980:	817b      	strh	r3, [r7, #10]
							TxData[4] = tempvalue;
 8000982:	897b      	ldrh	r3, [r7, #10]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000988:	711a      	strb	r2, [r3, #4]
							tempvalue >>= 8;
 800098a:	897b      	ldrh	r3, [r7, #10]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	817b      	strh	r3, [r7, #10]
							TxData[3] = tempvalue;
 8000990:	897b      	ldrh	r3, [r7, #10]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000996:	70da      	strb	r2, [r3, #3]
 8000998:	e00a      	b.n	80009b0 <ModbusRTURoutine+0x200>
						}
						else
						{
							TxData[4] = tempvalue;
 800099a:	897b      	ldrh	r3, [r7, #10]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 80009a0:	711a      	strb	r2, [r3, #4]
							tempvalue >>= 8;
 80009a2:	897b      	ldrh	r3, [r7, #10]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	817b      	strh	r3, [r7, #10]
							TxData[3] = tempvalue;
 80009a8:	897b      	ldrh	r3, [r7, #10]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 80009ae:	70da      	strb	r2, [r3, #3]
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 80009b0:	7efb      	ldrb	r3, [r7, #27]
 80009b2:	3303      	adds	r3, #3
 80009b4:	461a      	mov	r2, r3
 80009b6:	493b      	ldr	r1, [pc, #236]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 80009b8:	4839      	ldr	r0, [pc, #228]	; (8000aa0 <ModbusRTURoutine+0x2f0>)
 80009ba:	f003 f9a1 	bl	8003d00 <HAL_CRC_Calculate>
 80009be:	4603      	mov	r3, r0
 80009c0:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	3303      	adds	r3, #3
 80009c6:	8b3a      	ldrh	r2, [r7, #24]
 80009c8:	b2d1      	uxtb	r1, r2
 80009ca:	4a36      	ldr	r2, [pc, #216]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 80009cc:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 80009ce:	8b3b      	ldrh	r3, [r7, #24]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 80009d4:	7efb      	ldrb	r3, [r7, #27]
 80009d6:	3304      	adds	r3, #4
 80009d8:	8b3a      	ldrh	r2, [r7, #24]
 80009da:	b2d1      	uxtb	r1, r2
 80009dc:	4a31      	ldr	r2, [pc, #196]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 80009de:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 80009e0:	bf00      	nop
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <ModbusRTURoutine+0x2fc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009f0:	d0f7      	beq.n	80009e2 <ModbusRTURoutine+0x232>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2108      	movs	r1, #8
 80009f6:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <ModbusRTURoutine+0x300>)
 80009f8:	f003 fefc 	bl	80047f4 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 80009fc:	7efb      	ldrb	r3, [r7, #27]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3305      	adds	r3, #5
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	4927      	ldr	r1, [pc, #156]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000a08:	4828      	ldr	r0, [pc, #160]	; (8000aac <ModbusRTURoutine+0x2fc>)
 8000a0a:	f007 fa31 	bl	8007e70 <HAL_UART_Transmit_DMA>
					{
 8000a0e:	bf00      	nop
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}



					break;
 8000a10:	e25b      	b.n	8000eca <ModbusRTURoutine+0x71a>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f000 fa6a 	bl	8000eec <ModbusExceptionHandler>
					break;
 8000a18:	e257      	b.n	8000eca <ModbusRTURoutine+0x71a>

				case READ_AOHR:
					// Read JCU parameters which Master has set (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	78db      	ldrb	r3, [r3, #3]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000a2e:	8c3a      	ldrh	r2, [r7, #32]
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <ModbusRTURoutine+0x304>)
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a38:	4413      	add	r3, r2
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

					// Defining how many Holding registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	795b      	ldrb	r3, [r3, #5]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000a50:	8bfb      	ldrh	r3, [r7, #30]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000a58:	8c3b      	ldrh	r3, [r7, #32]
 8000a5a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d97f      	bls.n	8000b62 <ModbusRTURoutine+0x3b2>
 8000a62:	8c3b      	ldrh	r3, [r7, #32]
 8000a64:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d87a      	bhi.n	8000b62 <ModbusRTURoutine+0x3b2>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofRead) <= TOTAL_AOHR))
 8000a6c:	8c3b      	ldrh	r3, [r7, #32]
 8000a6e:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000a72:	3b41      	subs	r3, #65	; 0x41
 8000a74:	8bfa      	ldrh	r2, [r7, #30]
 8000a76:	4413      	add	r3, r2
 8000a78:	2b16      	cmp	r3, #22
 8000a7a:	dc72      	bgt.n	8000b62 <ModbusRTURoutine+0x3b2>
					{
						TxData[0] = SLAVE_ID;
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000a80:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a88:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <ModbusRTURoutine+0x2f4>)
 8000a8c:	7efb      	ldrb	r3, [r7, #27]
 8000a8e:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<ByteCount; i++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a96:	e02f      	b.n	8000af8 <ModbusRTURoutine+0x348>
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	20000010 	.word	0x20000010
 8000aa0:	200001bc 	.word	0x200001bc
 8000aa4:	200000bc 	.word	0x200000bc
 8000aa8:	20000134 	.word	0x20000134
 8000aac:	2000031c 	.word	0x2000031c
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	7fff63bf 	.word	0x7fff63bf
						{
							uint16_t tempvalue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	81bb      	strh	r3, [r7, #12]
							tempvalue = *ptemp16bitJCUConfig;
 8000abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 4] = tempvalue;
 8000ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	89ba      	ldrh	r2, [r7, #12]
 8000acc:	b2d1      	uxtb	r1, r2
 8000ace:	4a98      	ldr	r2, [pc, #608]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000ad0:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000ad2:	89bb      	ldrh	r3, [r7, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	81bb      	strh	r3, [r7, #12]
							TxData[i*2 + 3] = tempvalue;
 8000ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	3303      	adds	r3, #3
 8000ae0:	89ba      	ldrh	r2, [r7, #12]
 8000ae2:	b2d1      	uxtb	r1, r2
 8000ae4:	4a92      	ldr	r2, [pc, #584]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000ae6:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUConfig++;
 8000ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aea:	3302      	adds	r3, #2
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i++)
 8000aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000af2:	3301      	adds	r3, #1
 8000af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000af8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000afc:	7efb      	ldrb	r3, [r7, #27]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3da      	bcc.n	8000ab8 <ModbusRTURoutine+0x308>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000b02:	7efb      	ldrb	r3, [r7, #27]
 8000b04:	3303      	adds	r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4989      	ldr	r1, [pc, #548]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000b0a:	488a      	ldr	r0, [pc, #552]	; (8000d34 <ModbusRTURoutine+0x584>)
 8000b0c:	f003 f8f8 	bl	8003d00 <HAL_CRC_Calculate>
 8000b10:	4603      	mov	r3, r0
 8000b12:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000b14:	7efb      	ldrb	r3, [r7, #27]
 8000b16:	3303      	adds	r3, #3
 8000b18:	8b3a      	ldrh	r2, [r7, #24]
 8000b1a:	b2d1      	uxtb	r1, r2
 8000b1c:	4a84      	ldr	r2, [pc, #528]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000b1e:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000b20:	8b3b      	ldrh	r3, [r7, #24]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000b26:	7efb      	ldrb	r3, [r7, #27]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	8b3a      	ldrh	r2, [r7, #24]
 8000b2c:	b2d1      	uxtb	r1, r2
 8000b2e:	4a80      	ldr	r2, [pc, #512]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000b30:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000b32:	bf00      	nop
 8000b34:	4b80      	ldr	r3, [pc, #512]	; (8000d38 <ModbusRTURoutine+0x588>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b42:	d0f7      	beq.n	8000b34 <ModbusRTURoutine+0x384>
						{
							// wait until the line is available
						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2108      	movs	r1, #8
 8000b48:	487c      	ldr	r0, [pc, #496]	; (8000d3c <ModbusRTURoutine+0x58c>)
 8000b4a:	f003 fe53 	bl	80047f4 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000b4e:	7efb      	ldrb	r3, [r7, #27]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3305      	adds	r3, #5
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	4975      	ldr	r1, [pc, #468]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000b5a:	4877      	ldr	r0, [pc, #476]	; (8000d38 <ModbusRTURoutine+0x588>)
 8000b5c:	f007 f988 	bl	8007e70 <HAL_UART_Transmit_DMA>
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}
					break;
 8000b60:	e1b3      	b.n	8000eca <ModbusRTURoutine+0x71a>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000b62:	2002      	movs	r0, #2
 8000b64:	f000 f9c2 	bl	8000eec <ModbusExceptionHandler>
					break;
 8000b68:	e1af      	b.n	8000eca <ModbusRTURoutine+0x71a>

				case READ_AIR:
					// Read JCU parameters (errors/Angle/speed/torque/temperature)

					// Defining the first address of input registers Master wants to read (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	789b      	ldrb	r3, [r3, #2]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	78db      	ldrb	r3, [r3, #3]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first input register to desired data.
					ptemp16bitJCUState += RequestedAddress - ADDRESS_JCU_ERRORS;
 8000b7e:	8c3a      	ldrh	r2, [r7, #32]
 8000b80:	4b6f      	ldr	r3, [pc, #444]	; (8000d40 <ModbusRTURoutine+0x590>)
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b88:	4413      	add	r3, r2
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30

					// Defining how many input registers master wants to read
					AmountofRead = (temp[4] << 8) + temp[5];
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	795b      	ldrb	r3, [r3, #5]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	83fb      	strh	r3, [r7, #30]
					ByteCount = AmountofRead*2;
 8000ba0:	8bfb      	ldrh	r3, [r7, #30]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	76fb      	strb	r3, [r7, #27]
					/*
					 * Check if there is no such errors:
					 * 1. First address of the input Register is correct
					 * 2. Amount of the information which master wants to read does not exceed amount of data available in the slave
					 */
					if (((RequestedAddress >= ADDRESS_JCU_ERRORS) && (RequestedAddress <= ADDRESS_JCU_TEMP))
 8000ba8:	8c3b      	ldrh	r3, [r7, #32]
 8000baa:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d970      	bls.n	8000c94 <ModbusRTURoutine+0x4e4>
 8000bb2:	8c3b      	ldrh	r3, [r7, #32]
 8000bb4:	f247 5235 	movw	r2, #30005	; 0x7535
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d86b      	bhi.n	8000c94 <ModbusRTURoutine+0x4e4>
							&& (((RequestedAddress - ADDRESS_JCU_ERRORS) + AmountofRead) <= TOTAL_AIR))
 8000bbc:	8c3b      	ldrh	r3, [r7, #32]
 8000bbe:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000bc2:	3b31      	subs	r3, #49	; 0x31
 8000bc4:	8bfa      	ldrh	r2, [r7, #30]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	dc63      	bgt.n	8000c94 <ModbusRTURoutine+0x4e4>
					{
						TxData[0] = SLAVE_ID;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000bd0:	701a      	strb	r2, [r3, #0]
						TxData[1] = ModbusFunction;
 8000bd2:	4a57      	ldr	r2, [pc, #348]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bd8:	7053      	strb	r3, [r2, #1]
						TxData[2] = ByteCount;
 8000bda:	4a55      	ldr	r2, [pc, #340]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000bdc:	7efb      	ldrb	r3, [r7, #27]
 8000bde:	7093      	strb	r3, [r2, #2]

						for (uint8_t i=0; i<AmountofRead; i++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000be6:	e01f      	b.n	8000c28 <ModbusRTURoutine+0x478>
						{
							uint16_t tempvalue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	81fb      	strh	r3, [r7, #14]
							tempvalue = *ptemp16bitJCUState;
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 4] = tempvalue;
 8000bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	89fa      	ldrh	r2, [r7, #14]
 8000bfc:	b2d1      	uxtb	r1, r2
 8000bfe:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c00:	54d1      	strb	r1, [r2, r3]
							tempvalue >>= 8;
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	81fb      	strh	r3, [r7, #14]
							TxData[i*2 + 3] = tempvalue;
 8000c08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3303      	adds	r3, #3
 8000c10:	89fa      	ldrh	r2, [r7, #14]
 8000c12:	b2d1      	uxtb	r1, r2
 8000c14:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c16:	54d1      	strb	r1, [r2, r3]
							ptemp16bitJCUState++;
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
						for (uint8_t i=0; i<AmountofRead; i++)
 8000c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c22:	3301      	adds	r3, #1
 8000c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	8bfa      	ldrh	r2, [r7, #30]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8d9      	bhi.n	8000be8 <ModbusRTURoutine+0x438>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+3));
 8000c34:	7efb      	ldrb	r3, [r7, #27]
 8000c36:	3303      	adds	r3, #3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	493d      	ldr	r1, [pc, #244]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c3c:	483d      	ldr	r0, [pc, #244]	; (8000d34 <ModbusRTURoutine+0x584>)
 8000c3e:	f003 f85f 	bl	8003d00 <HAL_CRC_Calculate>
 8000c42:	4603      	mov	r3, r0
 8000c44:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000c46:	7efb      	ldrb	r3, [r7, #27]
 8000c48:	3303      	adds	r3, #3
 8000c4a:	8b3a      	ldrh	r2, [r7, #24]
 8000c4c:	b2d1      	uxtb	r1, r2
 8000c4e:	4a38      	ldr	r2, [pc, #224]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c50:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000c52:	8b3b      	ldrh	r3, [r7, #24]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+4] = CRCforResponse;
 8000c58:	7efb      	ldrb	r3, [r7, #27]
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	8b3a      	ldrh	r2, [r7, #24]
 8000c5e:	b2d1      	uxtb	r1, r2
 8000c60:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c62:	54d1      	strb	r1, [r2, r3]
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000c64:	bf00      	nop
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <ModbusRTURoutine+0x588>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c74:	d0f7      	beq.n	8000c66 <ModbusRTURoutine+0x4b6>
						{

						}
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2108      	movs	r1, #8
 8000c7a:	4830      	ldr	r0, [pc, #192]	; (8000d3c <ModbusRTURoutine+0x58c>)
 8000c7c:	f003 fdba 	bl	80047f4 <HAL_GPIO_WritePin>
						HAL_UART_Transmit_DMA(&huart1, TxData, (5+ByteCount));
 8000c80:	7efb      	ldrb	r3, [r7, #27]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3305      	adds	r3, #5
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4929      	ldr	r1, [pc, #164]	; (8000d30 <ModbusRTURoutine+0x580>)
 8000c8c:	482a      	ldr	r0, [pc, #168]	; (8000d38 <ModbusRTURoutine+0x588>)
 8000c8e:	f007 f8ef 	bl	8007e70 <HAL_UART_Transmit_DMA>
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}

					break;
 8000c92:	e11a      	b.n	8000eca <ModbusRTURoutine+0x71a>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f000 f929 	bl	8000eec <ModbusExceptionHandler>
					break;
 8000c9a:	e116      	b.n	8000eca <ModbusRTURoutine+0x71a>
					break;

				case WRITE_SINGLE_AOHR:
					// Write Single parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					RequestedAddress = (temp[2] << 8) + temp[3];
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000cb0:	8c3a      	ldrh	r2, [r7, #32]
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <ModbusRTURoutine+0x594>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cba:	4413      	add	r3, r2
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

					/*
					 * Check if there is no such error:
					 * 1. the address of the holding Register is correct
					 */
					if ((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000cbe:	8c3b      	ldrh	r3, [r7, #32]
 8000cc0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d92d      	bls.n	8000d24 <ModbusRTURoutine+0x574>
 8000cc8:	8c3b      	ldrh	r3, [r7, #32]
 8000cca:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d828      	bhi.n	8000d24 <ModbusRTURoutine+0x574>
					{
						*ptemp16bitJCUConfig = (temp[4] << 8) + temp[5];
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	795b      	ldrb	r3, [r3, #5]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce8:	801a      	strh	r2, [r3, #0]

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2108      	movs	r1, #8
 8000cee:	4813      	ldr	r0, [pc, #76]	; (8000d3c <ModbusRTURoutine+0x58c>)
 8000cf0:	f003 fd80 	bl	80047f4 <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000cf4:	bf00      	nop
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <ModbusRTURoutine+0x588>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d04:	d0f7      	beq.n	8000cf6 <ModbusRTURoutine+0x546>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, RxData, Length);
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	490e      	ldr	r1, [pc, #56]	; (8000d48 <ModbusRTURoutine+0x598>)
 8000d0e:	480a      	ldr	r0, [pc, #40]	; (8000d38 <ModbusRTURoutine+0x588>)
 8000d10:	f007 f8ae 	bl	8007e70 <HAL_UART_Transmit_DMA>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000d14:	8c3b      	ldrh	r3, [r7, #32]
 8000d16:	f649 4244 	movw	r2, #40004	; 0x9c44
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d106      	bne.n	8000d2c <ModbusRTURoutine+0x57c>
						{
							CheckStatusRegister();
 8000d1e:	f000 f98b 	bl	8001038 <CheckStatusRegister>
						if (RequestedAddress == ADDRESS_STATUS_REGISTER)
 8000d22:	e003      	b.n	8000d2c <ModbusRTURoutine+0x57c>
					}
					// if there are errors in request:
					else
					{
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 f8e1 	bl	8000eec <ModbusExceptionHandler>
					}
					break;
 8000d2a:	e0ce      	b.n	8000eca <ModbusRTURoutine+0x71a>
 8000d2c:	e0cd      	b.n	8000eca <ModbusRTURoutine+0x71a>
 8000d2e:	bf00      	nop
 8000d30:	200000bc 	.word	0x200000bc
 8000d34:	200001bc 	.word	0x200001bc
 8000d38:	2000031c 	.word	0x2000031c
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	7fff8acf 	.word	0x7fff8acf
 8000d44:	7fff63bf 	.word	0x7fff63bf
 8000d48:	20000058 	.word	0x20000058

				case WRITE_MULTIPLE_AOHR:
					// Write multiple parameter to JCU (Acceleration/Deceleration/Max Speed/Max Torque/Target Angle/Status Register)

					// Defining the first address of Holding registers Master wants to write (third and forth bytes of the message):
					RequestedAddress = (temp[2] << 8) + temp[3];
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	843b      	strh	r3, [r7, #32]
					// Offset the pointer from the first Holding register to desired data.
					ptemp16bitJCUConfig += RequestedAddress - ADDRESS_ACCELERATION;
 8000d60:	8c3a      	ldrh	r2, [r7, #32]
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <ModbusRTURoutine+0x724>)
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d6a:	4413      	add	r3, r2
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					// Defining how many Holding registers master wants to read
					AmountofWrite = (temp[4] << 8) + temp[5];
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	791b      	ldrb	r3, [r3, #4]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	795b      	ldrb	r3, [r3, #5]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	83bb      	strh	r3, [r7, #28]
					ByteCount = temp[6];
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	799b      	ldrb	r3, [r3, #6]
 8000d86:	76fb      	strb	r3, [r7, #27]
					 * Check if there is no such errors:
					 * 1. First address of the Holding Register is correct
					 * 2. Amount of the information which master wants to write does not exceed amount possible infromation
					 * 3. Check if master quantity of Bytes in message is equal (quantity of register) * 2
					 */
					if (((RequestedAddress >= ADDRESS_ACCELERATION) && (RequestedAddress <= ADDRESS_KD_COEF_SPEED_PID_LO))
 8000d88:	8c3b      	ldrh	r3, [r7, #32]
 8000d8a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d977      	bls.n	8000e82 <ModbusRTURoutine+0x6d2>
 8000d92:	8c3b      	ldrh	r3, [r7, #32]
 8000d94:	f649 4256 	movw	r2, #40022	; 0x9c56
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d872      	bhi.n	8000e82 <ModbusRTURoutine+0x6d2>
							&& (((RequestedAddress - ADDRESS_ACCELERATION) + AmountofWrite) <= TOTAL_AOHR)
 8000d9c:	8c3b      	ldrh	r3, [r7, #32]
 8000d9e:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000da2:	3b41      	subs	r3, #65	; 0x41
 8000da4:	8bba      	ldrh	r2, [r7, #28]
 8000da6:	4413      	add	r3, r2
 8000da8:	2b16      	cmp	r3, #22
 8000daa:	dc6a      	bgt.n	8000e82 <ModbusRTURoutine+0x6d2>
							&& (ByteCount == AmountofWrite*2))
 8000dac:	7efa      	ldrb	r2, [r7, #27]
 8000dae:	8bbb      	ldrh	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d165      	bne.n	8000e82 <ModbusRTURoutine+0x6d2>
					{
						//uint8_t *ptemp8bit = (uint8_t*) ptemp16bitJCUState;			// for more convenient shifting of bytes during writing, we are creating 8 bit pointer

						for (uint8_t i=0; i<ByteCount; i+=2)
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000dbc:	e019      	b.n	8000df2 <ModbusRTURoutine+0x642>
						{
							*ptemp16bitJCUConfig = (temp[i+7] << 8) + temp[i+8];
 8000dbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	5ccb      	ldrb	r3, [r1, r3]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	801a      	strh	r2, [r3, #0]
							ptemp16bitJCUConfig++;
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	3302      	adds	r3, #2
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (uint8_t i=0; i<ByteCount; i+=2)
 8000de8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dec:	3302      	adds	r3, #2
 8000dee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000df2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000df6:	7efb      	ldrb	r3, [r7, #27]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3e0      	bcc.n	8000dbe <ModbusRTURoutine+0x60e>
						}

						// send ECHO
						// Maybe better do not sending what we received, but send what we really have in memory as the echo
						for (uint8_t i = 0; i < 6; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e02:	e00c      	b.n	8000e1e <ModbusRTURoutine+0x66e>
						{
							TxData[i] = temp[i];
 8000e04:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000e08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e0c:	6939      	ldr	r1, [r7, #16]
 8000e0e:	5c89      	ldrb	r1, [r1, r2]
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <ModbusRTURoutine+0x728>)
 8000e12:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < 6; i++)
 8000e14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e1e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e22:	2b05      	cmp	r3, #5
 8000e24:	d9ee      	bls.n	8000e04 <ModbusRTURoutine+0x654>
						}
						CRCforResponse = HAL_CRC_Calculate(&hcrc, (uint32_t *)&TxData, (ByteCount+2));
 8000e26:	7efb      	ldrb	r3, [r7, #27]
 8000e28:	3302      	adds	r3, #2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	492a      	ldr	r1, [pc, #168]	; (8000ed8 <ModbusRTURoutine+0x728>)
 8000e2e:	482b      	ldr	r0, [pc, #172]	; (8000edc <ModbusRTURoutine+0x72c>)
 8000e30:	f002 ff66 	bl	8003d00 <HAL_CRC_Calculate>
 8000e34:	4603      	mov	r3, r0
 8000e36:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+2] = CRCforResponse;
 8000e38:	7efb      	ldrb	r3, [r7, #27]
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	8b3a      	ldrh	r2, [r7, #24]
 8000e3e:	b2d1      	uxtb	r1, r2
 8000e40:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <ModbusRTURoutine+0x728>)
 8000e42:	54d1      	strb	r1, [r2, r3]
						CRCforResponse >>= 8;
 8000e44:	8b3b      	ldrh	r3, [r7, #24]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	833b      	strh	r3, [r7, #24]
						TxData[ByteCount+3] = CRCforResponse;
 8000e4a:	7efb      	ldrb	r3, [r7, #27]
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	8b3a      	ldrh	r2, [r7, #24]
 8000e50:	b2d1      	uxtb	r1, r2
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <ModbusRTURoutine+0x728>)
 8000e54:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <ModbusRTURoutine+0x730>)
 8000e5c:	f003 fcca 	bl	80047f4 <HAL_GPIO_WritePin>
						while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_BUSY))
 8000e60:	bf00      	nop
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <ModbusRTURoutine+0x734>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e70:	d0f7      	beq.n	8000e62 <ModbusRTURoutine+0x6b2>
						{
							// wait until the line is available
						}
						HAL_UART_Transmit_DMA(&huart1, TxData, WRITE_MULTIPLE_AOHR_BYTES_RESPONSE);
 8000e72:	2208      	movs	r2, #8
 8000e74:	4918      	ldr	r1, [pc, #96]	; (8000ed8 <ModbusRTURoutine+0x728>)
 8000e76:	481b      	ldr	r0, [pc, #108]	; (8000ee4 <ModbusRTURoutine+0x734>)
 8000e78:	f006 fffa 	bl	8007e70 <HAL_UART_Transmit_DMA>
						CheckStatusRegister();												// could be improved if we can check, was this register updated by master or not
 8000e7c:	f000 f8dc 	bl	8001038 <CheckStatusRegister>
						// Modbus Exception 0x02, The data address received in the query is not an allowable address for the slave.
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
					}


					break;
 8000e80:	e023      	b.n	8000eca <ModbusRTURoutine+0x71a>
						ModbusExceptionHandler(MODBUS_ILLEGAL_DATA_ADDRESS);
 8000e82:	2002      	movs	r0, #2
 8000e84:	f000 f832 	bl	8000eec <ModbusExceptionHandler>
					break;
 8000e88:	e01f      	b.n	8000eca <ModbusRTURoutine+0x71a>

				default:
					// Modbus Exception 0x01 - Illegal Function
					ModbusExceptionHandler(MODBUS_ILLEGAL_FUNCTION);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 f82e 	bl	8000eec <ModbusExceptionHandler>
					break;
 8000e90:	e01b      	b.n	8000eca <ModbusRTURoutine+0x71a>
			}

		}
		else if(temp[0] == SLAVE_ID_BROADCAST)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d016      	beq.n	8000eca <ModbusRTURoutine+0x71a>
		}
		else
		{
			// do nothing
			// wait new packet
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <ModbusRTURoutine+0x730>)
 8000ea2:	f003 fca7 	bl	80047f4 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	490f      	ldr	r1, [pc, #60]	; (8000ee8 <ModbusRTURoutine+0x738>)
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <ModbusRTURoutine+0x734>)
 8000eac:	f007 f870 	bl	8007f90 <HAL_UART_Receive_DMA>
 8000eb0:	e00b      	b.n	8000eca <ModbusRTURoutine+0x71a>
	}
	else
	{
		// do nothing
		// wait new packet
		HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <ModbusRTURoutine+0x730>)
 8000eb8:	f003 fc9c 	bl	80047f4 <HAL_GPIO_WritePin>
		HAL_UART_Receive_DMA(&huart1, RxData, 100);
 8000ebc:	2264      	movs	r2, #100	; 0x64
 8000ebe:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <ModbusRTURoutine+0x738>)
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <ModbusRTURoutine+0x734>)
 8000ec2:	f007 f865 	bl	8007f90 <HAL_UART_Receive_DMA>
 8000ec6:	e000      	b.n	8000eca <ModbusRTURoutine+0x71a>
					break;
 8000ec8:	bf00      	nop
 8000eca:	46ad      	mov	sp, r5
	}



}
 8000ecc:	bf00      	nop
 8000ece:	3738      	adds	r7, #56	; 0x38
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed4:	7fff63bf 	.word	0x7fff63bf
 8000ed8:	200000bc 	.word	0x200000bc
 8000edc:	200001bc 	.word	0x200001bc
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	2000031c 	.word	0x2000031c
 8000ee8:	20000058 	.word	0x20000058

08000eec <ModbusExceptionHandler>:

void ModbusExceptionHandler(uint8_t ExceptionCode)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	}
	else if (ExceptionCode == MODBUS_ILLEGAL_DATA_ADDRESS)
	{

	}
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <UpdatePWM>:
uint32_t EncoderCounter = 0;
float PosError;
float prevPosError;

void UpdatePWM(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0e:	483f      	ldr	r0, [pc, #252]	; (800100c <UpdatePWM+0x108>)
 8000f10:	f003 fc88 	bl	8004824 <HAL_GPIO_TogglePin>

	// 1. Measuring error position
	PosError = JCUConfig.TargetAngel - JCUState.Angle;
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <UpdatePWM+0x10c>)
 8000f16:	889b      	ldrh	r3, [r3, #4]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <UpdatePWM+0x110>)
 8000f1c:	885b      	ldrh	r3, [r3, #2]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <UpdatePWM+0x114>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]

	// 2. Proportional
	float Proportional = JCUConfig.KpPossitionLoop * PosError;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <UpdatePWM+0x10c>)
 8000f30:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <UpdatePWM+0x114>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3e:	edc7 7a03 	vstr	s15, [r7, #12]

	float Integral = 0;
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]

	float Derivative = 0;
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]

	float PID = Proportional + Integral + Derivative;
 8000f4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a00 	vstr	s15, [r7]

	if (PID >= 0)
 8000f66:	edd7 7a00 	vldr	s15, [r7]
 8000f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	db1d      	blt.n	8000fb0 <UpdatePWM+0xac>
	{
		PID = 500 + PID;
 8000f74:	edd7 7a00 	vldr	s15, [r7]
 8000f78:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800101c <UpdatePWM+0x118>
 8000f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f80:	edc7 7a00 	vstr	s15, [r7]
		if (PID < MAX_DUTY_CYCLE)
 8000f84:	edd7 7a00 	vldr	s15, [r7]
 8000f88:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001020 <UpdatePWM+0x11c>
 8000f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d509      	bpl.n	8000faa <UpdatePWM+0xa6>
			PWMValue = PID;
 8000f96:	edd7 7a00 	vldr	s15, [r7]
 8000f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9e:	ee17 3a90 	vmov	r3, s15
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <UpdatePWM+0x120>)
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	e01f      	b.n	8000fea <UpdatePWM+0xe6>
		else
			PID = MAX_DUTY_CYCLE;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <UpdatePWM+0x124>)
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	e01c      	b.n	8000fea <UpdatePWM+0xe6>
	}
	else
	{
		PID = 500 + PID;
 8000fb0:	edd7 7a00 	vldr	s15, [r7]
 8000fb4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800101c <UpdatePWM+0x118>
 8000fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fbc:	edc7 7a00 	vstr	s15, [r7]
		if (PID > MIN_DUTY_CYCLE)
 8000fc0:	edd7 7a00 	vldr	s15, [r7]
 8000fc4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800102c <UpdatePWM+0x128>
 8000fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	dd09      	ble.n	8000fe6 <UpdatePWM+0xe2>
			PWMValue = PID;
 8000fd2:	edd7 7a00 	vldr	s15, [r7]
 8000fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fda:	ee17 3a90 	vmov	r3, s15
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <UpdatePWM+0x120>)
 8000fe2:	801a      	strh	r2, [r3, #0]
 8000fe4:	e001      	b.n	8000fea <UpdatePWM+0xe6>
		else
			PID = MIN_DUTY_CYCLE;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <UpdatePWM+0x12c>)
 8000fe8:	603b      	str	r3, [r7, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000 - PWMValue);
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <UpdatePWM+0x120>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <UpdatePWM+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMValue);
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <UpdatePWM+0x120>)
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <UpdatePWM+0x130>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	48000800 	.word	0x48000800
 8001010:	20000134 	.word	0x20000134
 8001014:	20000128 	.word	0x20000128
 8001018:	20000164 	.word	0x20000164
 800101c:	43fa0000 	.word	0x43fa0000
 8001020:	44610000 	.word	0x44610000
 8001024:	20000014 	.word	0x20000014
 8001028:	44610000 	.word	0x44610000
 800102c:	42c80000 	.word	0x42c80000
 8001030:	42c80000 	.word	0x42c80000
 8001034:	200003e8 	.word	0x200003e8

08001038 <CheckStatusRegister>:

void CheckStatusRegister(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	// Check bits in status register ONLY which could be written by Master.
	if 	(CHECK_BIT(JCUConfig.StatusRegister, ENABLE_MOTOR_Pos))
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <CheckStatusRegister+0x94>)
 800103e:	88db      	ldrh	r3, [r3, #6]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d009      	beq.n	800105c <CheckStatusRegister+0x24>
	{
		if (MotorState == MOTOR_DISABLED)			// enable motor if it is not enabled
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <CheckStatusRegister+0x98>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10e      	bne.n	800106e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_ENABLED;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <CheckStatusRegister+0x98>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
			EnableMotor();
 8001056:	f000 f8ef 	bl	8001238 <EnableMotor>
 800105a:	e008      	b.n	800106e <CheckStatusRegister+0x36>
		}
	}
	else
	{
		if (MotorState != MOTOR_DISABLED)
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <CheckStatusRegister+0x98>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <CheckStatusRegister+0x36>
		{
			MotorState = MOTOR_DISABLED;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <CheckStatusRegister+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			DisableMotor();
 800106a:	f000 f90d 	bl	8001288 <DisableMotor>
		}
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, SET_BRAKE_Pos))
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <CheckStatusRegister+0x94>)
 8001070:	88db      	ldrh	r3, [r3, #6]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
	{
		// should  i reset brake??
	}


	if (CHECK_BIT(JCUConfig.StatusRegister, GO_TO_TARGET_POSITION_Pos))
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <CheckStatusRegister+0x94>)
 800107a:	88db      	ldrh	r3, [r3, #6]
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <CheckStatusRegister+0x5a>
	{
		if (MotorState == MOTOR_ENABLED)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <CheckStatusRegister+0x98>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d102      	bne.n	8001092 <CheckStatusRegister+0x5a>
		{
			MotorState = MOTOR_RUN;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <CheckStatusRegister+0x98>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
	else
	{
		// decide what to do here
	}

	if (CHECK_BIT(JCUConfig.StatusRegister, STOP_MOTOR_Pos))
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <CheckStatusRegister+0x94>)
 8001094:	88db      	ldrh	r3, [r3, #6]
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	2b00      	cmp	r3, #0
 800109c:	d013      	beq.n	80010c6 <CheckStatusRegister+0x8e>
	{
		JCUConfig.StatusRegister &=~ GO_TO_TARGET_POSITION;				// not go to target position anymore
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <CheckStatusRegister+0x94>)
 80010a0:	88db      	ldrh	r3, [r3, #6]
 80010a2:	f023 0310 	bic.w	r3, r3, #16
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <CheckStatusRegister+0x94>)
 80010aa:	80da      	strh	r2, [r3, #6]
		// 1. Terminate PID
		MotorState = MOTOR_ENABLED;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <CheckStatusRegister+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
		// 2. set PWM 50%
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <CheckStatusRegister+0x9c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <CheckStatusRegister+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000134 	.word	0x20000134
 80010d0:	20000121 	.word	0x20000121
 80010d4:	200003e8 	.word	0x200003e8

080010d8 <RunMotor>:

void RunMotor(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	/*
	 * We calling this function with 40 kHz
	 * due to dummy cycles, we read encoder data and analog data with 10 kHz each
	 */
	if (FeedbackState == READ_ENCODER)
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <RunMotor+0x6c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <RunMotor+0x18>
	{
		EncoderRoutine();
 80010e4:	f7ff fa82 	bl	80005ec <EncoderRoutine>
		FeedbackState = WAIT_ENCODER;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <RunMotor+0x6c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e01b      	b.n	8001128 <RunMotor+0x50>
	}
	else if(FeedbackState == WAIT_ENCODER)
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <RunMotor+0x6c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d103      	bne.n	8001100 <RunMotor+0x28>
	{
		//dummy step
		FeedbackState = READ_ANALOG;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <RunMotor+0x6c>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e013      	b.n	8001128 <RunMotor+0x50>
	}
	else if (FeedbackState == READ_ANALOG)
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <RunMotor+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d108      	bne.n	800111a <RunMotor+0x42>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultDMA, 3);
 8001108:	2203      	movs	r2, #3
 800110a:	490f      	ldr	r1, [pc, #60]	; (8001148 <RunMotor+0x70>)
 800110c:	480f      	ldr	r0, [pc, #60]	; (800114c <RunMotor+0x74>)
 800110e:	f001 fd23 	bl	8002b58 <HAL_ADC_Start_DMA>
		FeedbackState = WAIT_ANALOG;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <RunMotor+0x6c>)
 8001114:	2203      	movs	r2, #3
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e006      	b.n	8001128 <RunMotor+0x50>
	}
	else if(FeedbackState == WAIT_ANALOG)
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <RunMotor+0x6c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d102      	bne.n	8001128 <RunMotor+0x50>
	{
		//dummy step
		FeedbackState = READ_ENCODER;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <RunMotor+0x6c>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	}


	JCUState.Speed = SpeedCalculation();
 8001128:	f000 f856 	bl	80011d8 <SpeedCalculation>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <RunMotor+0x78>)
 8001132:	809a      	strh	r2, [r3, #4]

	if (MotorState == MOTOR_RUN)
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <RunMotor+0x7c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d101      	bne.n	8001140 <RunMotor+0x68>
	{
		UpdatePWM();
 800113c:	f7ff fee2 	bl	8000f04 <UpdatePWM>
	}

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000124 	.word	0x20000124
 8001148:	20000168 	.word	0x20000168
 800114c:	20000228 	.word	0x20000228
 8001150:	20000128 	.word	0x20000128
 8001154:	20000121 	.word	0x20000121

08001158 <HAL_TIM_IC_CaptureCallback>:

// Count increment encoder ticks
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	EncoderCounter = __HAL_TIM_GET_COUNTER(htim);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001168:	6013      	str	r3, [r2, #0]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000054 	.word	0x20000054

0800117c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	RunMotor();
 8001184:	f7ff ffa8 	bl	80010d8 <RunMotor>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	JCUState.MotorTemp = adcResultDMA[0] >> 8;			// potentiometer
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_ADC_ConvCpltCallback+0x40>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80011a6:	721a      	strb	r2, [r3, #8]
	JCUState.HbridgeTemp = adcResultDMA[1] >> 8;		// Driver temp
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_ADC_ConvCpltCallback+0x40>)
 80011aa:	885b      	ldrh	r3, [r3, #2]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80011b6:	725a      	strb	r2, [r3, #9]
	JCUState.Torque = adcResultDMA[2];					// current feedback
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_ADC_ConvCpltCallback+0x40>)
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80011c2:	80da      	strh	r2, [r3, #6]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000168 	.word	0x20000168
 80011d4:	20000128 	.word	0x20000128

080011d8 <SpeedCalculation>:
/*
 * REDO~!!!!!!!!!!!!!!!!!!!!111
 * Use quadrature encoder for this
 */
int16_t SpeedCalculation(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	if (counter < 99)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SpeedCalculation+0x50>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b62      	cmp	r3, #98	; 0x62
 80011e2:	d806      	bhi.n	80011f2 <SpeedCalculation+0x1a>
	{
		counter++;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <SpeedCalculation+0x50>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <SpeedCalculation+0x50>)
 80011ee:	801a      	strh	r2, [r3, #0]
		AverageSpeed = EncoderCounter - PreviousEncoderCount;
		PreviousEncoderCount = EncoderCounter;
		counter = 0;
		return AverageSpeed;
	}
}
 80011f0:	e014      	b.n	800121c <SpeedCalculation+0x44>
		AverageSpeed = EncoderCounter - PreviousEncoderCount;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <SpeedCalculation+0x54>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <SpeedCalculation+0x58>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b29b      	uxth	r3, r3
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <SpeedCalculation+0x5c>)
 8001206:	801a      	strh	r2, [r3, #0]
		PreviousEncoderCount = EncoderCounter;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <SpeedCalculation+0x54>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <SpeedCalculation+0x58>)
 800120e:	6013      	str	r3, [r2, #0]
		counter = 0;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SpeedCalculation+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	801a      	strh	r2, [r3, #0]
		return AverageSpeed;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <SpeedCalculation+0x5c>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000052 	.word	0x20000052
 800122c:	20000054 	.word	0x20000054
 8001230:	2000004c 	.word	0x2000004c
 8001234:	20000050 	.word	0x20000050

08001238 <EnableMotor>:

void EnableMotor(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim1);
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <EnableMotor+0x48>)
 800123e:	f005 f9a9 	bl	8006594 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001242:	2100      	movs	r1, #0
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <EnableMotor+0x48>)
 8001246:	f005 fa7f 	bl	8006748 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 800124a:	2100      	movs	r1, #0
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <EnableMotor+0x48>)
 800124e:	f006 fb29 	bl	80078a4 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001252:	2104      	movs	r1, #4
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <EnableMotor+0x48>)
 8001256:	f005 fa77 	bl	8006748 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 800125a:	2104      	movs	r1, #4
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <EnableMotor+0x48>)
 800125e:	f006 fb21 	bl	80078a4 <HAL_TIMEx_PWMN_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <EnableMotor+0x48>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <EnableMotor+0x48>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
	MotorState = MOTOR_ENABLED;
 8001276:	4b03      	ldr	r3, [pc, #12]	; (8001284 <EnableMotor+0x4c>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200003e8 	.word	0x200003e8
 8001284:	20000121 	.word	0x20000121

08001288 <DisableMotor>:

void DisableMotor(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <DisableMotor+0x34>)
 800128e:	f005 f9d5 	bl	800663c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001292:	2100      	movs	r1, #0
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <DisableMotor+0x34>)
 8001296:	f005 fb83 	bl	80069a0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 800129a:	2100      	movs	r1, #0
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <DisableMotor+0x34>)
 800129e:	f006 fbd7 	bl	8007a50 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80012a2:	2104      	movs	r1, #4
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <DisableMotor+0x34>)
 80012a6:	f005 fb7b 	bl	80069a0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_2);
 80012aa:	2104      	movs	r1, #4
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <DisableMotor+0x34>)
 80012ae:	f006 fbcf 	bl	8007a50 <HAL_TIMEx_PWMN_Stop_IT>
	MotorState = MOTOR_DISABLED;
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <DisableMotor+0x38>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200003e8 	.word	0x200003e8
 80012c0:	20000121 	.word	0x20000121

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f001 f8af 	bl	800242a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f84a 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f000 fb44 	bl	800195c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012d4:	f000 fabe 	bl	8001854 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80012d8:	f000 fb02 	bl	80018e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80012dc:	f000 f894 	bl	8001408 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012e0:	f000 f982 	bl	80015e8 <MX_TIM1_Init>
  MX_SPI1_Init();
 80012e4:	f000 f942 	bl	800156c <MX_SPI1_Init>
  MX_CRC_Init();
 80012e8:	f000 f912 	bl	8001510 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80012ec:	f000 fa6c 	bl	80017c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80012f0:	f000 fa16 	bl	8001720 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // disable interrupt of DMA - half of reveive
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <main+0x84>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <main+0x84>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <main+0x88>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <main+0x88>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	601a      	str	r2, [r3, #0]
  hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <main+0x84>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2264      	movs	r2, #100	; 0x64
 800131a:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	490c      	ldr	r1, [pc, #48]	; (8001350 <main+0x8c>)
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <main+0x90>)
 8001322:	f006 fe35 	bl	8007f90 <HAL_UART_Receive_DMA>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001326:	213c      	movs	r1, #60	; 0x3c
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <main+0x94>)
 800132a:	f005 fcb3 	bl	8006c94 <HAL_TIM_Encoder_Start_IT>
  // HAL_TIM_Encoder_Start_DMA

  /*
   * Test part
   */
  JCUConfig.KpPossitionLoop = 0.3;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <main+0x98>)
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <main+0x9c>)
 8001332:	615a      	str	r2, [r3, #20]
  JCUConfig.TargetAngel = 11000;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <main+0x98>)
 8001336:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800133a:	809a      	strh	r2, [r3, #4]
  JCUConfig.StatusRegister = 0x12;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <main+0x98>)
 800133e:	2212      	movs	r2, #18
 8001340:	80da      	strh	r2, [r3, #6]
  CheckStatusRegister();
 8001342:	f7ff fe79 	bl	8001038 <CheckStatusRegister>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001346:	e7fe      	b.n	8001346 <main+0x82>
 8001348:	2000028c 	.word	0x2000028c
 800134c:	200003a0 	.word	0x200003a0
 8001350:	20000058 	.word	0x20000058
 8001354:	2000031c 	.word	0x2000031c
 8001358:	20000498 	.word	0x20000498
 800135c:	20000134 	.word	0x20000134
 8001360:	3e99999a 	.word	0x3e99999a

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b096      	sub	sp, #88	; 0x58
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2244      	movs	r2, #68	; 0x44
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f008 f80c 	bl	8009390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800138a:	f003 fa73 	bl	8004874 <HAL_PWREx_ControlVoltageScaling>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001394:	f000 fbd4 	bl	8001b40 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001398:	2302      	movs	r3, #2
 800139a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a2:	2310      	movs	r3, #16
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013aa:	2302      	movs	r3, #2
 80013ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013b2:	230a      	movs	r3, #10
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013b6:	2307      	movs	r3, #7
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 faaa 	bl	8004920 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013d2:	f000 fbb5 	bl	8001b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013da:	2303      	movs	r3, #3
 80013dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	2104      	movs	r1, #4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 feb6 	bl	8005160 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013fa:	f000 fba1 	bl	8001b40 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3758      	adds	r7, #88	; 0x58
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001420:	4a37      	ldr	r2, [pc, #220]	; (8001500 <MX_ADC1_Init+0xf8>)
 8001422:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800142a:	4b34      	ldr	r3, [pc, #208]	; (80014fc <MX_ADC1_Init+0xf4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001438:	2201      	movs	r2, #1
 800143a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_ADC1_Init+0xf4>)
 800143e:	2208      	movs	r2, #8
 8001440:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001444:	2200      	movs	r2, #0
 8001446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MX_ADC1_Init+0xf4>)
 800144a:	2200      	movs	r2, #0
 800144c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001450:	2203      	movs	r2, #3
 8001452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_ADC1_Init+0xf4>)
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_ADC1_Init+0xf4>)
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001472:	2200      	movs	r2, #0
 8001474:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147e:	481f      	ldr	r0, [pc, #124]	; (80014fc <MX_ADC1_Init+0xf4>)
 8001480:	f001 fa22 	bl	80028c8 <HAL_ADC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800148a:	f000 fb59 	bl	8001b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_ADC1_Init+0xfc>)
 8001490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001492:	2306      	movs	r3, #6
 8001494:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001496:	2305      	movs	r3, #5
 8001498:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800149a:	237f      	movs	r3, #127	; 0x7f
 800149c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800149e:	2304      	movs	r3, #4
 80014a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <MX_ADC1_Init+0xf4>)
 80014ac:	f001 fdaa 	bl	8003004 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014b6:	f000 fb43 	bl	8001b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_ADC1_Init+0x100>)
 80014bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014be:	230c      	movs	r3, #12
 80014c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_ADC1_Init+0xf4>)
 80014c8:	f001 fd9c 	bl	8003004 <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80014d2:	f000 fb35 	bl	8001b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_ADC1_Init+0x104>)
 80014d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014da:	2312      	movs	r3, #18
 80014dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_ADC1_Init+0xf4>)
 80014e4:	f001 fd8e 	bl	8003004 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80014ee:	f000 fb27 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000228 	.word	0x20000228
 8001500:	50040000 	.word	0x50040000
 8001504:	2e300800 	.word	0x2e300800
 8001508:	21800100 	.word	0x21800100
 800150c:	43210000 	.word	0x43210000

08001510 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	hcrc.Instance = CRC;
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_CRC_Init+0x54>)
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <MX_CRC_Init+0x58>)
 8001518:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_CRC_Init+0x54>)
 800151c:	2201      	movs	r2, #1
 800151e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_CRC_Init+0x54>)
 8001522:	2201      	movs	r2, #1
 8001524:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_CRC_Init+0x54>)
 8001528:	2220      	movs	r2, #32
 800152a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <MX_CRC_Init+0x54>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	619a      	str	r2, [r3, #24]
	hcrc.Init.GeneratingPolynomial = 0x8005;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_CRC_Init+0x54>)
 8001534:	f248 0205 	movw	r2, #32773	; 0x8005
 8001538:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_CRC_Init+0x54>)
 800153c:	2208      	movs	r2, #8
 800153e:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0xFFFF;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_CRC_Init+0x54>)
 8001542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001546:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_CRC_Init+0x54>)
 800154a:	2201      	movs	r2, #1
 800154c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_CRC_Init+0x54>)
 8001550:	f002 fb72 	bl	8003c38 <HAL_CRC_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_CRC_Init+0x4e>
	{
	Error_Handler();
 800155a:	f000 faf1 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
	#endif
  /* USER CODE END CRC_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001bc 	.word	0x200001bc
 8001568:	40023000 	.word	0x40023000

0800156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_SPI1_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001586:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800158a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001594:	2201      	movs	r2, #1
 8001596:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI1_Init+0x74>)
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a2:	2218      	movs	r2, #24
 80015a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015cc:	f004 fab4 	bl	8005b38 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f000 fab3 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000434 	.word	0x20000434
 80015e4:	40013000 	.word	0x40013000

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b096      	sub	sp, #88	; 0x58
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	222c      	movs	r2, #44	; 0x2c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f007 febb 	bl	8009390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <MX_TIM1_Init+0x130>)
 800161c:	4a3f      	ldr	r2, [pc, #252]	; (800171c <MX_TIM1_Init+0x134>)
 800161e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <MX_TIM1_Init+0x130>)
 8001622:	2201      	movs	r2, #1
 8001624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <MX_TIM1_Init+0x130>)
 8001628:	2220      	movs	r2, #32
 800162a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <MX_TIM1_Init+0x130>)
 800162e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <MX_TIM1_Init+0x130>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <MX_TIM1_Init+0x130>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <MX_TIM1_Init+0x130>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001646:	4834      	ldr	r0, [pc, #208]	; (8001718 <MX_TIM1_Init+0x130>)
 8001648:	f005 f827 	bl	800669a <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fa75 	bl	8001b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001662:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001666:	4619      	mov	r1, r3
 8001668:	482b      	ldr	r0, [pc, #172]	; (8001718 <MX_TIM1_Init+0x130>)
 800166a:	f006 fa91 	bl	8007b90 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001674:	f000 fa64 	bl	8001b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001678:	2360      	movs	r3, #96	; 0x60
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	481e      	ldr	r0, [pc, #120]	; (8001718 <MX_TIM1_Init+0x130>)
 800169e:	f005 fcc7 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016a8:	f000 fa4a 	bl	8001b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b0:	2204      	movs	r2, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <MX_TIM1_Init+0x130>)
 80016b6:	f005 fcbb 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80016c0:	f000 fa3e 	bl	8001b40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80016d0:	230a      	movs	r3, #10
 80016d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM1_Init+0x130>)
 80016fa:	f006 faaf 	bl	8007c5c <HAL_TIMEx_ConfigBreakDeadTime>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001704:	f000 fa1c 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM1_Init+0x130>)
 800170a:	f000 fbd3 	bl	8001eb4 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3758      	adds	r7, #88	; 0x58
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200003e8 	.word	0x200003e8
 800171c:	40012c00 	.word	0x40012c00

08001720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2224      	movs	r2, #36	; 0x24
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f007 fe2e 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <MX_TIM2_Init+0xa4>)
 8001740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_TIM2_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_TIM2_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_TIM2_Init+0xa4>)
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_TIM2_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_TIM2_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001766:	2303      	movs	r3, #3
 8001768:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800176a:	2302      	movs	r3, #2
 800176c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800176e:	2301      	movs	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800177a:	2302      	movs	r3, #2
 800177c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800177e:	2301      	movs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <MX_TIM2_Init+0xa4>)
 8001792:	f005 f9d9 	bl	8006b48 <HAL_TIM_Encoder_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800179c:	f000 f9d0 	bl	8001b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_TIM2_Init+0xa4>)
 80017ae:	f006 f9ef 	bl	8007b90 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80017b8:	f000 f9c2 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3730      	adds	r7, #48	; 0x30
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000498 	.word	0x20000498

080017c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017ce:	4a1f      	ldr	r2, [pc, #124]	; (800184c <MX_USART1_UART_Init+0x84>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3000000;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <MX_USART1_UART_Init+0x88>)
 80017d6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017ec:	220c      	movs	r2, #12
 80017ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART1_UART_Init+0x80>)
 80017f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_USART1_UART_Init+0x80>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_USART1_UART_Init+0x80>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180a:	480f      	ldr	r0, [pc, #60]	; (8001848 <MX_USART1_UART_Init+0x80>)
 800180c:	f006 fae1 	bl	8007dd2 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 f993 	bl	8001b40 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart1.Instance->RTOR = MODBUS_TIMEOUT;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART1_UART_Init+0x80>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2214      	movs	r2, #20
 8001820:	615a      	str	r2, [r3, #20]
  huart1.Instance->CR1 |= USART_CR1_RTOIE;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART1_UART_Init+0x80>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_USART1_UART_Init+0x80>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001830:	601a      	str	r2, [r3, #0]
  huart1.Instance->CR2 |= USART_CR2_RTOEN;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <MX_USART1_UART_Init+0x80>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <MX_USART1_UART_Init+0x80>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001840:	605a      	str	r2, [r3, #4]



  /* USER CODE END USART1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000031c 	.word	0x2000031c
 800184c:	40013800 	.word	0x40013800
 8001850:	002dc6c0 	.word	0x002dc6c0

08001854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <MX_USART2_UART_Init+0x84>)
 800185c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <MX_USART2_UART_Init+0x88>)
 8001862:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001878:	220c      	movs	r2, #12
 800187a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 8001898:	f006 fa9b 	bl	8007dd2 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018a2:	f000 f94d 	bl	8001b40 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /*
   * Enable hardware "End of block" detection
   */
  huart2.Instance->RTOR = MODBUS_TIMEOUT;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2214      	movs	r2, #20
 80018ac:	615a      	str	r2, [r3, #20]
  huart2.Instance->CR1 |= USART_CR1_RTOIE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018bc:	601a      	str	r2, [r3, #0]
  huart2.Instance->CR2 |= USART_CR2_RTOEN;
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <MX_USART2_UART_Init+0x80>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018cc:	605a      	str	r2, [r3, #4]

  /* USER CODE END USART2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200004e4 	.word	0x200004e4
 80018d8:	40004400 	.word	0x40004400
 80018dc:	001e8480 	.word	0x001e8480

080018e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_DMA_Init+0x78>)
 80018e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ea:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <MX_DMA_Init+0x78>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6493      	str	r3, [r2, #72]	; 0x48
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_DMA_Init+0x78>)
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	200b      	movs	r0, #11
 8001904:	f002 f961 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001908:	200b      	movs	r0, #11
 800190a:	f002 f97a 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	200e      	movs	r0, #14
 8001914:	f002 f959 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001918:	200e      	movs	r0, #14
 800191a:	f002 f972 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	200f      	movs	r0, #15
 8001924:	f002 f951 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001928:	200f      	movs	r0, #15
 800192a:	f002 f96a 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2010      	movs	r0, #16
 8001934:	f002 f949 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001938:	2010      	movs	r0, #16
 800193a:	f002 f962 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2011      	movs	r0, #17
 8001944:	f002 f941 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001948:	2011      	movs	r0, #17
 800194a:	f002 f95a 	bl	8003c02 <HAL_NVIC_EnableIRQ>

}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <MX_GPIO_Init+0xe0>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <MX_GPIO_Init+0xe0>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <MX_GPIO_Init+0xe0>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <MX_GPIO_Init+0xe0>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <MX_GPIO_Init+0xe0>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <MX_GPIO_Init+0xe0>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <MX_GPIO_Init+0xe0>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <MX_GPIO_Init+0xe0>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <MX_GPIO_Init+0xe0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80019c0:	481f      	ldr	r0, [pc, #124]	; (8001a40 <MX_GPIO_Init+0xe4>)
 80019c2:	f002 ff17 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2110      	movs	r1, #16
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f002 ff11 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_FC_Pin|LED_WHITE_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2118      	movs	r1, #24
 80019d6:	481b      	ldr	r0, [pc, #108]	; (8001a44 <MX_GPIO_Init+0xe8>)
 80019d8:	f002 ff0c 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 80019dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4619      	mov	r1, r3
 80019f4:	4812      	ldr	r0, [pc, #72]	; (8001a40 <MX_GPIO_Init+0xe4>)
 80019f6:	f002 fd93 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80019fa:	2310      	movs	r3, #16
 80019fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f002 fd84 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_FC_Pin LED_WHITE_Pin */
  GPIO_InitStruct.Pin = RS485_FC_Pin|LED_WHITE_Pin;
 8001a18:	2318      	movs	r3, #24
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_GPIO_Init+0xe8>)
 8001a30:	f002 fd76 	bl	8004520 <HAL_GPIO_Init>

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000400 	.word	0x48000400

08001a48 <EndofBlock>:




void EndofBlock(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	// Check if it is timeout, and no new byte is coming
	if (huart1.Instance->ISR & USART_ISR_RTOF)
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <EndofBlock+0x6c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d026      	beq.n	8001aaa <EndofBlock+0x62>
	{
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		uint8_t Length = BUFFSIZE - hdma_usart1_rx.Instance->CNDTR;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <EndofBlock+0x70>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001a68:	71fb      	strb	r3, [r7, #7]
		//__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_RTOF);
		SET_BIT(huart1.Instance->ICR, USART_ICR_RTOCF);
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <EndofBlock+0x6c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <EndofBlock+0x6c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a78:	621a      	str	r2, [r3, #32]
		//HAL_UART_Abort(&huart1);

		// Check if we received something, but not some glitch on the line
		if (Length>0)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <EndofBlock+0x4e>
		{
			HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2110      	movs	r1, #16
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <EndofBlock+0x74>)
 8001a86:	f002 feb5 	bl	80047f4 <HAL_GPIO_WritePin>
			ModbusRTURoutine(RxData, Length);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <EndofBlock+0x78>)
 8001a90:	f7fe fe8e 	bl	80007b0 <ModbusRTURoutine>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
		}

	}
}
 8001a94:	e009      	b.n	8001aaa <EndofBlock+0x62>
			HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2108      	movs	r1, #8
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <EndofBlock+0x74>)
 8001a9c:	f002 feaa 	bl	80047f4 <HAL_GPIO_WritePin>
			HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001aa0:	2264      	movs	r2, #100	; 0x64
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <EndofBlock+0x78>)
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <EndofBlock+0x6c>)
 8001aa6:	f006 fa73 	bl	8007f90 <HAL_UART_Receive_DMA>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000031c 	.word	0x2000031c
 8001ab8:	2000028c 	.word	0x2000028c
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	20000058 	.word	0x20000058

08001ac4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <HAL_UART_TxCpltCallback+0x58>)
 8001ae6:	f002 fe85 	bl	80047f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_FC_GPIO_Port, RS485_FC_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2108      	movs	r1, #8
 8001aee:	4810      	ldr	r0, [pc, #64]	; (8001b30 <HAL_UART_TxCpltCallback+0x58>)
 8001af0:	f002 fe80 	bl	80047f4 <HAL_GPIO_WritePin>
	// disable DMA for reseting DMA's counter, after enable again
	__HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_UART_TxCpltCallback+0x5c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_TxCpltCallback+0x5c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Instance->CNDTR = BUFFSIZE;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_UART_TxCpltCallback+0x5c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_UART_TxCpltCallback+0x5c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_UART_TxCpltCallback+0x5c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxData, BUFFSIZE);
 8001b1c:	2264      	movs	r2, #100	; 0x64
 8001b1e:	4906      	ldr	r1, [pc, #24]	; (8001b38 <HAL_UART_TxCpltCallback+0x60>)
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <HAL_UART_TxCpltCallback+0x64>)
 8001b22:	f006 fa35 	bl	8007f90 <HAL_UART_Receive_DMA>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	48000400 	.word	0x48000400
 8001b34:	2000028c 	.word	0x2000028c
 8001b38:	20000058 	.word	0x20000058
 8001b3c:	2000031c 	.word	0x2000031c

08001b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b44:	b672      	cpsid	i
}
 8001b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <Error_Handler+0x8>
	...

08001b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x44>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x44>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x44>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_MspInit+0x44>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_MspInit+0x44>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_MspInit+0x44>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0a0      	sub	sp, #128	; 0x80
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	2254      	movs	r2, #84	; 0x54
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fbeb 	bl	8009390 <memset>
  if(hadc->Instance==ADC1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <HAL_ADC_MspInit+0x158>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	f040 808f 	bne.w	8001ce4 <HAL_ADC_MspInit+0x150>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bd0:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8001bda:	230a      	movs	r3, #10
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bde:	2307      	movs	r3, #7
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001be2:	2302      	movs	r3, #2
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001be6:	2302      	movs	r3, #2
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fcb9 	bl	800556c <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c00:	f7ff ff9e 	bl	8001b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c04:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	4a39      	ldr	r2, [pc, #228]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_ADC_MspInit+0x15c>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Current_Pin|Potentiometer_Pin;
 8001c4c:	2348      	movs	r3, #72	; 0x48
 8001c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c50:	230b      	movs	r3, #11
 8001c52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f002 fc5d 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Temperature_Pin;
 8001c66:	2302      	movs	r3, #2
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c6a:	230b      	movs	r3, #11
 8001c6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(Temperature_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c76:	4619      	mov	r1, r3
 8001c78:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <HAL_ADC_MspInit+0x160>)
 8001c7a:	f002 fc51 	bl	8004520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_ADC_MspInit+0x168>)
 8001c82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001caa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb8:	480f      	ldr	r0, [pc, #60]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001cba:	f002 f9bb 	bl	8004034 <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001cc4:	f7ff ff3c 	bl	8001b40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001ccc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_ADC_MspInit+0x164>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2012      	movs	r0, #18
 8001cda:	f001 ff76 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001cde:	2012      	movs	r0, #18
 8001ce0:	f001 ff8f 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3780      	adds	r7, #128	; 0x80
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	50040000 	.word	0x50040000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	200003a0 	.word	0x200003a0
 8001cfc:	40020008 	.word	0x40020008

08001d00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_CRC_MspInit+0x38>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10b      	bne.n	8001d2a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_CRC_MspInit+0x3c>)
 8001d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_CRC_MspInit+0x3c>)
 8001d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d1c:	6493      	str	r3, [r2, #72]	; 0x48
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_CRC_MspInit+0x3c>)
 8001d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023000 	.word	0x40023000
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d131      	bne.n	8001dc6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_SPI_MspInit+0x94>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <HAL_SPI_MspInit+0x94>)
 8001d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_SPI_MspInit+0x94>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_SPI_MspInit+0x94>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_SPI_MspInit+0x94>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_SPI_MspInit+0x94>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8001d92:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da4:	2305      	movs	r3, #5
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db2:	f002 fbb5 	bl	8004520 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2023      	movs	r0, #35	; 0x23
 8001dbc:	f001 ff05 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001dc0:	2023      	movs	r0, #35	; 0x23
 8001dc2:	f001 ff1e 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40013000 	.word	0x40013000
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_TIM_PWM_MspInit+0x44>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d113      	bne.n	8001e12 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_TIM_PWM_MspInit+0x48>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_TIM_PWM_MspInit+0x48>)
 8001df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df4:	6613      	str	r3, [r2, #96]	; 0x60
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_TIM_PWM_MspInit+0x48>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2019      	movs	r0, #25
 8001e08:	f001 fedf 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e0c:	2019      	movs	r0, #25
 8001e0e:	f001 fef8 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d130      	bne.n	8001ea8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001e76:	2303      	movs	r3, #3
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e86:	2301      	movs	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e94:	f002 fb44 	bl	8004520 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	201c      	movs	r0, #28
 8001e9e:	f001 fe94 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea2:	201c      	movs	r0, #28
 8001ea4:	f001 fead 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_TIM_MspPostInit+0xa0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d139      	bne.n	8001f4a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_TIM_MspPostInit+0xa4>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_TIM_MspPostInit+0xa4>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_TIM_MspPostInit+0xa4>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_TIM_MspPostInit+0xa4>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_TIM_MspPostInit+0xa4>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_TIM_MspPostInit+0xa4>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f06:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f002 fafb 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <HAL_TIM_MspPostInit+0xa8>)
 8001f46:	f002 faeb 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	; 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000400 	.word	0x48000400

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0a0      	sub	sp, #128	; 0x80
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	2254      	movs	r2, #84	; 0x54
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f007 fa05 	bl	8009390 <memset>
  if(huart->Instance==USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4aa1      	ldr	r2, [pc, #644]	; (8002210 <HAL_UART_MspInit+0x2b0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 8091 	bne.w	80020b4 <HAL_UART_MspInit+0x154>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9a:	f107 0318 	add.w	r3, r7, #24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fae4 	bl	800556c <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001faa:	f7ff fdc9 	bl	8001b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fae:	4b99      	ldr	r3, [pc, #612]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a98      	ldr	r2, [pc, #608]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b96      	ldr	r3, [pc, #600]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b93      	ldr	r3, [pc, #588]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b90      	ldr	r3, [pc, #576]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fee:	2307      	movs	r3, #7
 8001ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4887      	ldr	r0, [pc, #540]	; (8002218 <HAL_UART_MspInit+0x2b8>)
 8001ffa:	f002 fa91 	bl	8004520 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001ffe:	4b87      	ldr	r3, [pc, #540]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002000:	4a87      	ldr	r2, [pc, #540]	; (8002220 <HAL_UART_MspInit+0x2c0>)
 8002002:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002004:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002006:	2202      	movs	r2, #2
 8002008:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200a:	4b84      	ldr	r3, [pc, #528]	; (800221c <HAL_UART_MspInit+0x2bc>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b81      	ldr	r3, [pc, #516]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201c:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_UART_MspInit+0x2bc>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002022:	4b7e      	ldr	r3, [pc, #504]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002028:	4b7c      	ldr	r3, [pc, #496]	; (800221c <HAL_UART_MspInit+0x2bc>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800202e:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002034:	4879      	ldr	r0, [pc, #484]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002036:	f001 fffd 	bl	8004034 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002040:	f7ff fd7e 	bl	8001b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_UART_MspInit+0x2bc>)
 8002048:	671a      	str	r2, [r3, #112]	; 0x70
 800204a:	4a74      	ldr	r2, [pc, #464]	; (800221c <HAL_UART_MspInit+0x2bc>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002050:	4b74      	ldr	r3, [pc, #464]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002052:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_UART_MspInit+0x2c8>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002058:	2202      	movs	r2, #2
 800205a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800205c:	4b71      	ldr	r3, [pc, #452]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 800205e:	2210      	movs	r2, #16
 8002060:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002062:	4b70      	ldr	r3, [pc, #448]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002068:	4b6e      	ldr	r3, [pc, #440]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002074:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002080:	4b68      	ldr	r3, [pc, #416]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002086:	4867      	ldr	r0, [pc, #412]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 8002088:	f001 ffd4 	bl	8004034 <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8002092:	f7ff fd55 	bl	8001b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a62      	ldr	r2, [pc, #392]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 800209a:	66da      	str	r2, [r3, #108]	; 0x6c
 800209c:	4a61      	ldr	r2, [pc, #388]	; (8002224 <HAL_UART_MspInit+0x2c4>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2025      	movs	r0, #37	; 0x25
 80020a8:	f001 fd8f 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ac:	2025      	movs	r0, #37	; 0x25
 80020ae:	f001 fda8 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020b2:	e0a8      	b.n	8002206 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5c      	ldr	r2, [pc, #368]	; (800222c <HAL_UART_MspInit+0x2cc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	f040 80a3 	bne.w	8002206 <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fa4d 	bl	800556c <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80020d8:	f7ff fd32 	bl	8001b40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020dc:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 80020e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002100:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_UART_MspInit+0x2b4>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800210c:	2304      	movs	r3, #4
 800210e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211c:	2307      	movs	r3, #7
 800211e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002124:	4619      	mov	r1, r3
 8002126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212a:	f002 f9f9 	bl	8004520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800212e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002132:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002140:	2303      	movs	r3, #3
 8002142:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002144:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002148:	4619      	mov	r1, r3
 800214a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214e:	f002 f9e7 	bl	8004520 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 8002154:	4a37      	ldr	r2, [pc, #220]	; (8002234 <HAL_UART_MspInit+0x2d4>)
 8002156:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 800215a:	2202      	movs	r2, #2
 800215c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215e:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002188:	4829      	ldr	r0, [pc, #164]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 800218a:	f001 ff53 	bl	8004034 <HAL_DMA_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8002194:	f7ff fcd4 	bl	8001b40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 800219c:	671a      	str	r2, [r3, #112]	; 0x70
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_UART_MspInit+0x2d0>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <HAL_UART_MspInit+0x2dc>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021b2:	2210      	movs	r2, #16
 80021b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021da:	4817      	ldr	r0, [pc, #92]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021dc:	f001 ff2a 	bl	8004034 <HAL_DMA_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_UART_MspInit+0x28a>
      Error_Handler();
 80021e6:	f7ff fcab 	bl	8001b40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a12      	ldr	r2, [pc, #72]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2026      	movs	r0, #38	; 0x26
 80021fc:	f001 fce5 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002200:	2026      	movs	r0, #38	; 0x26
 8002202:	f001 fcfe 	bl	8003c02 <HAL_NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3780      	adds	r7, #128	; 0x80
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40013800 	.word	0x40013800
 8002214:	40021000 	.word	0x40021000
 8002218:	48000400 	.word	0x48000400
 800221c:	2000028c 	.word	0x2000028c
 8002220:	40020058 	.word	0x40020058
 8002224:	200001e0 	.word	0x200001e0
 8002228:	40020044 	.word	0x40020044
 800222c:	40004400 	.word	0x40004400
 8002230:	20000174 	.word	0x20000174
 8002234:	4002006c 	.word	0x4002006c
 8002238:	200002d4 	.word	0x200002d4
 800223c:	40020080 	.word	0x40020080

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228c:	f000 f922 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA1_Channel1_IRQHandler+0x10>)
 800229a:	f002 f862 	bl	8004362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003a0 	.word	0x200003a0

080022a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA1_Channel4_IRQHandler+0x10>)
 80022ae:	f002 f858 	bl	8004362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200001e0 	.word	0x200001e0

080022bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <DMA1_Channel5_IRQHandler+0x10>)
 80022c2:	f002 f84e 	bl	8004362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000028c 	.word	0x2000028c

080022d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <DMA1_Channel6_IRQHandler+0x10>)
 80022d6:	f002 f844 	bl	8004362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000174 	.word	0x20000174

080022e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA1_Channel7_IRQHandler+0x10>)
 80022ea:	f002 f83a 	bl	8004362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200002d4 	.word	0x200002d4

080022f8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <ADC1_IRQHandler+0x10>)
 80022fe:	f000 fcaf 	bl	8002c60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000228 	.word	0x20000228

0800230c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002312:	f004 fd6d 	bl	8006df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200003e8 	.word	0x200003e8

08002320 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM2_IRQHandler+0x10>)
 8002326:	f004 fd63 	bl	8006df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000498 	.word	0x20000498

08002334 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <SPI1_IRQHandler+0x10>)
 800233a:	f003 fd51 	bl	8005de0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000434 	.word	0x20000434

08002348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	EndofBlock();
 800234c:	f7ff fb7c 	bl	8001a48 <EndofBlock>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <USART1_IRQHandler+0x14>)
 8002352:	f005 fe73 	bl	800803c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000031c 	.word	0x2000031c

08002360 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART2_IRQHandler+0x10>)
 8002366:	f005 fe69 	bl	800803c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200004e4 	.word	0x200004e4

08002374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <SystemInit+0x5c>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <SystemInit+0x5c>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <SystemInit+0x60>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <SystemInit+0x60>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <SystemInit+0x60>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <SystemInit+0x60>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <SystemInit+0x60>)
 80023a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <SystemInit+0x60>)
 80023ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <SystemInit+0x60>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <SystemInit+0x60>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SystemInit+0x60>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	40021000 	.word	0x40021000

080023d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002410 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023dc:	f7ff ffca 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023e2:	e003      	b.n	80023ec <LoopCopyDataInit>

080023e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023ea:	3104      	adds	r1, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023ec:	480a      	ldr	r0, [pc, #40]	; (8002418 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <LoopForever+0xe>)
	adds	r2, r0, r1
 80023f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023f4:	d3f6      	bcc.n	80023e4 <CopyDataInit>
	ldr	r2, =_sbss
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023f8:	e002      	b.n	8002400 <LoopFillZerobss>

080023fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023fc:	f842 3b04 	str.w	r3, [r2], #4

08002400 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <LoopForever+0x16>)
	cmp	r2, r3
 8002402:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002404:	d3f9      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002406:	f006 ff9f 	bl	8009348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800240a:	f7fe ff5b 	bl	80012c4 <main>

0800240e <LoopForever>:

LoopForever:
    b LoopForever
 800240e:	e7fe      	b.n	800240e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002410:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002414:	08009410 	.word	0x08009410
	ldr	r0, =_sdata
 8002418:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800241c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8002420:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8002424:	2000056c 	.word	0x2000056c

08002428 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <CAN1_RX0_IRQHandler>

0800242a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f001 fbbd 	bl	8003bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f80e 	bl	800245c <HAL_InitTick>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	e001      	b.n	8002450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800244c:	f7ff fb7e 	bl	8001b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002450:	79fb      	ldrb	r3, [r7, #7]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_InitTick+0x6c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d023      	beq.n	80024b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_InitTick+0x70>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_InitTick+0x6c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f001 fbc9 	bl	8003c1e <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d809      	bhi.n	80024ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f001 fb93 	bl	8003bca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_InitTick+0x74>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e007      	b.n	80024bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e004      	b.n	80024bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e001      	b.n	80024bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000020 	.word	0x20000020
 80024cc:	20000018 	.word	0x20000018
 80024d0:	2000001c 	.word	0x2000001c

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000020 	.word	0x20000020
 80024f8:	20000568 	.word	0x20000568

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000568 	.word	0x20000568

08002514 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	609a      	str	r2, [r3, #8]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <LL_ADC_SetOffset+0x44>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	03fff000 	.word	0x03fff000

080025c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3360      	adds	r3, #96	; 0x60
 80025d2:	461a      	mov	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3360      	adds	r3, #96	; 0x60
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	431a      	orrs	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3330      	adds	r3, #48	; 0x30
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	4413      	add	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	211f      	movs	r1, #31
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	f003 011f 	and.w	r1, r3, #31
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	431a      	orrs	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3314      	adds	r3, #20
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0e5b      	lsrs	r3, r3, #25
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0d1b      	lsrs	r3, r3, #20
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2107      	movs	r1, #7
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0d1b      	lsrs	r3, r3, #20
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	431a      	orrs	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0318 	and.w	r3, r3, #24
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002744:	40d9      	lsrs	r1, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	400b      	ands	r3, r1
 800274a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274e:	431a      	orrs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	0007ffff 	.word	0x0007ffff

08002768 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6093      	str	r3, [r2, #8]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <LL_ADC_IsEnabled+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_ADC_IsEnabled+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002862:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e12c      	b.n	8002b3c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff f94f 	bl	8001b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff3f 	bl	800278c <LL_ADC_IsDeepPowerDownEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff25 	bl	8002768 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff5a 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d115      	bne.n	800295a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff3e 	bl	80027b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002938:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_ADC_Init+0x27c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	4a82      	ldr	r2, [pc, #520]	; (8002b48 <HAL_ADC_Init+0x280>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800294c:	e002      	b.n	8002954 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3b01      	subs	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff3c 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff75 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002990:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 80c5 	bne.w	8002b2a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 80c1 	bne.w	8002b2a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff35 	bl	800282c <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c8:	4860      	ldr	r0, [pc, #384]	; (8002b4c <HAL_ADC_Init+0x284>)
 80029ca:	f7ff ff2f 	bl	800282c <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	485d      	ldr	r0, [pc, #372]	; (8002b50 <HAL_ADC_Init+0x288>)
 80029dc:	f7ff fd9a 	bl	8002514 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e5b      	ldrb	r3, [r3, #25]
 80029e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	3b01      	subs	r3, #1
 8002a14:	045b      	lsls	r3, r3, #17
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <HAL_ADC_Init+0x28c>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff12 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002a56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff1f 	bl	80028a0 <LL_ADC_INJ_IsConversionOngoing>
 8002a62:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d13d      	bne.n	8002ae6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d13a      	bne.n	8002ae6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a74:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a8c:	f023 0302 	bic.w	r3, r3, #2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	69b9      	ldr	r1, [r7, #24]
 8002a96:	430b      	orrs	r3, r1
 8002a98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d118      	bne.n	8002ad6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ac0:	4311      	orrs	r1, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	611a      	str	r2, [r3, #16]
 8002ad4:	e007      	b.n	8002ae6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10c      	bne.n	8002b08 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	f023 010f 	bic.w	r1, r3, #15
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
 8002b06:	e007      	b.n	8002b18 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020f 	bic.w	r2, r2, #15
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f023 0303 	bic.w	r3, r3, #3
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
 8002b28:	e007      	b.n	8002b3a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000018 	.word	0x20000018
 8002b48:	053e2d63 	.word	0x053e2d63
 8002b4c:	50040000 	.word	0x50040000
 8002b50:	50040300 	.word	0x50040300
 8002b54:	fff0c007 	.word	0xfff0c007

08002b58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe86 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d167      	bne.n	8002c44 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Start_DMA+0x2a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e063      	b.n	8002c4a <HAL_ADC_Start_DMA+0xf2>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fe1a 	bl	80037c4 <ADC_Enable>
 8002b90:	4603      	mov	r3, r0
 8002b92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d14f      	bne.n	8002c3a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f023 0206 	bic.w	r2, r3, #6
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc6:	e002      	b.n	8002bce <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <HAL_ADC_Start_DMA+0xfc>)
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_ADC_Start_DMA+0x100>)
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_ADC_Start_DMA+0x104>)
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	221c      	movs	r2, #28
 8002bec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0210 	orr.w	r2, r2, #16
 8002c04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3340      	adds	r3, #64	; 0x40
 8002c20:	4619      	mov	r1, r3
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f001 fabd 	bl	80041a4 <HAL_DMA_Start_IT>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fe0d 	bl	8002852 <LL_ADC_REG_StartConversion>
 8002c38:	e006      	b.n	8002c48 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c42:	e001      	b.n	8002c48 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
 8002c46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	08003889 	.word	0x08003889
 8002c58:	08003961 	.word	0x08003961
 8002c5c:	0800397d 	.word	0x0800397d

08002c60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x56>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fea9 	bl	8003a00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_ADC_IRQHandler+0x6a>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05e      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d059      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fc93 	bl	8002626 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03e      	beq.n	8002d84 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d135      	bne.n	8002d84 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d12e      	bne.n	8002d84 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fda5 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11a      	bne.n	8002d6c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 020c 	bic.w	r2, r2, #12
 8002d44:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d112      	bne.n	8002d84 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
 8002d6a:	e00b      	b.n	8002d84 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe fa03 	bl	8001190 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_IRQHandler+0x146>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d072      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d06d      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fc64 	bl	80026a4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ddc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fc1f 	bl	8002626 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002de8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d047      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x1b2>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d03f      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d13a      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d133      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d12e      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd36 	bl	80028a0 <LL_ADC_INJ_IsConversionOngoing>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11a      	bne.n	8002e70 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e48:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d112      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e6e:	e00b      	b.n	8002e88 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fd91 	bl	80039b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2260      	movs	r2, #96	; 0x60
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d011      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x264>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f890 	bl	8002fdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x294>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fd77 	bl	80039d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d012      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x2c4>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fd69 	bl	80039ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02a      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x324>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d025      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	e008      	b.n	8002f58 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10e      	bne.n	8002f7c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f83a 	bl	8002ff0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d018      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x360>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f043 0208 	orr.w	r2, r3, #8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fd02 	bl	80039c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b0b6      	sub	sp, #216	; 0xd8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x22>
 8003022:	2302      	movs	r3, #2
 8003024:	e3b9      	b.n	800379a <HAL_ADC_ConfigChannel+0x796>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fc21 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 839e 	bne.w	800377c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d824      	bhi.n	8003092 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	3b02      	subs	r3, #2
 800304e:	2b03      	cmp	r3, #3
 8003050:	d81b      	bhi.n	800308a <HAL_ADC_ConfigChannel+0x86>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_ADC_ConfigChannel+0x54>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	08003069 	.word	0x08003069
 800305c:	08003071 	.word	0x08003071
 8003060:	08003079 	.word	0x08003079
 8003064:	08003081 	.word	0x08003081
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	220c      	movs	r2, #12
 800306c:	605a      	str	r2, [r3, #4]
          break;
 800306e:	e011      	b.n	8003094 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2212      	movs	r2, #18
 8003074:	605a      	str	r2, [r3, #4]
          break;
 8003076:	e00d      	b.n	8003094 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2218      	movs	r2, #24
 800307c:	605a      	str	r2, [r3, #4]
          break;
 800307e:	e009      	b.n	8003094 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003086:	605a      	str	r2, [r3, #4]
          break;
 8003088:	e004      	b.n	8003094 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2206      	movs	r2, #6
 800308e:	605a      	str	r2, [r3, #4]
          break;
 8003090:	e000      	b.n	8003094 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003092:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f7ff fad3 	bl	800264c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fbe5 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 80030b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fbf1 	bl	80028a0 <LL_ADC_INJ_IsConversionOngoing>
 80030be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 81a6 	bne.w	8003418 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 81a1 	bne.w	8003418 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f7ff faf1 	bl	80026ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00a      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800311a:	f7ff fa2f 	bl	800257c <LL_ADC_SetOffset>
 800311e:	e17b      	b.n	8003418 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fa4c 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <HAL_ADC_ConfigChannel+0x148>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fa41 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	f003 021f 	and.w	r2, r3, #31
 800314a:	e01e      	b.n	800318a <HAL_ADC_ConfigChannel+0x186>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fa36 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800316a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800316e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003172:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800317a:	2320      	movs	r3, #32
 800317c:	e004      	b.n	8003188 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800317e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x19e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	e018      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x1d0>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80031c6:	2320      	movs	r3, #32
 80031c8:	e004      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80031ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d106      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fa05 	bl	80025f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f9e9 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f9de 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 8003208:	4603      	mov	r3, r0
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	e01e      	b.n	8003250 <HAL_ADC_ConfigChannel+0x24c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f9d3 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003230:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e004      	b.n	800324e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x264>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	e018      	b.n	800329a <HAL_ADC_ConfigChannel+0x296>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800327c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	e004      	b.n	800329a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800329a:	429a      	cmp	r2, r3
 800329c:	d106      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f9a2 	bl	80025f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2102      	movs	r1, #2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f986 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x2d4>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f97b 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 021f 	and.w	r2, r3, #31
 80032d6:	e01e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x312>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f970 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e004      	b.n	8003314 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800330a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_ADC_ConfigChannel+0x32a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	e016      	b.n	800335c <HAL_ADC_ConfigChannel+0x358>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800334e:	2320      	movs	r3, #32
 8003350:	e004      	b.n	800335c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2200      	movs	r2, #0
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f941 	bl	80025f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2103      	movs	r1, #3
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff f925 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_ADC_ConfigChannel+0x396>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2103      	movs	r1, #3
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f91a 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	0e9b      	lsrs	r3, r3, #26
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	e017      	b.n	80033ca <HAL_ADC_ConfigChannel+0x3c6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2103      	movs	r1, #3
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f90f 	bl	80025c4 <LL_ADC_GetOffsetChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e003      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80033c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x3de>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0e9b      	lsrs	r3, r3, #26
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	e011      	b.n	8003406 <HAL_ADC_ConfigChannel+0x402>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80033fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003406:	429a      	cmp	r2, r3
 8003408:	d106      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	2103      	movs	r1, #3
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f8ec 	bl	80025f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fa05 	bl	800282c <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 813f 	bne.w	80036a8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	461a      	mov	r2, r3
 8003438:	f7ff f972 	bl	8002720 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a8e      	ldr	r2, [pc, #568]	; (800367c <HAL_ADC_ConfigChannel+0x678>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f040 8130 	bne.w	80036a8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x46c>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	3301      	adds	r3, #1
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2b09      	cmp	r3, #9
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e019      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x4a0>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800347e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003480:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800348c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2b09      	cmp	r3, #9
 800349c:	bf94      	ite	ls
 800349e:	2301      	movls	r3, #1
 80034a0:	2300      	movhi	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d079      	beq.n	800359c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x4c0>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	3301      	adds	r3, #1
 80034bc:	069b      	lsls	r3, r3, #26
 80034be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c2:	e015      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x4ec>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e003      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	069b      	lsls	r3, r3, #26
 80034ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x50c>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	3301      	adds	r3, #1
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	e017      	b.n	8003540 <HAL_ADC_ConfigChannel+0x53c>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003528:	2320      	movs	r3, #32
 800352a:	e003      	b.n	8003534 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	3301      	adds	r3, #1
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	ea42 0103 	orr.w	r1, r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x562>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	051b      	lsls	r3, r3, #20
 8003564:	e018      	b.n	8003598 <HAL_ADC_ConfigChannel+0x594>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800357e:	2320      	movs	r3, #32
 8003580:	e003      	b.n	800358a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003598:	430b      	orrs	r3, r1
 800359a:	e080      	b.n	800369e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x5b4>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	3301      	adds	r3, #1
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b6:	e015      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x5e0>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	069b      	lsls	r3, r3, #26
 80035e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x600>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	3301      	adds	r3, #1
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	e017      	b.n	8003634 <HAL_ADC_ConfigChannel+0x630>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	61fb      	str	r3, [r7, #28]
  return result;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	e003      	b.n	8003628 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	ea42 0103 	orr.w	r1, r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x65c>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	3b1e      	subs	r3, #30
 8003658:	051b      	lsls	r3, r3, #20
 800365a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800365e:	e01d      	b.n	800369c <HAL_ADC_ConfigChannel+0x698>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	613b      	str	r3, [r7, #16]
  return result;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	e005      	b.n	8003688 <HAL_ADC_ConfigChannel+0x684>
 800367c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f003 021f 	and.w	r2, r3, #31
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	3b1e      	subs	r3, #30
 8003696:	051b      	lsls	r3, r3, #20
 8003698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369c:	430b      	orrs	r3, r1
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	4619      	mov	r1, r3
 80036a4:	f7ff f811 	bl	80026ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_ADC_ConfigChannel+0x7a0>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d06c      	beq.n	800378e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b4:	483c      	ldr	r0, [pc, #240]	; (80037a8 <HAL_ADC_ConfigChannel+0x7a4>)
 80036b6:	f7fe ff53 	bl	8002560 <LL_ADC_GetCommonPathInternalCh>
 80036ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <HAL_ADC_ConfigChannel+0x7a8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d127      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d121      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <HAL_ADC_ConfigChannel+0x7ac>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d157      	bne.n	800378e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e6:	4619      	mov	r1, r3
 80036e8:	482f      	ldr	r0, [pc, #188]	; (80037a8 <HAL_ADC_ConfigChannel+0x7a4>)
 80036ea:	f7fe ff26 	bl	800253a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_ADC_ConfigChannel+0x7b0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_ADC_ConfigChannel+0x7b4>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	099b      	lsrs	r3, r3, #6
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003708:	e002      	b.n	8003710 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3b01      	subs	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f9      	bne.n	800370a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003716:	e03a      	b.n	800378e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <HAL_ADC_ConfigChannel+0x7b8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d113      	bne.n	800374a <HAL_ADC_ConfigChannel+0x746>
 8003722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d12a      	bne.n	800378e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003740:	4619      	mov	r1, r3
 8003742:	4819      	ldr	r0, [pc, #100]	; (80037a8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003744:	f7fe fef9 	bl	800253a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003748:	e021      	b.n	800378e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d11c      	bne.n	800378e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800376a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003772:	4619      	mov	r1, r3
 8003774:	480c      	ldr	r0, [pc, #48]	; (80037a8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003776:	f7fe fee0 	bl	800253a <LL_ADC_SetCommonPathInternalCh>
 800377a:	e008      	b.n	800378e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003796:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800379a:	4618      	mov	r0, r3
 800379c:	37d8      	adds	r7, #216	; 0xd8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	80080000 	.word	0x80080000
 80037a8:	50040300 	.word	0x50040300
 80037ac:	c7520000 	.word	0xc7520000
 80037b0:	50040000 	.word	0x50040000
 80037b4:	20000018 	.word	0x20000018
 80037b8:	053e2d63 	.word	0x053e2d63
 80037bc:	cb840000 	.word	0xcb840000
 80037c0:	80000001 	.word	0x80000001

080037c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f82b 	bl	800282c <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d14d      	bne.n	8003878 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	4b28      	ldr	r3, [pc, #160]	; (8003884 <ADC_Enable+0xc0>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f043 0210 	orr.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	f043 0201 	orr.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e039      	b.n	800387a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fffa 	bl	8002804 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003810:	f7fe fe74 	bl	80024fc <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003816:	e028      	b.n	800386a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff f805 	bl	800282c <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe ffe9 	bl	8002804 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003832:	f7fe fe63 	bl	80024fc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d914      	bls.n	800386a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d00d      	beq.n	800386a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d1cf      	bne.n	8003818 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	8000003f 	.word	0x8000003f

08003888 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d14b      	bne.n	800393a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d021      	beq.n	8003900 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe feb0 	bl	8002626 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12b      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11f      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
 80038fe:	e018      	b.n	8003932 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d111      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7fd fc2c 	bl	8001190 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003938:	e00e      	b.n	8003958 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fb52 	bl	8002ff0 <HAL_ADC_ErrorCallback>
}
 800394c:	e004      	b.n	8003958 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff fb2a 	bl	8002fc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fb24 	bl	8002ff0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	db0a      	blt.n	8003ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <__NVIC_SetPriority+0x4c>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003adc:	e00a      	b.n	8003af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <__NVIC_SetPriority+0x50>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f1c3 0307 	rsb	r3, r3, #7
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf28      	it	cs
 8003b26:	2304      	movcs	r3, #4
 8003b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <NVIC_EncodePriority+0x30>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3b03      	subs	r3, #3
 8003b36:	e000      	b.n	8003b3a <NVIC_EncodePriority+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43d9      	mvns	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	4313      	orrs	r3, r2
         );
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b80:	d301      	bcc.n	8003b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <SysTick_Config+0x40>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8e:	210f      	movs	r1, #15
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f7ff ff8e 	bl	8003ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <SysTick_Config+0x40>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <SysTick_Config+0x40>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010

08003bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff29 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bdc:	f7ff ff3e 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff8e 	bl	8003b08 <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5d 	bl	8003ab4 <__NVIC_SetPriority>
}
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff31 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa2 	bl	8003b70 <SysTick_Config>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e054      	b.n	8003cf4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7f5b      	ldrb	r3, [r3, #29]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe f850 	bl	8001d00 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	791b      	ldrb	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_CRC_Init+0xc4>)
 8003c74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0218 	bic.w	r2, r2, #24
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	e00c      	b.n	8003ca2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f948 	bl	8003f28 <HAL_CRCEx_Polynomial_Set>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e028      	b.n	8003cf4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	795b      	ldrb	r3, [r3, #5]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	611a      	str	r2, [r3, #16]
 8003cb4:	e004      	b.n	8003cc0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6912      	ldr	r2, [r2, #16]
 8003cbe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	04c11db7 	.word	0x04c11db7

08003d00 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2202      	movs	r2, #2
 8003d14:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d006      	beq.n	8003d3c <HAL_CRC_Calculate+0x3c>
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d829      	bhi.n	8003d86 <HAL_CRC_Calculate+0x86>
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d019      	beq.n	8003d6a <HAL_CRC_Calculate+0x6a>
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d01e      	beq.n	8003d78 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003d3a:	e024      	b.n	8003d86 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e00a      	b.n	8003d58 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3f0      	bcc.n	8003d42 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	613b      	str	r3, [r7, #16]
      break;
 8003d68:	e00e      	b.n	8003d88 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f812 	bl	8003d98 <CRC_Handle_8>
 8003d74:	6138      	str	r0, [r7, #16]
      break;
 8003d76:	e007      	b.n	8003d88 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f899 	bl	8003eb4 <CRC_Handle_16>
 8003d82:	6138      	str	r0, [r7, #16]
      break;
 8003d84:	e000      	b.n	8003d88 <HAL_CRC_Calculate+0x88>
      break;
 8003d86:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003d8e:	693b      	ldr	r3, [r7, #16]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e023      	b.n	8003df2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	3301      	adds	r3, #1
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003dc4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	440b      	add	r3, r1
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003dd4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	3303      	adds	r3, #3
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	440b      	add	r3, r1
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003de8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	3301      	adds	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d3d6      	bcc.n	8003daa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04d      	beq.n	8003ea2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	4413      	add	r3, r2
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d116      	bne.n	8003e58 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	4413      	add	r3, r2
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	b21a      	sxth	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	440b      	add	r3, r1
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	8b7a      	ldrh	r2, [r7, #26]
 8003e56:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d11f      	bne.n	8003ea2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4413      	add	r3, r2
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3301      	adds	r3, #1
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	440b      	add	r3, r1
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b21b      	sxth	r3, r3
 8003e82:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	8b7a      	ldrh	r2, [r7, #26]
 8003e8e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	3302      	adds	r3, #2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4413      	add	r3, r2
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3724      	adds	r7, #36	; 0x24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e013      	b.n	8003eee <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	041a      	lsls	r2, r3, #16
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	440b      	add	r3, r1
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3e6      	bcc.n	8003ec6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f38:	231f      	movs	r3, #31
 8003f3a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f3c:	bf00      	nop
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	613a      	str	r2, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_CRCEx_Polynomial_Set+0x34>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_CRCEx_Polynomial_Set+0x16>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b18      	cmp	r3, #24
 8003f60:	d846      	bhi.n	8003ff0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003ff7 	.word	0x08003ff7
 8003f6c:	08003ff1 	.word	0x08003ff1
 8003f70:	08003ff1 	.word	0x08003ff1
 8003f74:	08003ff1 	.word	0x08003ff1
 8003f78:	08003ff1 	.word	0x08003ff1
 8003f7c:	08003ff1 	.word	0x08003ff1
 8003f80:	08003ff1 	.word	0x08003ff1
 8003f84:	08003ff1 	.word	0x08003ff1
 8003f88:	08003fe5 	.word	0x08003fe5
 8003f8c:	08003ff1 	.word	0x08003ff1
 8003f90:	08003ff1 	.word	0x08003ff1
 8003f94:	08003ff1 	.word	0x08003ff1
 8003f98:	08003ff1 	.word	0x08003ff1
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003ff1 	.word	0x08003ff1
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003ff1 	.word	0x08003ff1
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003ff1 	.word	0x08003ff1
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08003fcd 	.word	0x08003fcd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d913      	bls.n	8003ffa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fd6:	e010      	b.n	8003ffa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b07      	cmp	r3, #7
 8003fdc:	d90f      	bls.n	8003ffe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fe2:	e00c      	b.n	8003ffe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d90b      	bls.n	8004002 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fee:	e008      	b.n	8004002 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	e006      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e004      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004002:	bf00      	nop
  }
  if (status == HAL_OK)
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 0118 	bic.w	r1, r3, #24
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e098      	b.n	8004178 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	4b4d      	ldr	r3, [pc, #308]	; (8004184 <HAL_DMA_Init+0x150>)
 800404e:	429a      	cmp	r2, r3
 8004050:	d80f      	bhi.n	8004072 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_DMA_Init+0x154>)
 800405a:	4413      	add	r3, r2
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_DMA_Init+0x158>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a48      	ldr	r2, [pc, #288]	; (8004190 <HAL_DMA_Init+0x15c>)
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
 8004070:	e00e      	b.n	8004090 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_DMA_Init+0x160>)
 800407a:	4413      	add	r3, r2
 800407c:	4a43      	ldr	r2, [pc, #268]	; (800418c <HAL_DMA_Init+0x158>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a42      	ldr	r2, [pc, #264]	; (8004198 <HAL_DMA_Init+0x164>)
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ea:	d039      	beq.n	8004160 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <HAL_DMA_Init+0x15c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d11a      	bne.n	800412c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_DMA_Init+0x168>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f003 031c 	and.w	r3, r3, #28
 8004102:	210f      	movs	r1, #15
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	4924      	ldr	r1, [pc, #144]	; (800419c <HAL_DMA_Init+0x168>)
 800410c:	4013      	ands	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <HAL_DMA_Init+0x168>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	f003 031c 	and.w	r3, r3, #28
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	491d      	ldr	r1, [pc, #116]	; (800419c <HAL_DMA_Init+0x168>)
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
 800412a:	e019      	b.n	8004160 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_DMA_Init+0x16c>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	f003 031c 	and.w	r3, r3, #28
 8004138:	210f      	movs	r1, #15
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	4917      	ldr	r1, [pc, #92]	; (80041a0 <HAL_DMA_Init+0x16c>)
 8004142:	4013      	ands	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_DMA_Init+0x16c>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f003 031c 	and.w	r3, r3, #28
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	4911      	ldr	r1, [pc, #68]	; (80041a0 <HAL_DMA_Init+0x16c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40020407 	.word	0x40020407
 8004188:	bffdfff8 	.word	0xbffdfff8
 800418c:	cccccccd 	.word	0xcccccccd
 8004190:	40020000 	.word	0x40020000
 8004194:	bffdfbf8 	.word	0xbffdfbf8
 8004198:	40020400 	.word	0x40020400
 800419c:	400200a8 	.word	0x400200a8
 80041a0:	400204a8 	.word	0x400204a8

080041a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_DMA_Start_IT+0x20>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e04b      	b.n	800425c <HAL_DMA_Start_IT+0xb8>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d13a      	bne.n	800424e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f95f 	bl	80044c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 020e 	orr.w	r2, r2, #14
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e00f      	b.n	800423c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 020a 	orr.w	r2, r2, #10
 800423a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e005      	b.n	800425a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004256:	2302      	movs	r3, #2
 8004258:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d008      	beq.n	800428e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2204      	movs	r2, #4
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e022      	b.n	80042d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 020e 	bic.w	r2, r2, #14
 800429c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f003 021c 	and.w	r2, r3, #28
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f202 	lsl.w	r2, r1, r2
 80042c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d005      	beq.n	8004304 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2204      	movs	r2, #4
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e029      	b.n	8004358 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 020e 	bic.w	r2, r2, #14
 8004312:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 021c 	and.w	r2, r3, #28
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f202 	lsl.w	r2, r1, r2
 8004336:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
    }
  }
  return status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f003 031c 	and.w	r3, r3, #28
 8004382:	2204      	movs	r2, #4
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d026      	beq.n	80043dc <HAL_DMA_IRQHandler+0x7a>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d021      	beq.n	80043dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d107      	bne.n	80043b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0204 	bic.w	r2, r2, #4
 80043b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f003 021c 	and.w	r2, r3, #28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2104      	movs	r1, #4
 80043c4:	fa01 f202 	lsl.w	r2, r1, r2
 80043c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d071      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80043da:	e06c      	b.n	80044b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f003 031c 	and.w	r3, r3, #28
 80043e4:	2202      	movs	r2, #2
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02e      	beq.n	800444e <HAL_DMA_IRQHandler+0xec>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d029      	beq.n	800444e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 020a 	bic.w	r2, r2, #10
 8004416:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f003 021c 	and.w	r2, r3, #28
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2102      	movs	r1, #2
 800442e:	fa01 f202 	lsl.w	r2, r1, r2
 8004432:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d038      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800444c:	e033      	b.n	80044b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f003 031c 	and.w	r3, r3, #28
 8004456:	2208      	movs	r2, #8
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02a      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x156>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d025      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 020e 	bic.w	r2, r2, #14
 800447a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	f003 021c 	and.w	r2, r3, #28
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
}
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	f003 021c 	and.w	r2, r3, #28
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f202 	lsl.w	r2, r1, r2
 80044e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d108      	bne.n	8004504 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004502:	e007      	b.n	8004514 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800452e:	e148      	b.n	80047c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 813a 	beq.w	80047bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d005      	beq.n	8004560 <HAL_GPIO_Init+0x40>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d130      	bne.n	80045c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004596:	2201      	movs	r2, #1
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0201 	and.w	r2, r3, #1
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d017      	beq.n	80045fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d123      	bne.n	8004652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	08da      	lsrs	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3208      	adds	r2, #8
 8004612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	08da      	lsrs	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3208      	adds	r2, #8
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0203 	and.w	r2, r3, #3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8094 	beq.w	80047bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004694:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <HAL_GPIO_Init+0x2c0>)
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	4a51      	ldr	r2, [pc, #324]	; (80047e0 <HAL_GPIO_Init+0x2c0>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6613      	str	r3, [r2, #96]	; 0x60
 80046a0:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <HAL_GPIO_Init+0x2c0>)
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046ac:	4a4d      	ldr	r2, [pc, #308]	; (80047e4 <HAL_GPIO_Init+0x2c4>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	220f      	movs	r2, #15
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046d6:	d00d      	beq.n	80046f4 <HAL_GPIO_Init+0x1d4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a43      	ldr	r2, [pc, #268]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <HAL_GPIO_Init+0x1d0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a42      	ldr	r2, [pc, #264]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_GPIO_Init+0x1cc>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e004      	b.n	80046f6 <HAL_GPIO_Init+0x1d6>
 80046ec:	2307      	movs	r3, #7
 80046ee:	e002      	b.n	80046f6 <HAL_GPIO_Init+0x1d6>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_GPIO_Init+0x1d6>
 80046f4:	2300      	movs	r3, #0
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	f002 0203 	and.w	r2, r2, #3
 80046fc:	0092      	lsls	r2, r2, #2
 80046fe:	4093      	lsls	r3, r2
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004706:	4937      	ldr	r1, [pc, #220]	; (80047e4 <HAL_GPIO_Init+0x2c4>)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	089b      	lsrs	r3, r3, #2
 800470c:	3302      	adds	r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004738:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	43db      	mvns	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004762:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004768:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43db      	mvns	r3, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800478c:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004792:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43db      	mvns	r3, r3
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047b6:	4a0e      	ldr	r2, [pc, #56]	; (80047f0 <HAL_GPIO_Init+0x2d0>)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3301      	adds	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f aeaf 	bne.w	8004530 <HAL_GPIO_Init+0x10>
  }
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40010000 	.word	0x40010000
 80047e8:	48000400 	.word	0x48000400
 80047ec:	48000800 	.word	0x48000800
 80047f0:	40010400 	.word	0x40010400

080047f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
 8004800:	4613      	mov	r3, r2
 8004802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004804:	787b      	ldrb	r3, [r7, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004810:	e002      	b.n	8004818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004836:	887a      	ldrh	r2, [r7, #2]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43d9      	mvns	r1, r3
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	400b      	ands	r3, r1
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <HAL_PWREx_GetVoltageRange+0x18>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40007000 	.word	0x40007000

08004874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004882:	d130      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004884:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d038      	beq.n	8004904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004892:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800489a:	4a1e      	ldr	r2, [pc, #120]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2232      	movs	r2, #50	; 0x32
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0c9b      	lsrs	r3, r3, #18
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b8:	e002      	b.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	d102      	bne.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f2      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e0:	d110      	bne.n	8004904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00f      	b.n	8004906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d007      	beq.n	8004904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048fc:	4a05      	ldr	r2, [pc, #20]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40007000 	.word	0x40007000
 8004918:	20000018 	.word	0x20000018
 800491c:	431bde83 	.word	0x431bde83

08004920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f000 bc11 	b.w	8005156 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004934:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800493e:	4b9e      	ldr	r3, [pc, #632]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80e4 	beq.w	8004b1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <HAL_RCC_OscConfig+0x4c>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	f040 808b 	bne.w	8004a7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b01      	cmp	r3, #1
 8004968:	f040 8087 	bne.w	8004a7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800496c:	4b92      	ldr	r3, [pc, #584]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_OscConfig+0x64>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e3e8      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	4b8b      	ldr	r3, [pc, #556]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <HAL_RCC_OscConfig+0x7e>
 8004994:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800499c:	e005      	b.n	80049aa <HAL_RCC_OscConfig+0x8a>
 800499e:	4b86      	ldr	r3, [pc, #536]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d223      	bcs.n	80049f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fd7a 	bl	80054ac <RCC_SetFlashLatencyFromMSIRange>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e3c9      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c2:	4b7d      	ldr	r3, [pc, #500]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7c      	ldr	r2, [pc, #496]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049c8:	f043 0308 	orr.w	r3, r3, #8
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b7a      	ldr	r3, [pc, #488]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4977      	ldr	r1, [pc, #476]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e0:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	4972      	ldr	r1, [pc, #456]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
 80049f4:	e025      	b.n	8004a42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f6:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6f      	ldr	r2, [pc, #444]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 80049fc:	f043 0308 	orr.w	r3, r3, #8
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b6d      	ldr	r3, [pc, #436]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	496a      	ldr	r1, [pc, #424]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	4965      	ldr	r1, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fd3a 	bl	80054ac <RCC_SetFlashLatencyFromMSIRange>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e389      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a42:	f000 fc6f 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	495a      	ldr	r1, [pc, #360]	; (8004bbc <HAL_RCC_OscConfig+0x29c>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5e:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_OscConfig+0x2a0>)
 8004a60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a62:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_RCC_OscConfig+0x2a4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd fcf8 	bl	800245c <HAL_InitTick>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d052      	beq.n	8004b1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	e36d      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d032      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a82:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4c      	ldr	r2, [pc, #304]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fd35 	bl	80024fc <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a96:	f7fd fd31 	bl	80024fc <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e356      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab4:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004aba:	f043 0308 	orr.w	r3, r3, #8
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	493a      	ldr	r1, [pc, #232]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad2:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4935      	ldr	r1, [pc, #212]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
 8004ae6:	e01a      	b.n	8004b1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ae8:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a32      	ldr	r2, [pc, #200]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004af4:	f7fd fd02 	bl	80024fc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004afc:	f7fd fcfe 	bl	80024fc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e323      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1dc>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d073      	beq.n	8004c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_OscConfig+0x21c>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d10e      	bne.n	8004b54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d10b      	bne.n	8004b54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d063      	beq.n	8004c10 <HAL_RCC_OscConfig+0x2f0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d15f      	bne.n	8004c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e300      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCC_OscConfig+0x24c>
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e01d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x288>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x270>
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x288>
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <HAL_RCC_OscConfig+0x298>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fd fca4 	bl	80024fc <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb6:	e010      	b.n	8004bda <HAL_RCC_OscConfig+0x2ba>
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	080093b8 	.word	0x080093b8
 8004bc0:	20000018 	.word	0x20000018
 8004bc4:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc8:	f7fd fc98 	bl	80024fc <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e2bd      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bda:	4baf      	ldr	r3, [pc, #700]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x2a8>
 8004be6:	e014      	b.n	8004c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fc88 	bl	80024fc <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7fd fc84 	bl	80024fc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	; 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e2a9      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c02:	4ba5      	ldr	r3, [pc, #660]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x2d0>
 8004c0e:	e000      	b.n	8004c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d060      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_OscConfig+0x310>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b0c      	cmp	r3, #12
 8004c28:	d119      	bne.n	8004c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d116      	bne.n	8004c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c30:	4b99      	ldr	r3, [pc, #612]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_OscConfig+0x328>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e286      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b93      	ldr	r3, [pc, #588]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	4990      	ldr	r1, [pc, #576]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5c:	e040      	b.n	8004ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d023      	beq.n	8004cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c66:	4b8c      	ldr	r3, [pc, #560]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a8b      	ldr	r2, [pc, #556]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fd fc43 	bl	80024fc <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7a:	f7fd fc3f 	bl	80024fc <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e264      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c8c:	4b82      	ldr	r3, [pc, #520]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c98:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	497c      	ldr	r1, [pc, #496]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
 8004cac:	e018      	b.n	8004ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cae:	4b7a      	ldr	r3, [pc, #488]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a79      	ldr	r2, [pc, #484]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fd fc1f 	bl	80024fc <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc2:	f7fd fc1b 	bl	80024fc <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e240      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd4:	4b70      	ldr	r3, [pc, #448]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01c      	beq.n	8004d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf4:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfa:	4a67      	ldr	r2, [pc, #412]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fd fbfa 	bl	80024fc <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fd fbf6 	bl	80024fc <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e21b      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1e:	4b5e      	ldr	r3, [pc, #376]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <HAL_RCC_OscConfig+0x3ec>
 8004d2c:	e01b      	b.n	8004d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2e:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d34:	4a58      	ldr	r2, [pc, #352]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3e:	f7fd fbdd 	bl	80024fc <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d46:	f7fd fbd9 	bl	80024fc <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1fe      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d58:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ef      	bne.n	8004d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80a6 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d78:	4b47      	ldr	r3, [pc, #284]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d84:	4b44      	ldr	r3, [pc, #272]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	4a43      	ldr	r2, [pc, #268]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d90:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da0:	4b3e      	ldr	r3, [pc, #248]	; (8004e9c <HAL_RCC_OscConfig+0x57c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d118      	bne.n	8004dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x57c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a3a      	ldr	r2, [pc, #232]	; (8004e9c <HAL_RCC_OscConfig+0x57c>)
 8004db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db8:	f7fd fba0 	bl	80024fc <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc0:	f7fd fb9c 	bl	80024fc <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e1c1      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd2:	4b32      	ldr	r3, [pc, #200]	; (8004e9c <HAL_RCC_OscConfig+0x57c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d108      	bne.n	8004df8 <HAL_RCC_OscConfig+0x4d8>
 8004de6:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004df6:	e024      	b.n	8004e42 <HAL_RCC_OscConfig+0x522>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d110      	bne.n	8004e22 <HAL_RCC_OscConfig+0x502>
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e10:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e20:	e00f      	b.n	8004e42 <HAL_RCC_OscConfig+0x522>
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e32:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	f023 0304 	bic.w	r3, r3, #4
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fd fb57 	bl	80024fc <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fd fb53 	bl	80024fc <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e176      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_OscConfig+0x578>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ed      	beq.n	8004e52 <HAL_RCC_OscConfig+0x532>
 8004e76:	e01a      	b.n	8004eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fd fb40 	bl	80024fc <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e7e:	e00f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7fd fb3c 	bl	80024fc <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d906      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e15f      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea0:	4baa      	ldr	r3, [pc, #680]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e8      	bne.n	8004e80 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eae:	7ffb      	ldrb	r3, [r7, #31]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb4:	4ba5      	ldr	r3, [pc, #660]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4aa4      	ldr	r2, [pc, #656]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d03c      	beq.n	8004f46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ed4:	4b9d      	ldr	r3, [pc, #628]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eda:	4a9c      	ldr	r2, [pc, #624]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fd fb0a 	bl	80024fc <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eec:	f7fd fb06 	bl	80024fc <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e12b      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004efe:	4b93      	ldr	r3, [pc, #588]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ef      	beq.n	8004eec <HAL_RCC_OscConfig+0x5cc>
 8004f0c:	e01b      	b.n	8004f46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f0e:	4b8f      	ldr	r3, [pc, #572]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f14:	4a8d      	ldr	r2, [pc, #564]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fd faed 	bl	80024fc <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f26:	f7fd fae9 	bl	80024fc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e10e      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f38:	4b84      	ldr	r3, [pc, #528]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ef      	bne.n	8004f26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8102 	beq.w	8005154 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	f040 80c5 	bne.w	80050e4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f5a:	4b7c      	ldr	r3, [pc, #496]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 0203 	and.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d12c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d123      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d113      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	3b01      	subs	r3, #1
 8004fae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d067      	beq.n	8005098 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d062      	beq.n	8005094 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fce:	4b5f      	ldr	r3, [pc, #380]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0bb      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fde:	4b5b      	ldr	r3, [pc, #364]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8004fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fea:	f7fd fa87 	bl	80024fc <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fd fa83 	bl	80024fc <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0a8      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005004:	4b51      	ldr	r3, [pc, #324]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005010:	4b4e      	ldr	r3, [pc, #312]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	4b4e      	ldr	r3, [pc, #312]	; (8005150 <HAL_RCC_OscConfig+0x830>)
 8005016:	4013      	ands	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005020:	3a01      	subs	r2, #1
 8005022:	0112      	lsls	r2, r2, #4
 8005024:	4311      	orrs	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800502a:	0212      	lsls	r2, r2, #8
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005032:	0852      	lsrs	r2, r2, #1
 8005034:	3a01      	subs	r2, #1
 8005036:	0552      	lsls	r2, r2, #21
 8005038:	4311      	orrs	r1, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800503e:	0852      	lsrs	r2, r2, #1
 8005040:	3a01      	subs	r2, #1
 8005042:	0652      	lsls	r2, r2, #25
 8005044:	4311      	orrs	r1, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800504a:	06d2      	lsls	r2, r2, #27
 800504c:	430a      	orrs	r2, r1
 800504e:	493f      	ldr	r1, [pc, #252]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005054:	4b3d      	ldr	r3, [pc, #244]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3c      	ldr	r2, [pc, #240]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 800505a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005060:	4b3a      	ldr	r3, [pc, #232]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a39      	ldr	r2, [pc, #228]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800506a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800506c:	f7fd fa46 	bl	80024fc <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005074:	f7fd fa42 	bl	80024fc <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e067      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005092:	e05f      	b.n	8005154 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e05e      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005098:	4b2c      	ldr	r3, [pc, #176]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d157      	bne.n	8005154 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050a4:	4b29      	ldr	r3, [pc, #164]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b0:	4b26      	ldr	r3, [pc, #152]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050bc:	f7fd fa1e 	bl	80024fc <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fd fa1a 	bl	80024fc <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e03f      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
 80050e2:	e037      	b.n	8005154 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d02d      	beq.n	8005146 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b18      	ldr	r3, [pc, #96]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a17      	ldr	r2, [pc, #92]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4a11      	ldr	r2, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005108:	f023 0303 	bic.w	r3, r3, #3
 800510c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 8005114:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fd f9ed 	bl	80024fc <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fd f9e9 	bl	80024fc <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e00e      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <HAL_RCC_OscConfig+0x82c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <HAL_RCC_OscConfig+0x806>
 8005144:	e006      	b.n	8005154 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e005      	b.n	8005156 <HAL_RCC_OscConfig+0x836>
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop

08005160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0c8      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005174:	4b66      	ldr	r3, [pc, #408]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d910      	bls.n	80051a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b63      	ldr	r3, [pc, #396]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 0207 	bic.w	r2, r3, #7
 800518a:	4961      	ldr	r1, [pc, #388]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b5f      	ldr	r3, [pc, #380]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0b0      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d04c      	beq.n	800524a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b8:	4b56      	ldr	r3, [pc, #344]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d121      	bne.n	8005208 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e09e      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d0:	4b50      	ldr	r3, [pc, #320]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d115      	bne.n	8005208 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e092      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051e8:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e086      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f8:	4b46      	ldr	r3, [pc, #280]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e07e      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f023 0203 	bic.w	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	493f      	ldr	r1, [pc, #252]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521a:	f7fd f96f 	bl	80024fc <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005220:	e00a      	b.n	8005238 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005222:	f7fd f96b 	bl	80024fc <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e066      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 020c 	and.w	r2, r3, #12
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	429a      	cmp	r2, r3
 8005248:	d1eb      	bne.n	8005222 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005256:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	492c      	ldr	r1, [pc, #176]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d210      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 0207 	bic.w	r2, r3, #7
 800527e:	4924      	ldr	r1, [pc, #144]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b22      	ldr	r3, [pc, #136]	; (8005310 <HAL_RCC_ClockConfig+0x1b0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e036      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4918      	ldr	r1, [pc, #96]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4910      	ldr	r1, [pc, #64]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052d6:	f000 f825 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 80052da:	4602      	mov	r2, r0
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <HAL_RCC_ClockConfig+0x1b4>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	490c      	ldr	r1, [pc, #48]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	5ccb      	ldrb	r3, [r1, r3]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fd f8ae 	bl	800245c <HAL_InitTick>
 8005300:	4603      	mov	r3, r0
 8005302:	72fb      	strb	r3, [r7, #11]

  return status;
 8005304:	7afb      	ldrb	r3, [r7, #11]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40022000 	.word	0x40022000
 8005314:	40021000 	.word	0x40021000
 8005318:	080093b8 	.word	0x080093b8
 800531c:	20000018 	.word	0x20000018
 8005320:	2000001c 	.word	0x2000001c

08005324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005324:	b480      	push	{r7}
 8005326:	b089      	sub	sp, #36	; 0x24
 8005328:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005332:	4b3e      	ldr	r3, [pc, #248]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800533c:	4b3b      	ldr	r3, [pc, #236]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x34>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d121      	bne.n	8005396 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d11e      	bne.n	8005396 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005358:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005364:	4b31      	ldr	r3, [pc, #196]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 8005366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e005      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005374:	4b2d      	ldr	r3, [pc, #180]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005380:	4a2b      	ldr	r2, [pc, #172]	; (8005430 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005388:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d102      	bne.n	80053a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <HAL_RCC_GetSysClockFreq+0x110>)
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e004      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053a8:	4b23      	ldr	r3, [pc, #140]	; (8005438 <HAL_RCC_GetSysClockFreq+0x114>)
 80053aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0c      	cmp	r3, #12
 80053b0:	d134      	bne.n	800541c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053b2:	4b1e      	ldr	r3, [pc, #120]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d003      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0xa6>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d003      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0xac>
 80053c8:	e005      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053ca:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <HAL_RCC_GetSysClockFreq+0x110>)
 80053cc:	617b      	str	r3, [r7, #20]
      break;
 80053ce:	e005      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_GetSysClockFreq+0x114>)
 80053d2:	617b      	str	r3, [r7, #20]
      break;
 80053d4:	e002      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	617b      	str	r3, [r7, #20]
      break;
 80053da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053dc:	4b13      	ldr	r3, [pc, #76]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	3301      	adds	r3, #1
 80053e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	fb02 f203 	mul.w	r2, r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_RCC_GetSysClockFreq+0x108>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	0e5b      	lsrs	r3, r3, #25
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	3301      	adds	r3, #1
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800541c:	69bb      	ldr	r3, [r7, #24]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3724      	adds	r7, #36	; 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
 8005430:	080093d0 	.word	0x080093d0
 8005434:	00f42400 	.word	0x00f42400
 8005438:	007a1200 	.word	0x007a1200

0800543c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005440:	4b03      	ldr	r3, [pc, #12]	; (8005450 <HAL_RCC_GetHCLKFreq+0x14>)
 8005442:	681b      	ldr	r3, [r3, #0]
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20000018 	.word	0x20000018

08005454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005458:	f7ff fff0 	bl	800543c <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b06      	ldr	r3, [pc, #24]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4904      	ldr	r1, [pc, #16]	; (800547c <HAL_RCC_GetPCLK1Freq+0x28>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000
 800547c:	080093c8 	.word	0x080093c8

08005480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005484:	f7ff ffda 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	0adb      	lsrs	r3, r3, #11
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4904      	ldr	r1, [pc, #16]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	080093c8 	.word	0x080093c8

080054ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054b8:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054c4:	f7ff f9c8 	bl	8004858 <HAL_PWREx_GetVoltageRange>
 80054c8:	6178      	str	r0, [r7, #20]
 80054ca:	e014      	b.n	80054f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	4a24      	ldr	r2, [pc, #144]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d6:	6593      	str	r3, [r2, #88]	; 0x58
 80054d8:	4b22      	ldr	r3, [pc, #136]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054e4:	f7ff f9b8 	bl	8004858 <HAL_PWREx_GetVoltageRange>
 80054e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054ea:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fc:	d10b      	bne.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d919      	bls.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2ba0      	cmp	r3, #160	; 0xa0
 8005508:	d902      	bls.n	8005510 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800550a:	2302      	movs	r3, #2
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	e013      	b.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005510:	2301      	movs	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e010      	b.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d902      	bls.n	8005522 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800551c:	2303      	movs	r3, #3
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	e00a      	b.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b80      	cmp	r3, #128	; 0x80
 8005526:	d102      	bne.n	800552e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005528:	2302      	movs	r3, #2
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e004      	b.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b70      	cmp	r3, #112	; 0x70
 8005532:	d101      	bne.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005534:	2301      	movs	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f023 0207 	bic.w	r2, r3, #7
 8005540:	4909      	ldr	r1, [pc, #36]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000
 8005568:	40022000 	.word	0x40022000

0800556c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005574:	2300      	movs	r3, #0
 8005576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005578:	2300      	movs	r3, #0
 800557a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005584:	2b00      	cmp	r3, #0
 8005586:	d031      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005590:	d01a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005592:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005596:	d814      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800559c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055a0:	d10f      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80055a2:	4bac      	ldr	r3, [pc, #688]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4aab      	ldr	r2, [pc, #684]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055ae:	e00c      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f9cc 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c0:	e003      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	74fb      	strb	r3, [r7, #19]
      break;
 80055c6:	e000      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80055c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055d0:	4ba0      	ldr	r3, [pc, #640]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	499d      	ldr	r1, [pc, #628]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055e6:	e001      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8099 	beq.w	800572c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055fe:	4b95      	ldr	r3, [pc, #596]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005614:	4b8f      	ldr	r3, [pc, #572]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	4a8e      	ldr	r2, [pc, #568]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800561a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561e:	6593      	str	r3, [r2, #88]	; 0x58
 8005620:	4b8c      	ldr	r3, [pc, #560]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562c:	2301      	movs	r3, #1
 800562e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005630:	4b89      	ldr	r3, [pc, #548]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a88      	ldr	r2, [pc, #544]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800563c:	f7fc ff5e 	bl	80024fc <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005642:	e009      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fc ff5a 	bl	80024fc <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d902      	bls.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	74fb      	strb	r3, [r7, #19]
        break;
 8005656:	e005      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005658:	4b7f      	ldr	r3, [pc, #508]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ef      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d155      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800566a:	4b7a      	ldr	r3, [pc, #488]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005674:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01e      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	429a      	cmp	r2, r3
 8005684:	d019      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005686:	4b73      	ldr	r3, [pc, #460]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005690:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005692:	4b70      	ldr	r3, [pc, #448]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005698:	4a6e      	ldr	r2, [pc, #440]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800569a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056a2:	4b6c      	ldr	r3, [pc, #432]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	4a6a      	ldr	r2, [pc, #424]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056b2:	4a68      	ldr	r2, [pc, #416]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d016      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fc ff1a 	bl	80024fc <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ca:	e00b      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fc ff16 	bl	80024fc <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d902      	bls.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	74fb      	strb	r3, [r7, #19]
            break;
 80056e2:	e006      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e4:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ec      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80056f2:	7cfb      	ldrb	r3, [r7, #19]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f8:	4b56      	ldr	r3, [pc, #344]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005706:	4953      	ldr	r1, [pc, #332]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800570e:	e004      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
 8005714:	e001      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571a:	7c7b      	ldrb	r3, [r7, #17]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d105      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005720:	4b4c      	ldr	r3, [pc, #304]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	4a4b      	ldr	r2, [pc, #300]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005738:	4b46      	ldr	r3, [pc, #280]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	4943      	ldr	r1, [pc, #268]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800575a:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005760:	f023 020c 	bic.w	r2, r3, #12
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	493a      	ldr	r1, [pc, #232]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800577c:	4b35      	ldr	r3, [pc, #212]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	4932      	ldr	r1, [pc, #200]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800579e:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	4929      	ldr	r1, [pc, #164]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c0:	4b24      	ldr	r3, [pc, #144]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4921      	ldr	r1, [pc, #132]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4918      	ldr	r1, [pc, #96]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005804:	4b13      	ldr	r3, [pc, #76]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	4910      	ldr	r1, [pc, #64]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02c      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	4907      	ldr	r1, [pc, #28]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005844:	d10a      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005846:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a02      	ldr	r2, [pc, #8]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800584c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005850:	60d3      	str	r3, [r2, #12]
 8005852:	e015      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005854:	40021000 	.word	0x40021000
 8005858:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005864:	d10c      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	2101      	movs	r1, #1
 800586c:	4618      	mov	r0, r3
 800586e:	f000 f871 	bl	8005954 <RCCEx_PLLSAI1_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005876:	7cfb      	ldrb	r3, [r7, #19]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800587c:	7cfb      	ldrb	r3, [r7, #19]
 800587e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d028      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800588c:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	492d      	ldr	r1, [pc, #180]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058aa:	d106      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b28      	ldr	r3, [pc, #160]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a27      	ldr	r2, [pc, #156]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]
 80058b8:	e011      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058c2:	d10c      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	2101      	movs	r1, #1
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f842 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80058da:	7cfb      	ldrb	r3, [r7, #19]
 80058dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01c      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ea:	4b19      	ldr	r3, [pc, #100]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f8:	4915      	ldr	r1, [pc, #84]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005908:	d10c      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2102      	movs	r1, #2
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f81f 	bl	8005954 <RCCEx_PLLSAI1_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593e:	4904      	ldr	r1, [pc, #16]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005946:	7cbb      	ldrb	r3, [r7, #18]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005962:	4b74      	ldr	r3, [pc, #464]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800596e:	4b71      	ldr	r3, [pc, #452]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d10d      	bne.n	800599a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
       ||
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005986:	4b6b      	ldr	r3, [pc, #428]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
       ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d047      	beq.n	8005a2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
 800599e:	e044      	b.n	8005a2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d018      	beq.n	80059da <RCCEx_PLLSAI1_Config+0x86>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d825      	bhi.n	80059f8 <RCCEx_PLLSAI1_Config+0xa4>
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d002      	beq.n	80059b6 <RCCEx_PLLSAI1_Config+0x62>
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d009      	beq.n	80059c8 <RCCEx_PLLSAI1_Config+0x74>
 80059b4:	e020      	b.n	80059f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059b6:	4b5f      	ldr	r3, [pc, #380]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d11d      	bne.n	80059fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c6:	e01a      	b.n	80059fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059c8:	4b5a      	ldr	r3, [pc, #360]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d8:	e013      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059da:	4b56      	ldr	r3, [pc, #344]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10f      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059e6:	4b53      	ldr	r3, [pc, #332]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059f6:	e006      	b.n	8005a06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	e004      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a0e:	4b49      	ldr	r3, [pc, #292]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	430b      	orrs	r3, r1
 8005a24:	4943      	ldr	r1, [pc, #268]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d17c      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a30:	4b40      	ldr	r3, [pc, #256]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a3f      	ldr	r2, [pc, #252]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fc fd5e 	bl	80024fc <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a44:	f7fc fd5a 	bl	80024fc <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
        break;
 8005a56:	e005      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1ef      	bne.n	8005a44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d15f      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d110      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a70:	4b30      	ldr	r3, [pc, #192]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6892      	ldr	r2, [r2, #8]
 8005a80:	0211      	lsls	r1, r2, #8
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68d2      	ldr	r2, [r2, #12]
 8005a86:	06d2      	lsls	r2, r2, #27
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	492a      	ldr	r1, [pc, #168]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
 8005a90:	e027      	b.n	8005ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d112      	bne.n	8005abe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a98:	4b26      	ldr	r3, [pc, #152]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6892      	ldr	r2, [r2, #8]
 8005aa8:	0211      	lsls	r1, r2, #8
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6912      	ldr	r2, [r2, #16]
 8005aae:	0852      	lsrs	r2, r2, #1
 8005ab0:	3a01      	subs	r2, #1
 8005ab2:	0552      	lsls	r2, r2, #21
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	491f      	ldr	r1, [pc, #124]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	610b      	str	r3, [r1, #16]
 8005abc:	e011      	b.n	8005ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6892      	ldr	r2, [r2, #8]
 8005ace:	0211      	lsls	r1, r2, #8
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6952      	ldr	r2, [r2, #20]
 8005ad4:	0852      	lsrs	r2, r2, #1
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	0652      	lsls	r2, r2, #25
 8005ada:	430a      	orrs	r2, r1
 8005adc:	4915      	ldr	r1, [pc, #84]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005aec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fc fd05 	bl	80024fc <HAL_GetTick>
 8005af2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005af4:	e009      	b.n	8005b0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005af6:	f7fc fd01 	bl	80024fc <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d902      	bls.n	8005b0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	73fb      	strb	r3, [r7, #15]
          break;
 8005b08:	e005      	b.n	8005b16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0ef      	beq.n	8005af6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000

08005b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e095      	b.n	8005c76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d108      	bne.n	8005b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5a:	d009      	beq.n	8005b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	61da      	str	r2, [r3, #28]
 8005b62:	e005      	b.n	8005b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc f8d8 	bl	8001d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb0:	d902      	bls.n	8005bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e002      	b.n	8005bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bc6:	d007      	beq.n	8005bd8 <HAL_SPI_Init+0xa0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	ea42 0103 	orr.w	r1, r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	f003 0204 	and.w	r2, r3, #4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c54:	ea42 0103 	orr.w	r1, r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_TransmitReceive_IT+0x20>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e091      	b.n	8005dc4 <HAL_SPI_TransmitReceive_IT+0x144>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cb6:	7dbb      	ldrb	r3, [r7, #22]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d00d      	beq.n	8005cd8 <HAL_SPI_TransmitReceive_IT+0x58>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc2:	d106      	bne.n	8005cd2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_SPI_TransmitReceive_IT+0x52>
 8005ccc:	7dbb      	ldrb	r3, [r7, #22]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cd6:	e070      	b.n	8005dba <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_SPI_TransmitReceive_IT+0x6a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_SPI_TransmitReceive_IT+0x6a>
 8005ce4:	887b      	ldrh	r3, [r7, #2]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cee:	e064      	b.n	8005dba <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d003      	beq.n	8005d04 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2205      	movs	r2, #5
 8005d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	887a      	ldrh	r2, [r7, #2]
 8005d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	887a      	ldrh	r2, [r7, #2]
 8005d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	887a      	ldrh	r2, [r7, #2]
 8005d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	887a      	ldrh	r2, [r7, #2]
 8005d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d3a:	d906      	bls.n	8005d4a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005d40:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005d46:	651a      	str	r2, [r3, #80]	; 0x50
 8005d48:	e005      	b.n	8005d56 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005d4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a22      	ldr	r2, [pc, #136]	; (8005ddc <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005d54:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d5e:	d802      	bhi.n	8005d66 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d908      	bls.n	8005d78 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	e007      	b.n	8005d88 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005d96:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d008      	beq.n	8005db8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e000      	b.n	8005dba <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005db8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	08006183 	.word	0x08006183
 8005dd4:	080061e9 	.word	0x080061e9
 8005dd8:	08006033 	.word	0x08006033
 8005ddc:	080060f1 	.word	0x080060f1

08005de0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	099b      	lsrs	r3, r3, #6
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
    return;
 8005e22:	e0d7      	b.n	8005fd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <HAL_SPI_IRQHandler+0x66>
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
    return;
 8005e44:	e0c6      	b.n	8005fd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10c      	bne.n	8005e6c <HAL_SPI_IRQHandler+0x8c>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	0a1b      	lsrs	r3, r3, #8
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80b4 	beq.w	8005fd4 <HAL_SPI_IRQHandler+0x1f4>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80ad 	beq.w	8005fd4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	099b      	lsrs	r3, r3, #6
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d023      	beq.n	8005ece <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d011      	beq.n	8005eb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	e00b      	b.n	8005ece <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	693b      	ldr	r3, [r7, #16]
        return;
 8005ecc:	e082      	b.n	8005fd4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d014      	beq.n	8005f04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	f043 0208 	orr.w	r2, r3, #8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d04f      	beq.n	8005fd2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <HAL_SPI_IRQHandler+0x17e>
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d034      	beq.n	8005fc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0203 	bic.w	r2, r2, #3
 8005f6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d011      	beq.n	8005f9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	4a18      	ldr	r2, [pc, #96]	; (8005fdc <HAL_SPI_IRQHandler+0x1fc>)
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe f9ac 	bl	80042e0 <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <HAL_SPI_IRQHandler+0x1fc>)
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe f996 	bl	80042e0 <HAL_DMA_Abort_IT>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005fc6:	e003      	b.n	8005fd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f813 	bl	8005ff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005fce:	e000      	b.n	8005fd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005fd0:	bf00      	nop
    return;
 8005fd2:	bf00      	nop
  }
}
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	08006009 	.word	0x08006009

08005fe0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff ffe5 	bl	8005ff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d923      	bls.n	800608e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	b292      	uxth	r2, r2
 8006052:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	1c9a      	adds	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b02      	subs	r3, #2
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d11f      	bne.n	80060bc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	e016      	b.n	80060bc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f103 020c 	add.w	r2, r3, #12
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10f      	bne.n	80060e8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa14 	bl	8006510 <SPI_CloseRxTx_ISR>
    }
  }
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d912      	bls.n	8006128 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	1c9a      	adds	r2, r3, #2
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b02      	subs	r3, #2
 8006120:	b29a      	uxth	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006126:	e012      	b.n	800614e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d110      	bne.n	800617a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006166:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d102      	bne.n	800617a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f9cb 	bl	8006510 <SPI_CloseRxTx_ISR>
    }
  }
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	b292      	uxth	r2, r2
 8006196:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f998 	bl	8006510 <SPI_CloseRxTx_ISR>
    }
  }
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d110      	bne.n	8006240 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800622c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f968 	bl	8006510 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006258:	f7fc f950 	bl	80024fc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	4413      	add	r3, r2
 8006266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006268:	f7fc f948 	bl	80024fc <HAL_GetTick>
 800626c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800626e:	4b39      	ldr	r3, [pc, #228]	; (8006354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	015b      	lsls	r3, r3, #5
 8006274:	0d1b      	lsrs	r3, r3, #20
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	fb02 f303 	mul.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800627e:	e054      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d050      	beq.n	800632a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006288:	f7fc f938 	bl	80024fc <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	429a      	cmp	r2, r3
 8006296:	d902      	bls.n	800629e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d13d      	bne.n	800631a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b6:	d111      	bne.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c0:	d004      	beq.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ca:	d107      	bne.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d10f      	bne.n	8006306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e017      	b.n	800634a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3b01      	subs	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4013      	ands	r3, r2
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	429a      	cmp	r2, r3
 8006346:	d19b      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000018 	.word	0x20000018

08006358 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800636a:	f7fc f8c7 	bl	80024fc <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	4413      	add	r3, r2
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800637a:	f7fc f8bf 	bl	80024fc <HAL_GetTick>
 800637e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	00da      	lsls	r2, r3, #3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	0d1b      	lsrs	r3, r3, #20
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	fb02 f303 	mul.w	r3, r2, r3
 800639e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063a0:	e060      	b.n	8006464 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063a8:	d107      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d050      	beq.n	8006464 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063c2:	f7fc f89b 	bl	80024fc <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d902      	bls.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d13d      	bne.n	8006454 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f0:	d111      	bne.n	8006416 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fa:	d004      	beq.n	8006406 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006404:	d107      	bne.n	8006416 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006414:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641e:	d10f      	bne.n	8006440 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800643e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e010      	b.n	8006476 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	3b01      	subs	r3, #1
 8006462:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d196      	bne.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000018 	.word	0x20000018

08006484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff ff5b 	bl	8006358 <SPI_WaitFifoStateUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e027      	b.n	8006508 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	2180      	movs	r1, #128	; 0x80
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff fec0 	bl	8006248 <SPI_WaitFlagStateUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e014      	b.n	8006508 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff ff34 	bl	8006358 <SPI_WaitFifoStateUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fa:	f043 0220 	orr.w	r2, r3, #32
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e000      	b.n	8006508 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006518:	f7fb fff0 	bl	80024fc <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0220 	bic.w	r2, r2, #32
 800652c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	2164      	movs	r1, #100	; 0x64
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff ffa6 	bl	8006484 <SPI_EndRxTxTransaction>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654e:	2b00      	cmp	r3, #0
 8006550:	d115      	bne.n	800657e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b04      	cmp	r3, #4
 800655c:	d107      	bne.n	800656e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff fd3a 	bl	8005fe0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800656c:	e00e      	b.n	800658c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fa f8d4 	bl	8000724 <HAL_SPI_TxRxCpltCallback>
}
 800657c:	e006      	b.n	800658c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fd34 	bl	8005ff4 <HAL_SPI_ErrorCallback>
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d001      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e03b      	b.n	8006624 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_TIM_Base_Start_IT+0x9c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x4e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d004      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x4e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <HAL_TIM_Base_Start_IT+0xa0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d115      	bne.n	800660e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	4b13      	ldr	r3, [pc, #76]	; (8006638 <HAL_TIM_Base_Start_IT+0xa4>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b06      	cmp	r3, #6
 80065f2:	d015      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x8c>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fa:	d011      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	e008      	b.n	8006620 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e000      	b.n	8006622 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40014000 	.word	0x40014000
 8006638:	00010007 	.word	0x00010007

0800663c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	f241 1311 	movw	r3, #4369	; 0x1111
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <HAL_TIM_Base_Stop_IT+0x48>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	f240 4344 	movw	r3, #1092	; 0x444
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <HAL_TIM_Base_Stop_IT+0x48>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e049      	b.n	8006740 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fb fb89 	bl	8001dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f000 fddb 	bl	8007294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <HAL_TIM_PWM_Start_IT+0x28>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	bf14      	ite	ne
 8006768:	2301      	movne	r3, #1
 800676a:	2300      	moveq	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e03c      	b.n	80067ea <HAL_TIM_PWM_Start_IT+0xa2>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d109      	bne.n	800678a <HAL_TIM_PWM_Start_IT+0x42>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	bf14      	ite	ne
 8006782:	2301      	movne	r3, #1
 8006784:	2300      	moveq	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e02f      	b.n	80067ea <HAL_TIM_PWM_Start_IT+0xa2>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d109      	bne.n	80067a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	e022      	b.n	80067ea <HAL_TIM_PWM_Start_IT+0xa2>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b0c      	cmp	r3, #12
 80067a8:	d109      	bne.n	80067be <HAL_TIM_PWM_Start_IT+0x76>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e015      	b.n	80067ea <HAL_TIM_PWM_Start_IT+0xa2>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start_IT+0x90>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e008      	b.n	80067ea <HAL_TIM_PWM_Start_IT+0xa2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e0c9      	b.n	8006986 <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_PWM_Start_IT+0xba>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006800:	e023      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x102>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d104      	bne.n	8006812 <HAL_TIM_PWM_Start_IT+0xca>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006810:	e01b      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x102>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d104      	bne.n	8006822 <HAL_TIM_PWM_Start_IT+0xda>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006820:	e013      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x102>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b0c      	cmp	r3, #12
 8006826:	d104      	bne.n	8006832 <HAL_TIM_PWM_Start_IT+0xea>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006830:	e00b      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x102>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b10      	cmp	r3, #16
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start_IT+0xfa>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006840:	e003      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x102>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b0c      	cmp	r3, #12
 800684e:	d841      	bhi.n	80068d4 <HAL_TIM_PWM_Start_IT+0x18c>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <HAL_TIM_PWM_Start_IT+0x110>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800688d 	.word	0x0800688d
 800685c:	080068d5 	.word	0x080068d5
 8006860:	080068d5 	.word	0x080068d5
 8006864:	080068d5 	.word	0x080068d5
 8006868:	0800689f 	.word	0x0800689f
 800686c:	080068d5 	.word	0x080068d5
 8006870:	080068d5 	.word	0x080068d5
 8006874:	080068d5 	.word	0x080068d5
 8006878:	080068b1 	.word	0x080068b1
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068d5 	.word	0x080068d5
 8006884:	080068d5 	.word	0x080068d5
 8006888:	080068c3 	.word	0x080068c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0202 	orr.w	r2, r2, #2
 800689a:	60da      	str	r2, [r3, #12]
      break;
 800689c:	e01d      	b.n	80068da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0204 	orr.w	r2, r2, #4
 80068ac:	60da      	str	r2, [r3, #12]
      break;
 80068ae:	e014      	b.n	80068da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0208 	orr.w	r2, r2, #8
 80068be:	60da      	str	r2, [r3, #12]
      break;
 80068c0:	e00b      	b.n	80068da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0210 	orr.w	r2, r2, #16
 80068d0:	60da      	str	r2, [r3, #12]
      break;
 80068d2:	e002      	b.n	80068da <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
      break;
 80068d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d151      	bne.n	8006984 <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2201      	movs	r2, #1
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 ffb5 	bl	8007858 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a27      	ldr	r2, [pc, #156]	; (8006990 <HAL_TIM_PWM_Start_IT+0x248>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIM_PWM_Start_IT+0x1c4>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a25      	ldr	r2, [pc, #148]	; (8006994 <HAL_TIM_PWM_Start_IT+0x24c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_PWM_Start_IT+0x1c4>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a24      	ldr	r2, [pc, #144]	; (8006998 <HAL_TIM_PWM_Start_IT+0x250>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <HAL_TIM_PWM_Start_IT+0x1c8>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a19      	ldr	r2, [pc, #100]	; (8006990 <HAL_TIM_PWM_Start_IT+0x248>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_TIM_PWM_Start_IT+0x1fc>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006938:	d004      	beq.n	8006944 <HAL_TIM_PWM_Start_IT+0x1fc>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a15      	ldr	r2, [pc, #84]	; (8006994 <HAL_TIM_PWM_Start_IT+0x24c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d115      	bne.n	8006970 <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	4b14      	ldr	r3, [pc, #80]	; (800699c <HAL_TIM_PWM_Start_IT+0x254>)
 800694c:	4013      	ands	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d015      	beq.n	8006982 <HAL_TIM_PWM_Start_IT+0x23a>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695c:	d011      	beq.n	8006982 <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	e008      	b.n	8006982 <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e000      	b.n	8006984 <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	00010007 	.word	0x00010007

080069a0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b0c      	cmp	r3, #12
 80069b2:	d841      	bhi.n	8006a38 <HAL_TIM_PWM_Stop_IT+0x98>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069f1 	.word	0x080069f1
 80069c0:	08006a39 	.word	0x08006a39
 80069c4:	08006a39 	.word	0x08006a39
 80069c8:	08006a39 	.word	0x08006a39
 80069cc:	08006a03 	.word	0x08006a03
 80069d0:	08006a39 	.word	0x08006a39
 80069d4:	08006a39 	.word	0x08006a39
 80069d8:	08006a39 	.word	0x08006a39
 80069dc:	08006a15 	.word	0x08006a15
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a39 	.word	0x08006a39
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006a27 	.word	0x08006a27
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0202 	bic.w	r2, r2, #2
 80069fe:	60da      	str	r2, [r3, #12]
      break;
 8006a00:	e01d      	b.n	8006a3e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0204 	bic.w	r2, r2, #4
 8006a10:	60da      	str	r2, [r3, #12]
      break;
 8006a12:	e014      	b.n	8006a3e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0208 	bic.w	r2, r2, #8
 8006a22:	60da      	str	r2, [r3, #12]
      break;
 8006a24:	e00b      	b.n	8006a3e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0210 	bic.w	r2, r2, #16
 8006a34:	60da      	str	r2, [r3, #12]
      break;
 8006a36:	e002      	b.n	8006a3e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d176      	bne.n	8006b32 <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 ff03 	bl	8007858 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a39      	ldr	r2, [pc, #228]	; (8006b3c <HAL_TIM_PWM_Stop_IT+0x19c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_TIM_PWM_Stop_IT+0xd0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a37      	ldr	r2, [pc, #220]	; (8006b40 <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_TIM_PWM_Stop_IT+0xd0>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a36      	ldr	r2, [pc, #216]	; (8006b44 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d101      	bne.n	8006a74 <HAL_TIM_PWM_Stop_IT+0xd4>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d017      	beq.n	8006aaa <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <HAL_TIM_PWM_Stop_IT+0x10a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	f240 4344 	movw	r3, #1092	; 0x444
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d107      	bne.n	8006aaa <HAL_TIM_PWM_Stop_IT+0x10a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10f      	bne.n	8006ada <HAL_TIM_PWM_Stop_IT+0x13a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	f240 4344 	movw	r3, #1092	; 0x444
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_PWM_Stop_IT+0x13a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Stop_IT+0x14a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae8:	e023      	b.n	8006b32 <HAL_TIM_PWM_Stop_IT+0x192>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_PWM_Stop_IT+0x15a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	e01b      	b.n	8006b32 <HAL_TIM_PWM_Stop_IT+0x192>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Stop_IT+0x16a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b08:	e013      	b.n	8006b32 <HAL_TIM_PWM_Stop_IT+0x192>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Stop_IT+0x17a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b18:	e00b      	b.n	8006b32 <HAL_TIM_PWM_Stop_IT+0x192>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Stop_IT+0x18a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b28:	e003      	b.n	8006b32 <HAL_TIM_PWM_Stop_IT+0x192>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40014000 	.word	0x40014000
 8006b44:	40014400 	.word	0x40014400

08006b48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e097      	b.n	8006c8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fb f957 	bl	8001e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f000 fb79 	bl	8007294 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006be8:	f023 030c 	bic.w	r3, r3, #12
 8006bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	4313      	orrs	r3, r2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	011a      	lsls	r2, r3, #4
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	031b      	lsls	r3, r3, #12
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d110      	bne.n	8006ce6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d102      	bne.n	8006cd0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cca:	7b7b      	ldrb	r3, [r7, #13]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d001      	beq.n	8006cd4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e089      	b.n	8006de8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce4:	e031      	b.n	8006d4a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d110      	bne.n	8006d0e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d102      	bne.n	8006cf8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cf2:	7b3b      	ldrb	r3, [r7, #12]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e075      	b.n	8006de8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d0c:	e01d      	b.n	8006d4a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d108      	bne.n	8006d26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d105      	bne.n	8006d26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d1a:	7b7b      	ldrb	r3, [r7, #13]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d102      	bne.n	8006d26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d20:	7b3b      	ldrb	r3, [r7, #12]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d001      	beq.n	8006d2a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e05e      	b.n	8006de8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d010      	beq.n	8006d78 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006d56:	e01f      	b.n	8006d98 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fd79 	bl	8007858 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0202 	orr.w	r2, r2, #2
 8006d74:	60da      	str	r2, [r3, #12]
      break;
 8006d76:	e02e      	b.n	8006dd6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	2104      	movs	r1, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fd69 	bl	8007858 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0204 	orr.w	r2, r2, #4
 8006d94:	60da      	str	r2, [r3, #12]
      break;
 8006d96:	e01e      	b.n	8006dd6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fd59 	bl	8007858 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2201      	movs	r2, #1
 8006dac:	2104      	movs	r1, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fd52 	bl	8007858 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0202 	orr.w	r2, r2, #2
 8006dc2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0204 	orr.w	r2, r2, #4
 8006dd2:	60da      	str	r2, [r3, #12]
      break;
 8006dd4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0201 	orr.w	r2, r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d122      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0202 	mvn.w	r2, #2
 8006e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fa f990 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa0c 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa13 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d122      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d11b      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0204 	mvn.w	r2, #4
 8006e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fa f966 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8006e8c:	e005      	b.n	8006e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9e2 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f9e9 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d122      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d11b      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0208 	mvn.w	r2, #8
 8006ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fa f93c 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f9b8 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9bf 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	d122      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	d11b      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0210 	mvn.w	r2, #16
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa f912 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f98e 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f995 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d10e      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d107      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0201 	mvn.w	r2, #1
 8006f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fa f904 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7e:	2b80      	cmp	r3, #128	; 0x80
 8006f80:	d10e      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d107      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fee0 	bl	8007d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fae:	d10e      	bne.n	8006fce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fed3 	bl	8007d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d10e      	bne.n	8006ffa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d107      	bne.n	8006ffa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f943 	bl	8007280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b20      	cmp	r3, #32
 8007006:	d10e      	bne.n	8007026 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b20      	cmp	r3, #32
 8007014:	d107      	bne.n	8007026 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f06f 0220 	mvn.w	r2, #32
 800701e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fe93 	bl	8007d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800704a:	2302      	movs	r3, #2
 800704c:	e0ff      	b.n	800724e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b14      	cmp	r3, #20
 800705a:	f200 80f0 	bhi.w	800723e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070b9 	.word	0x080070b9
 8007068:	0800723f 	.word	0x0800723f
 800706c:	0800723f 	.word	0x0800723f
 8007070:	0800723f 	.word	0x0800723f
 8007074:	080070f9 	.word	0x080070f9
 8007078:	0800723f 	.word	0x0800723f
 800707c:	0800723f 	.word	0x0800723f
 8007080:	0800723f 	.word	0x0800723f
 8007084:	0800713b 	.word	0x0800713b
 8007088:	0800723f 	.word	0x0800723f
 800708c:	0800723f 	.word	0x0800723f
 8007090:	0800723f 	.word	0x0800723f
 8007094:	0800717b 	.word	0x0800717b
 8007098:	0800723f 	.word	0x0800723f
 800709c:	0800723f 	.word	0x0800723f
 80070a0:	0800723f 	.word	0x0800723f
 80070a4:	080071bd 	.word	0x080071bd
 80070a8:	0800723f 	.word	0x0800723f
 80070ac:	0800723f 	.word	0x0800723f
 80070b0:	0800723f 	.word	0x0800723f
 80070b4:	080071fd 	.word	0x080071fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f94c 	bl	800735c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0208 	orr.w	r2, r2, #8
 80070d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0204 	bic.w	r2, r2, #4
 80070e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6999      	ldr	r1, [r3, #24]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	619a      	str	r2, [r3, #24]
      break;
 80070f6:	e0a5      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f9a8 	bl	8007454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6999      	ldr	r1, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	021a      	lsls	r2, r3, #8
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]
      break;
 8007138:	e084      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa01 	bl	8007548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0208 	orr.w	r2, r2, #8
 8007154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69da      	ldr	r2, [r3, #28]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0204 	bic.w	r2, r2, #4
 8007164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69d9      	ldr	r1, [r3, #28]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	61da      	str	r2, [r3, #28]
      break;
 8007178:	e064      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fa59 	bl	8007638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69d9      	ldr	r1, [r3, #28]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	021a      	lsls	r2, r3, #8
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	61da      	str	r2, [r3, #28]
      break;
 80071ba:	e043      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fa96 	bl	80076f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0204 	bic.w	r2, r2, #4
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071fa:	e023      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 face 	bl	80077a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007216:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800723c:	e002      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
      break;
 8007242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop

08007258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <TIM_Base_SetConfig+0xbc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d003      	beq.n	80072b4 <TIM_Base_SetConfig+0x20>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b2:	d108      	bne.n	80072c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a21      	ldr	r2, [pc, #132]	; (8007350 <TIM_Base_SetConfig+0xbc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_Base_SetConfig+0x52>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d4:	d007      	beq.n	80072e6 <TIM_Base_SetConfig+0x52>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a1e      	ldr	r2, [pc, #120]	; (8007354 <TIM_Base_SetConfig+0xc0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_Base_SetConfig+0x52>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a1d      	ldr	r2, [pc, #116]	; (8007358 <TIM_Base_SetConfig+0xc4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d108      	bne.n	80072f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <TIM_Base_SetConfig+0xbc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d007      	beq.n	8007334 <TIM_Base_SetConfig+0xa0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0b      	ldr	r2, [pc, #44]	; (8007354 <TIM_Base_SetConfig+0xc0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_Base_SetConfig+0xa0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0a      	ldr	r2, [pc, #40]	; (8007358 <TIM_Base_SetConfig+0xc4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d103      	bne.n	800733c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	615a      	str	r2, [r3, #20]
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40014000 	.word	0x40014000
 8007358:	40014400 	.word	0x40014400

0800735c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f023 0201 	bic.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0303 	bic.w	r3, r3, #3
 8007396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f023 0302 	bic.w	r3, r3, #2
 80073a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a24      	ldr	r2, [pc, #144]	; (8007448 <TIM_OC1_SetConfig+0xec>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_OC1_SetConfig+0x70>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a23      	ldr	r2, [pc, #140]	; (800744c <TIM_OC1_SetConfig+0xf0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC1_SetConfig+0x70>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a22      	ldr	r2, [pc, #136]	; (8007450 <TIM_OC1_SetConfig+0xf4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10c      	bne.n	80073e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0308 	bic.w	r3, r3, #8
 80073d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a17      	ldr	r2, [pc, #92]	; (8007448 <TIM_OC1_SetConfig+0xec>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <TIM_OC1_SetConfig+0xa2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a16      	ldr	r2, [pc, #88]	; (800744c <TIM_OC1_SetConfig+0xf0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_OC1_SetConfig+0xa2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a15      	ldr	r2, [pc, #84]	; (8007450 <TIM_OC1_SetConfig+0xf4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d111      	bne.n	8007422 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800740c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	621a      	str	r2, [r3, #32]
}
 800743c:	bf00      	nop
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400

08007454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0210 	bic.w	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0320 	bic.w	r3, r3, #32
 80074a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a22      	ldr	r2, [pc, #136]	; (800753c <TIM_OC2_SetConfig+0xe8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d10d      	bne.n	80074d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <TIM_OC2_SetConfig+0xe8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <TIM_OC2_SetConfig+0x98>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a18      	ldr	r2, [pc, #96]	; (8007540 <TIM_OC2_SetConfig+0xec>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC2_SetConfig+0x98>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a17      	ldr	r2, [pc, #92]	; (8007544 <TIM_OC2_SetConfig+0xf0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d113      	bne.n	8007514 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40014000 	.word	0x40014000
 8007544:	40014400 	.word	0x40014400

08007548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a21      	ldr	r2, [pc, #132]	; (800762c <TIM_OC3_SetConfig+0xe4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10d      	bne.n	80075c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a18      	ldr	r2, [pc, #96]	; (800762c <TIM_OC3_SetConfig+0xe4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_OC3_SetConfig+0x96>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a17      	ldr	r2, [pc, #92]	; (8007630 <TIM_OC3_SetConfig+0xe8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_OC3_SetConfig+0x96>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <TIM_OC3_SetConfig+0xec>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d113      	bne.n	8007606 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400

08007638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <TIM_OC4_SetConfig+0xb0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d007      	beq.n	80076ac <TIM_OC4_SetConfig+0x74>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a13      	ldr	r2, [pc, #76]	; (80076ec <TIM_OC4_SetConfig+0xb4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_OC4_SetConfig+0x74>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a12      	ldr	r2, [pc, #72]	; (80076f0 <TIM_OC4_SetConfig+0xb8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d109      	bne.n	80076c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	019b      	lsls	r3, r3, #6
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40014400 	.word	0x40014400

080076f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a13      	ldr	r2, [pc, #76]	; (8007798 <TIM_OC5_SetConfig+0xa4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d007      	beq.n	800775e <TIM_OC5_SetConfig+0x6a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a12      	ldr	r2, [pc, #72]	; (800779c <TIM_OC5_SetConfig+0xa8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d003      	beq.n	800775e <TIM_OC5_SetConfig+0x6a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <TIM_OC5_SetConfig+0xac>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d109      	bne.n	8007772 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	621a      	str	r2, [r3, #32]
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	40012c00 	.word	0x40012c00
 800779c:	40014000 	.word	0x40014000
 80077a0:	40014400 	.word	0x40014400

080077a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	051b      	lsls	r3, r3, #20
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a14      	ldr	r2, [pc, #80]	; (800784c <TIM_OC6_SetConfig+0xa8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_OC6_SetConfig+0x6c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a13      	ldr	r2, [pc, #76]	; (8007850 <TIM_OC6_SetConfig+0xac>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_OC6_SetConfig+0x6c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a12      	ldr	r2, [pc, #72]	; (8007854 <TIM_OC6_SetConfig+0xb0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d109      	bne.n	8007824 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	029b      	lsls	r3, r3, #10
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400

08007858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2201      	movs	r2, #1
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1a      	ldr	r2, [r3, #32]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	43db      	mvns	r3, r3
 800787a:	401a      	ands	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	fa01 f303 	lsl.w	r3, r1, r3
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]
}
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <HAL_TIMEx_PWMN_Start_IT+0x28>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	bf14      	ite	ne
 80078c4:	2301      	movne	r3, #1
 80078c6:	2300      	moveq	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e022      	b.n	8007912 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d109      	bne.n	80078e6 <HAL_TIMEx_PWMN_Start_IT+0x42>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	bf14      	ite	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	2300      	moveq	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e015      	b.n	8007912 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d109      	bne.n	8007900 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	e008      	b.n	8007912 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	bf14      	ite	ne
 800790c:	2301      	movne	r3, #1
 800790e:	2300      	moveq	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e090      	b.n	8007a3c <HAL_TIMEx_PWMN_Start_IT+0x198>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <HAL_TIMEx_PWMN_Start_IT+0x86>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007928:	e013      	b.n	8007952 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b04      	cmp	r3, #4
 800792e:	d104      	bne.n	800793a <HAL_TIMEx_PWMN_Start_IT+0x96>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007938:	e00b      	b.n	8007952 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b08      	cmp	r3, #8
 800793e:	d104      	bne.n	800794a <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007948:	e003      	b.n	8007952 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b08      	cmp	r3, #8
 8007956:	d01b      	beq.n	8007990 <HAL_TIMEx_PWMN_Start_IT+0xec>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b08      	cmp	r3, #8
 800795c:	d821      	bhi.n	80079a2 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <HAL_TIMEx_PWMN_Start_IT+0xc8>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b04      	cmp	r3, #4
 8007968:	d009      	beq.n	800797e <HAL_TIMEx_PWMN_Start_IT+0xda>
 800796a:	e01a      	b.n	80079a2 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0202 	orr.w	r2, r2, #2
 800797a:	60da      	str	r2, [r3, #12]
      break;
 800797c:	e014      	b.n	80079a8 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0204 	orr.w	r2, r2, #4
 800798c:	60da      	str	r2, [r3, #12]
      break;
 800798e:	e00b      	b.n	80079a8 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0208 	orr.w	r2, r2, #8
 800799e:	60da      	str	r2, [r3, #12]
      break;
 80079a0:	e002      	b.n	80079a8 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	73fb      	strb	r3, [r7, #15]
      break;
 80079a6:	bf00      	nop
  }

  if (status == HAL_OK)
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d145      	bne.n	8007a3a <HAL_TIMEx_PWMN_Start_IT+0x196>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079bc:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2204      	movs	r2, #4
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f9de 	bl	8007d88 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <HAL_TIMEx_PWMN_Start_IT+0x1a0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d009      	beq.n	80079fa <HAL_TIMEx_PWMN_Start_IT+0x156>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ee:	d004      	beq.n	80079fa <HAL_TIMEx_PWMN_Start_IT+0x156>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d115      	bne.n	8007a26 <HAL_TIMEx_PWMN_Start_IT+0x182>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b06      	cmp	r3, #6
 8007a0a:	d015      	beq.n	8007a38 <HAL_TIMEx_PWMN_Start_IT+0x194>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a12:	d011      	beq.n	8007a38 <HAL_TIMEx_PWMN_Start_IT+0x194>
      {
        __HAL_TIM_ENABLE(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a24:	e008      	b.n	8007a38 <HAL_TIMEx_PWMN_Start_IT+0x194>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0201 	orr.w	r2, r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e000      	b.n	8007a3a <HAL_TIMEx_PWMN_Start_IT+0x196>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a38:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	00010007 	.word	0x00010007

08007a50 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d01b      	beq.n	8007a9c <HAL_TIMEx_PWMN_Stop_IT+0x4c>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d821      	bhi.n	8007aae <HAL_TIMEx_PWMN_Stop_IT+0x5e>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_TIMEx_PWMN_Stop_IT+0x28>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d009      	beq.n	8007a8a <HAL_TIMEx_PWMN_Stop_IT+0x3a>
 8007a76:	e01a      	b.n	8007aae <HAL_TIMEx_PWMN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0202 	bic.w	r2, r2, #2
 8007a86:	60da      	str	r2, [r3, #12]
      break;
 8007a88:	e014      	b.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0204 	bic.w	r2, r2, #4
 8007a98:	60da      	str	r2, [r3, #12]
      break;
 8007a9a:	e00b      	b.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0208 	bic.w	r2, r2, #8
 8007aaa:	60da      	str	r2, [r3, #12]
      break;
 8007aac:	e002      	b.n	8007ab4 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab2:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d164      	bne.n	8007b84 <HAL_TIMEx_PWMN_Stop_IT+0x134>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f960 	bl	8007d88 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	f240 4344 	movw	r3, #1092	; 0x444
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <HAL_TIMEx_PWMN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aea:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a1a      	ldr	r2, [r3, #32]
 8007af2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10f      	bne.n	8007b1c <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a1a      	ldr	r2, [r3, #32]
 8007b02:	f240 4344 	movw	r3, #1092	; 0x444
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10f      	bne.n	8007b4c <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	f240 4344 	movw	r3, #1092	; 0x444
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_TIMEx_PWMN_Stop_IT+0x10c>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b5a:	e013      	b.n	8007b84 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d104      	bne.n	8007b6c <HAL_TIMEx_PWMN_Stop_IT+0x11c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b6a:	e00b      	b.n	8007b84 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d104      	bne.n	8007b7c <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b7a:	e003      	b.n	8007b84 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e04f      	b.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a21      	ldr	r2, [pc, #132]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d108      	bne.n	8007be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a14      	ldr	r2, [pc, #80]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c10:	d004      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a10      	ldr	r2, [pc, #64]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d10c      	bne.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40014000 	.word	0x40014000

08007c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e060      	b.n	8007d3a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a14      	ldr	r2, [pc, #80]	; (8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d115      	bne.n	8007d28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	051b      	lsls	r3, r3, #20
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40012c00 	.word	0x40012c00

08007d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1a      	ldr	r2, [r3, #32]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	401a      	ands	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 031f 	and.w	r3, r3, #31
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e040      	b.n	8007e66 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d106      	bne.n	8007dfa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fa f8b3 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2224      	movs	r2, #36	; 0x24
 8007dfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fc1f 	bl	8008654 <UART_SetConfig>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e022      	b.n	8007e66 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fe1d 	bl	8008a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0201 	orr.w	r2, r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fea4 	bl	8008bac <UART_CheckIdleState>
 8007e64:	4603      	mov	r3, r0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d178      	bne.n	8007f78 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_UART_Transmit_DMA+0x22>
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e071      	b.n	8007f7a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UART_Transmit_DMA+0x34>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e06a      	b.n	8007f7a <HAL_UART_Transmit_DMA+0x10a>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	88fa      	ldrh	r2, [r7, #6]
 8007ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2221      	movs	r2, #33	; 0x21
 8007ece:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d02b      	beq.n	8007f30 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007edc:	4a29      	ldr	r2, [pc, #164]	; (8007f84 <HAL_UART_Transmit_DMA+0x114>)
 8007ede:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee4:	4a28      	ldr	r2, [pc, #160]	; (8007f88 <HAL_UART_Transmit_DMA+0x118>)
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eec:	4a27      	ldr	r2, [pc, #156]	; (8007f8c <HAL_UART_Transmit_DMA+0x11c>)
 8007eee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f00:	4619      	mov	r1, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3328      	adds	r3, #40	; 0x28
 8007f08:	461a      	mov	r2, r3
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	f7fc f94a 	bl	80041a4 <HAL_DMA_Start_IT>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00c      	beq.n	8007f30 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2210      	movs	r2, #16
 8007f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e024      	b.n	8007f7a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2240      	movs	r2, #64	; 0x40
 8007f36:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	623a      	str	r2, [r7, #32]
 8007f62:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	69f9      	ldr	r1, [r7, #28]
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e5      	bne.n	8007f40 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e000      	b.n	8007f7a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007f78:	2302      	movs	r3, #2
  }
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3728      	adds	r7, #40	; 0x28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	08009027 	.word	0x08009027
 8007f88:	080090c1 	.word	0x080090c1
 8007f8c:	08009239 	.word	0x08009239

08007f90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d142      	bne.n	800802c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_Receive_DMA+0x22>
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e03b      	b.n	800802e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_UART_Receive_DMA+0x34>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e034      	b.n	800802e <HAL_UART_Receive_DMA+0x9e>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a18      	ldr	r2, [pc, #96]	; (8008038 <HAL_UART_Receive_DMA+0xa8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d01f      	beq.n	800801c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d018      	beq.n	800801c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	623b      	str	r3, [r7, #32]
 800800a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	69f9      	ldr	r1, [r7, #28]
 800800e:	6a3a      	ldr	r2, [r7, #32]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	61bb      	str	r3, [r7, #24]
   return(result);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e6      	bne.n	8007fea <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	461a      	mov	r2, r3
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fed0 	bl	8008dc8 <UART_Start_Receive_DMA>
 8008028:	4603      	mov	r3, r0
 800802a:	e000      	b.n	800802e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
  }
}
 800802e:	4618      	mov	r0, r3
 8008030:	3728      	adds	r7, #40	; 0x28
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40008000 	.word	0x40008000

0800803c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b0ba      	sub	sp, #232	; 0xe8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008066:	f640 030f 	movw	r3, #2063	; 0x80f
 800806a:	4013      	ands	r3, r2
 800806c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d115      	bne.n	80080a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00f      	beq.n	80080a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 82a6 	beq.w	80085e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
      }
      return;
 80080a2:	e2a0      	b.n	80085e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80080a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8117 	beq.w	80082dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80080ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80080ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080be:	4b85      	ldr	r3, [pc, #532]	; (80082d4 <HAL_UART_IRQHandler+0x298>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 810a 	beq.w	80082dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d011      	beq.n	80080f8 <HAL_UART_IRQHandler+0xbc>
 80080d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2201      	movs	r2, #1
 80080e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ee:	f043 0201 	orr.w	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d011      	beq.n	8008128 <HAL_UART_IRQHandler+0xec>
 8008104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2202      	movs	r2, #2
 8008116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800811e:	f043 0204 	orr.w	r2, r3, #4
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d011      	beq.n	8008158 <HAL_UART_IRQHandler+0x11c>
 8008134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2204      	movs	r2, #4
 8008146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814e:	f043 0202 	orr.w	r2, r3, #2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d017      	beq.n	8008194 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d105      	bne.n	800817c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008174:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2208      	movs	r2, #8
 8008182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800818a:	f043 0208 	orr.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800819c:	2b00      	cmp	r3, #0
 800819e:	d012      	beq.n	80081c6 <HAL_UART_IRQHandler+0x18a>
 80081a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00c      	beq.n	80081c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081bc:	f043 0220 	orr.w	r2, r3, #32
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 820c 	beq.w	80085ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d005      	beq.n	800821e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008216:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800821a:	2b00      	cmp	r3, #0
 800821c:	d04f      	beq.n	80082be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fe9e 	bl	8008f60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d141      	bne.n	80082b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800824c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3308      	adds	r3, #8
 800825a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800825e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800826a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1d9      	bne.n	8008232 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008282:	2b00      	cmp	r3, #0
 8008284:	d013      	beq.n	80082ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <HAL_UART_IRQHandler+0x29c>)
 800828c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	4618      	mov	r0, r3
 8008294:	f7fc f824 	bl	80042e0 <HAL_DMA_Abort_IT>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d017      	beq.n	80082ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ac:	e00f      	b.n	80082ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f9 fc08 	bl	8001ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b4:	e00b      	b.n	80082ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7f9 fc04 	bl	8001ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	e007      	b.n	80082ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7f9 fc00 	bl	8001ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80082cc:	e18d      	b.n	80085ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ce:	bf00      	nop
    return;
 80082d0:	e18b      	b.n	80085ea <HAL_UART_IRQHandler+0x5ae>
 80082d2:	bf00      	nop
 80082d4:	04000120 	.word	0x04000120
 80082d8:	080092b5 	.word	0x080092b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	f040 8146 	bne.w	8008572 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 813f 	beq.w	8008572 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8138 	beq.w	8008572 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2210      	movs	r2, #16
 8008308:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008314:	2b40      	cmp	r3, #64	; 0x40
 8008316:	f040 80b4 	bne.w	8008482 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008326:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 815f 	beq.w	80085ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800833a:	429a      	cmp	r2, r3
 800833c:	f080 8157 	bcs.w	80085ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008346:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 8085 	bne.w	8008466 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800838a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800839e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1da      	bne.n	800835c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e1      	bne.n	80083a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800840c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e3      	bne.n	80083e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008436:	f023 0310 	bic.w	r3, r3, #16
 800843a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008448:	65bb      	str	r3, [r7, #88]	; 0x58
 800844a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800844e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e4      	bne.n	8008426 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008460:	4618      	mov	r0, r3
 8008462:	f7fb feff 	bl	8004264 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008472:	b29b      	uxth	r3, r3
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	b29b      	uxth	r3, r3
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8de 	bl	800863c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008480:	e0b5      	b.n	80085ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800848e:	b29b      	uxth	r3, r3
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 80a7 	beq.w	80085f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80084a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 80a2 	beq.w	80085f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084d0:	647b      	str	r3, [r7, #68]	; 0x44
 80084d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e4      	bne.n	80084ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3308      	adds	r3, #8
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	623b      	str	r3, [r7, #32]
   return(result);
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008508:	633a      	str	r2, [r7, #48]	; 0x30
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800850e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e3      	bne.n	80084e4 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	60fb      	str	r3, [r7, #12]
   return(result);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0310 	bic.w	r3, r3, #16
 8008542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	69b9      	ldr	r1, [r7, #24]
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	617b      	str	r3, [r7, #20]
   return(result);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e4      	bne.n	800852e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f866 	bl	800863c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008570:	e03f      	b.n	80085f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00e      	beq.n	800859c <HAL_UART_IRQHandler+0x560>
 800857e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d008      	beq.n	800859c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008592:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fecd 	bl	8009334 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800859a:	e02d      	b.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800859c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00e      	beq.n	80085c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80085a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01c      	beq.n	80085f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
    }
    return;
 80085c4:	e017      	b.n	80085f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d012      	beq.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
 80085d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fe7e 	bl	80092e0 <UART_EndTransmit_IT>
    return;
 80085e4:	e008      	b.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80085e6:	bf00      	nop
 80085e8:	e006      	b.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80085ea:	bf00      	nop
 80085ec:	e004      	b.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80085ee:	bf00      	nop
 80085f0:	e002      	b.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80085f2:	bf00      	nop
 80085f4:	e000      	b.n	80085f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80085f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80085f8:	37e8      	adds	r7, #232	; 0xe8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop

08008600 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008654:	b5b0      	push	{r4, r5, r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	431a      	orrs	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4313      	orrs	r3, r2
 8008676:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4baf      	ldr	r3, [pc, #700]	; (800893c <UART_SetConfig+0x2e8>)
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	69f9      	ldr	r1, [r7, #28]
 8008688:	430b      	orrs	r3, r1
 800868a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4aa4      	ldr	r2, [pc, #656]	; (8008940 <UART_SetConfig+0x2ec>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d004      	beq.n	80086bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a9b      	ldr	r2, [pc, #620]	; (8008944 <UART_SetConfig+0x2f0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d121      	bne.n	800871e <UART_SetConfig+0xca>
 80086da:	4b9b      	ldr	r3, [pc, #620]	; (8008948 <UART_SetConfig+0x2f4>)
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d817      	bhi.n	8008718 <UART_SetConfig+0xc4>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <UART_SetConfig+0x9c>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008701 	.word	0x08008701
 80086f4:	0800870d 	.word	0x0800870d
 80086f8:	08008707 	.word	0x08008707
 80086fc:	08008713 	.word	0x08008713
 8008700:	2301      	movs	r3, #1
 8008702:	76fb      	strb	r3, [r7, #27]
 8008704:	e070      	b.n	80087e8 <UART_SetConfig+0x194>
 8008706:	2302      	movs	r3, #2
 8008708:	76fb      	strb	r3, [r7, #27]
 800870a:	e06d      	b.n	80087e8 <UART_SetConfig+0x194>
 800870c:	2304      	movs	r3, #4
 800870e:	76fb      	strb	r3, [r7, #27]
 8008710:	e06a      	b.n	80087e8 <UART_SetConfig+0x194>
 8008712:	2308      	movs	r3, #8
 8008714:	76fb      	strb	r3, [r7, #27]
 8008716:	e067      	b.n	80087e8 <UART_SetConfig+0x194>
 8008718:	2310      	movs	r3, #16
 800871a:	76fb      	strb	r3, [r7, #27]
 800871c:	e064      	b.n	80087e8 <UART_SetConfig+0x194>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a8a      	ldr	r2, [pc, #552]	; (800894c <UART_SetConfig+0x2f8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d132      	bne.n	800878e <UART_SetConfig+0x13a>
 8008728:	4b87      	ldr	r3, [pc, #540]	; (8008948 <UART_SetConfig+0x2f4>)
 800872a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872e:	f003 030c 	and.w	r3, r3, #12
 8008732:	2b0c      	cmp	r3, #12
 8008734:	d828      	bhi.n	8008788 <UART_SetConfig+0x134>
 8008736:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0xe8>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	08008771 	.word	0x08008771
 8008740:	08008789 	.word	0x08008789
 8008744:	08008789 	.word	0x08008789
 8008748:	08008789 	.word	0x08008789
 800874c:	0800877d 	.word	0x0800877d
 8008750:	08008789 	.word	0x08008789
 8008754:	08008789 	.word	0x08008789
 8008758:	08008789 	.word	0x08008789
 800875c:	08008777 	.word	0x08008777
 8008760:	08008789 	.word	0x08008789
 8008764:	08008789 	.word	0x08008789
 8008768:	08008789 	.word	0x08008789
 800876c:	08008783 	.word	0x08008783
 8008770:	2300      	movs	r3, #0
 8008772:	76fb      	strb	r3, [r7, #27]
 8008774:	e038      	b.n	80087e8 <UART_SetConfig+0x194>
 8008776:	2302      	movs	r3, #2
 8008778:	76fb      	strb	r3, [r7, #27]
 800877a:	e035      	b.n	80087e8 <UART_SetConfig+0x194>
 800877c:	2304      	movs	r3, #4
 800877e:	76fb      	strb	r3, [r7, #27]
 8008780:	e032      	b.n	80087e8 <UART_SetConfig+0x194>
 8008782:	2308      	movs	r3, #8
 8008784:	76fb      	strb	r3, [r7, #27]
 8008786:	e02f      	b.n	80087e8 <UART_SetConfig+0x194>
 8008788:	2310      	movs	r3, #16
 800878a:	76fb      	strb	r3, [r7, #27]
 800878c:	e02c      	b.n	80087e8 <UART_SetConfig+0x194>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a6b      	ldr	r2, [pc, #428]	; (8008940 <UART_SetConfig+0x2ec>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d125      	bne.n	80087e4 <UART_SetConfig+0x190>
 8008798:	4b6b      	ldr	r3, [pc, #428]	; (8008948 <UART_SetConfig+0x2f4>)
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a6:	d017      	beq.n	80087d8 <UART_SetConfig+0x184>
 80087a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ac:	d817      	bhi.n	80087de <UART_SetConfig+0x18a>
 80087ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b2:	d00b      	beq.n	80087cc <UART_SetConfig+0x178>
 80087b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b8:	d811      	bhi.n	80087de <UART_SetConfig+0x18a>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <UART_SetConfig+0x172>
 80087be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c2:	d006      	beq.n	80087d2 <UART_SetConfig+0x17e>
 80087c4:	e00b      	b.n	80087de <UART_SetConfig+0x18a>
 80087c6:	2300      	movs	r3, #0
 80087c8:	76fb      	strb	r3, [r7, #27]
 80087ca:	e00d      	b.n	80087e8 <UART_SetConfig+0x194>
 80087cc:	2302      	movs	r3, #2
 80087ce:	76fb      	strb	r3, [r7, #27]
 80087d0:	e00a      	b.n	80087e8 <UART_SetConfig+0x194>
 80087d2:	2304      	movs	r3, #4
 80087d4:	76fb      	strb	r3, [r7, #27]
 80087d6:	e007      	b.n	80087e8 <UART_SetConfig+0x194>
 80087d8:	2308      	movs	r3, #8
 80087da:	76fb      	strb	r3, [r7, #27]
 80087dc:	e004      	b.n	80087e8 <UART_SetConfig+0x194>
 80087de:	2310      	movs	r3, #16
 80087e0:	76fb      	strb	r3, [r7, #27]
 80087e2:	e001      	b.n	80087e8 <UART_SetConfig+0x194>
 80087e4:	2310      	movs	r3, #16
 80087e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a54      	ldr	r2, [pc, #336]	; (8008940 <UART_SetConfig+0x2ec>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d173      	bne.n	80088da <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087f2:	7efb      	ldrb	r3, [r7, #27]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d824      	bhi.n	8008842 <UART_SetConfig+0x1ee>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <UART_SetConfig+0x1ac>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008825 	.word	0x08008825
 8008804:	08008843 	.word	0x08008843
 8008808:	0800882d 	.word	0x0800882d
 800880c:	08008843 	.word	0x08008843
 8008810:	08008833 	.word	0x08008833
 8008814:	08008843 	.word	0x08008843
 8008818:	08008843 	.word	0x08008843
 800881c:	08008843 	.word	0x08008843
 8008820:	0800883b 	.word	0x0800883b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008824:	f7fc fe16 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 8008828:	6178      	str	r0, [r7, #20]
        break;
 800882a:	e00f      	b.n	800884c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800882c:	4b48      	ldr	r3, [pc, #288]	; (8008950 <UART_SetConfig+0x2fc>)
 800882e:	617b      	str	r3, [r7, #20]
        break;
 8008830:	e00c      	b.n	800884c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008832:	f7fc fd77 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 8008836:	6178      	str	r0, [r7, #20]
        break;
 8008838:	e008      	b.n	800884c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800883a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800883e:	617b      	str	r3, [r7, #20]
        break;
 8008840:	e004      	b.n	800884c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	76bb      	strb	r3, [r7, #26]
        break;
 800884a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80fc 	beq.w	8008a4c <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4413      	add	r3, r2
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	429a      	cmp	r2, r3
 8008862:	d305      	bcc.n	8008870 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d902      	bls.n	8008876 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	76bb      	strb	r3, [r7, #26]
 8008874:	e0ea      	b.n	8008a4c <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	4618      	mov	r0, r3
 800887a:	f04f 0100 	mov.w	r1, #0
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	020b      	lsls	r3, r1, #8
 8008888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800888c:	0202      	lsls	r2, r0, #8
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	6849      	ldr	r1, [r1, #4]
 8008892:	0849      	lsrs	r1, r1, #1
 8008894:	4608      	mov	r0, r1
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	1814      	adds	r4, r2, r0
 800889c:	eb43 0501 	adc.w	r5, r3, r1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	461a      	mov	r2, r3
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f7 fc8d 	bl	80001cc <__aeabi_uldivmod>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4613      	mov	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c0:	d308      	bcc.n	80088d4 <UART_SetConfig+0x280>
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c8:	d204      	bcs.n	80088d4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	60da      	str	r2, [r3, #12]
 80088d2:	e0bb      	b.n	8008a4c <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	76bb      	strb	r3, [r7, #26]
 80088d8:	e0b8      	b.n	8008a4c <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088e2:	d167      	bne.n	80089b4 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80088e4:	7efb      	ldrb	r3, [r7, #27]
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d834      	bhi.n	8008954 <UART_SetConfig+0x300>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0x29c>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008915 	.word	0x08008915
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	08008925 	.word	0x08008925
 80088fc:	08008955 	.word	0x08008955
 8008900:	0800892b 	.word	0x0800892b
 8008904:	08008955 	.word	0x08008955
 8008908:	08008955 	.word	0x08008955
 800890c:	08008955 	.word	0x08008955
 8008910:	08008933 	.word	0x08008933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008914:	f7fc fd9e 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 8008918:	6178      	str	r0, [r7, #20]
        break;
 800891a:	e020      	b.n	800895e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800891c:	f7fc fdb0 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8008920:	6178      	str	r0, [r7, #20]
        break;
 8008922:	e01c      	b.n	800895e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <UART_SetConfig+0x2fc>)
 8008926:	617b      	str	r3, [r7, #20]
        break;
 8008928:	e019      	b.n	800895e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800892a:	f7fc fcfb 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 800892e:	6178      	str	r0, [r7, #20]
        break;
 8008930:	e015      	b.n	800895e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008936:	617b      	str	r3, [r7, #20]
        break;
 8008938:	e011      	b.n	800895e <UART_SetConfig+0x30a>
 800893a:	bf00      	nop
 800893c:	efff69f3 	.word	0xefff69f3
 8008940:	40008000 	.word	0x40008000
 8008944:	40013800 	.word	0x40013800
 8008948:	40021000 	.word	0x40021000
 800894c:	40004400 	.word	0x40004400
 8008950:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	76bb      	strb	r3, [r7, #26]
        break;
 800895c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d073      	beq.n	8008a4c <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	005a      	lsls	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	441a      	add	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b0f      	cmp	r3, #15
 800897e:	d916      	bls.n	80089ae <UART_SetConfig+0x35a>
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008986:	d212      	bcs.n	80089ae <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f023 030f 	bic.w	r3, r3, #15
 8008990:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	b29b      	uxth	r3, r3
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	b29a      	uxth	r2, r3
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	89fa      	ldrh	r2, [r7, #14]
 80089aa:	60da      	str	r2, [r3, #12]
 80089ac:	e04e      	b.n	8008a4c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	76bb      	strb	r3, [r7, #26]
 80089b2:	e04b      	b.n	8008a4c <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089b4:	7efb      	ldrb	r3, [r7, #27]
 80089b6:	2b08      	cmp	r3, #8
 80089b8:	d827      	bhi.n	8008a0a <UART_SetConfig+0x3b6>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0x36c>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	08008a0b 	.word	0x08008a0b
 80089d0:	080089fb 	.word	0x080089fb
 80089d4:	08008a0b 	.word	0x08008a0b
 80089d8:	08008a0b 	.word	0x08008a0b
 80089dc:	08008a0b 	.word	0x08008a0b
 80089e0:	08008a03 	.word	0x08008a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e4:	f7fc fd36 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 80089e8:	6178      	str	r0, [r7, #20]
        break;
 80089ea:	e013      	b.n	8008a14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ec:	f7fc fd48 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 80089f0:	6178      	str	r0, [r7, #20]
        break;
 80089f2:	e00f      	b.n	8008a14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089f4:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <UART_SetConfig+0x410>)
 80089f6:	617b      	str	r3, [r7, #20]
        break;
 80089f8:	e00c      	b.n	8008a14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089fa:	f7fc fc93 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 80089fe:	6178      	str	r0, [r7, #20]
        break;
 8008a00:	e008      	b.n	8008a14 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a06:	617b      	str	r3, [r7, #20]
        break;
 8008a08:	e004      	b.n	8008a14 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	76bb      	strb	r3, [r7, #26]
        break;
 8008a12:	bf00      	nop
    }

    if (pclk != 0U)
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085a      	lsrs	r2, r3, #1
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	441a      	add	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b0f      	cmp	r3, #15
 8008a32:	d909      	bls.n	8008a48 <UART_SetConfig+0x3f4>
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a3a:	d205      	bcs.n	8008a48 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	e001      	b.n	8008a4c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a58:	7ebb      	ldrb	r3, [r7, #26]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bdb0      	pop	{r4, r5, r7, pc}
 8008a62:	bf00      	nop
 8008a64:	00f42400 	.word	0x00f42400

08008a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00a      	beq.n	8008a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00a      	beq.n	8008ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00a      	beq.n	8008ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b66:	d10a      	bne.n	8008b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bbc:	f7f9 fc9e 	bl	80024fc <HAL_GetTick>
 8008bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d10e      	bne.n	8008bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f82d 	bl	8008c3e <UART_WaitOnFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e023      	b.n	8008c36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d10e      	bne.n	8008c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f817 	bl	8008c3e <UART_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e00d      	b.n	8008c36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2220      	movs	r2, #32
 8008c24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b09c      	sub	sp, #112	; 0x70
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	603b      	str	r3, [r7, #0]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4e:	e0a5      	b.n	8008d9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c56:	f000 80a1 	beq.w	8008d9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5a:	f7f9 fc4f 	bl	80024fc <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d13e      	bne.n	8008cee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c84:	667b      	str	r3, [r7, #100]	; 0x64
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e6      	bne.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	f023 0301 	bic.w	r3, r3, #1
 8008cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e5      	bne.n	8008ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e067      	b.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d04f      	beq.n	8008d9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d0a:	d147      	bne.n	8008d9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
 8008d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e6      	bne.n	8008d16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	613b      	str	r3, [r7, #16]
   return(result);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d68:	623a      	str	r2, [r7, #32]
 8008d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	69f9      	ldr	r1, [r7, #28]
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e5      	bne.n	8008d48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2220      	movs	r2, #32
 8008d86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e010      	b.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69da      	ldr	r2, [r3, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4013      	ands	r3, r2
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	f43f af4a 	beq.w	8008c50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3770      	adds	r7, #112	; 0x70
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b096      	sub	sp, #88	; 0x58
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2222      	movs	r2, #34	; 0x22
 8008df0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d02b      	beq.n	8008e52 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfe:	4a42      	ldr	r2, [pc, #264]	; (8008f08 <UART_Start_Receive_DMA+0x140>)
 8008e00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e06:	4a41      	ldr	r2, [pc, #260]	; (8008f0c <UART_Start_Receive_DMA+0x144>)
 8008e08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0e:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <UART_Start_Receive_DMA+0x148>)
 8008e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	2200      	movs	r2, #0
 8008e18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3324      	adds	r3, #36	; 0x24
 8008e24:	4619      	mov	r1, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	f7fb f9b9 	bl	80041a4 <HAL_DMA_Start_IT>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00c      	beq.n	8008e52 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e055      	b.n	8008efe <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d018      	beq.n	8008e94 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e76:	657b      	str	r3, [r7, #84]	; 0x54
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e82:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e6      	bne.n	8008e62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	f043 0301 	orr.w	r3, r3, #1
 8008eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eb4:	637a      	str	r2, [r7, #52]	; 0x34
 8008eb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3308      	adds	r3, #8
 8008ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ee8:	623a      	str	r2, [r7, #32]
 8008eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	69f9      	ldr	r1, [r7, #28]
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e5      	bne.n	8008ec8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3758      	adds	r7, #88	; 0x58
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	080090dd 	.word	0x080090dd
 8008f0c:	08009201 	.word	0x08009201
 8008f10:	08009239 	.word	0x08009239

08008f14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b089      	sub	sp, #36	; 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6979      	ldr	r1, [r7, #20]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	613b      	str	r3, [r7, #16]
   return(result);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e6      	bne.n	8008f1c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008f54:	bf00      	nop
 8008f56:	3724      	adds	r7, #36	; 0x24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b095      	sub	sp, #84	; 0x54
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f86:	643b      	str	r3, [r7, #64]	; 0x40
 8008f88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e6      	bne.n	8008f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f023 0301 	bic.w	r3, r3, #1
 8008fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d118      	bne.n	8009008 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f023 0310 	bic.w	r3, r3, #16
 8008fea:	647b      	str	r3, [r7, #68]	; 0x44
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6979      	ldr	r1, [r7, #20]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	613b      	str	r3, [r7, #16]
   return(result);
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e6      	bne.n	8008fd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	665a      	str	r2, [r3, #100]	; 0x64
}
 800901a:	bf00      	nop
 800901c:	3754      	adds	r7, #84	; 0x54
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b090      	sub	sp, #64	; 0x40
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d137      	bne.n	80090b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009044:	2200      	movs	r2, #0
 8009046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800904a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	623b      	str	r3, [r7, #32]
   return(result);
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800906a:	633a      	str	r2, [r7, #48]	; 0x30
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800907e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	60fb      	str	r3, [r7, #12]
   return(result);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009092:	637b      	str	r3, [r7, #52]	; 0x34
 8009094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	61fb      	str	r3, [r7, #28]
 800909e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	69b9      	ldr	r1, [r7, #24]
 80090a2:	69fa      	ldr	r2, [r7, #28]
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	617b      	str	r3, [r7, #20]
   return(result);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e6      	bne.n	800907e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090b0:	e002      	b.n	80090b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090b4:	f7f8 fd10 	bl	8001ad8 <HAL_UART_TxCpltCallback>
}
 80090b8:	bf00      	nop
 80090ba:	3740      	adds	r7, #64	; 0x40
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f7ff fa96 	bl	8008600 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b09c      	sub	sp, #112	; 0x70
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0320 	and.w	r3, r3, #32
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d170      	bne.n	80091da <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80090f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800910e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009114:	66bb      	str	r3, [r7, #104]	; 0x68
 8009116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800911e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009120:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800912c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e6      	bne.n	8009100 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	f023 0301 	bic.w	r3, r3, #1
 8009148:	667b      	str	r3, [r7, #100]	; 0x64
 800914a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009152:	647a      	str	r2, [r7, #68]	; 0x44
 8009154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	623b      	str	r3, [r7, #32]
   return(result);
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917c:	663b      	str	r3, [r7, #96]	; 0x60
 800917e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009186:	633a      	str	r2, [r7, #48]	; 0x30
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800919a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919c:	2220      	movs	r2, #32
 800919e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d118      	bne.n	80091da <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f023 0310 	bic.w	r3, r3, #16
 80091bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	69b9      	ldr	r1, [r7, #24]
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	617b      	str	r3, [r7, #20]
   return(result);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d107      	bne.n	80091f2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091e8:	4619      	mov	r1, r3
 80091ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80091ec:	f7ff fa26 	bl	800863c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091f0:	e002      	b.n	80091f8 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80091f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80091f4:	f7ff fa0e 	bl	8008614 <HAL_UART_RxCpltCallback>
}
 80091f8:	bf00      	nop
 80091fa:	3770      	adds	r7, #112	; 0x70
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009212:	2b01      	cmp	r3, #1
 8009214:	d109      	bne.n	800922a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	4619      	mov	r1, r3
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fa0a 	bl	800863c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009228:	e002      	b.n	8009230 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f7ff f9fc 	bl	8008628 <HAL_UART_RxHalfCpltCallback>
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800924a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009250:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925c:	2b80      	cmp	r3, #128	; 0x80
 800925e:	d109      	bne.n	8009274 <UART_DMAError+0x3c>
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b21      	cmp	r3, #33	; 0x21
 8009264:	d106      	bne.n	8009274 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800926e:	6978      	ldr	r0, [r7, #20]
 8009270:	f7ff fe50 	bl	8008f14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d109      	bne.n	8009296 <UART_DMAError+0x5e>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b22      	cmp	r3, #34	; 0x22
 8009286:	d106      	bne.n	8009296 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2200      	movs	r2, #0
 800928c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009290:	6978      	ldr	r0, [r7, #20]
 8009292:	f7ff fe65 	bl	8008f60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800929c:	f043 0210 	orr.w	r2, r3, #16
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a6:	6978      	ldr	r0, [r7, #20]
 80092a8:	f7f8 fc0c 	bl	8001ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ac:	bf00      	nop
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7f8 fbf6 	bl	8001ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	613b      	str	r3, [r7, #16]
   return(result);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7f8 fbd6 	bl	8001ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932c:	bf00      	nop
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <__libc_init_array>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	4d0d      	ldr	r5, [pc, #52]	; (8009380 <__libc_init_array+0x38>)
 800934c:	4c0d      	ldr	r4, [pc, #52]	; (8009384 <__libc_init_array+0x3c>)
 800934e:	1b64      	subs	r4, r4, r5
 8009350:	10a4      	asrs	r4, r4, #2
 8009352:	2600      	movs	r6, #0
 8009354:	42a6      	cmp	r6, r4
 8009356:	d109      	bne.n	800936c <__libc_init_array+0x24>
 8009358:	4d0b      	ldr	r5, [pc, #44]	; (8009388 <__libc_init_array+0x40>)
 800935a:	4c0c      	ldr	r4, [pc, #48]	; (800938c <__libc_init_array+0x44>)
 800935c:	f000 f820 	bl	80093a0 <_init>
 8009360:	1b64      	subs	r4, r4, r5
 8009362:	10a4      	asrs	r4, r4, #2
 8009364:	2600      	movs	r6, #0
 8009366:	42a6      	cmp	r6, r4
 8009368:	d105      	bne.n	8009376 <__libc_init_array+0x2e>
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009370:	4798      	blx	r3
 8009372:	3601      	adds	r6, #1
 8009374:	e7ee      	b.n	8009354 <__libc_init_array+0xc>
 8009376:	f855 3b04 	ldr.w	r3, [r5], #4
 800937a:	4798      	blx	r3
 800937c:	3601      	adds	r6, #1
 800937e:	e7f2      	b.n	8009366 <__libc_init_array+0x1e>
 8009380:	08009408 	.word	0x08009408
 8009384:	08009408 	.word	0x08009408
 8009388:	08009408 	.word	0x08009408
 800938c:	0800940c 	.word	0x0800940c

08009390 <memset>:
 8009390:	4402      	add	r2, r0
 8009392:	4603      	mov	r3, r0
 8009394:	4293      	cmp	r3, r2
 8009396:	d100      	bne.n	800939a <memset+0xa>
 8009398:	4770      	bx	lr
 800939a:	f803 1b01 	strb.w	r1, [r3], #1
 800939e:	e7f9      	b.n	8009394 <memset+0x4>

080093a0 <_init>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr

080093ac <_fini>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	bf00      	nop
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr
